<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-07-22T00:37:37+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Rengui’s Notes</title><subtitle>Life doesn't just happen to you; you receive everything in your life based on what you've given. 生命中的一切都不是巧合，你得到什么，是源于你付出了什么。</subtitle><author><name>Zhao Rengui</name></author><entry><title type="html">Docker notes</title><link href="http://localhost:4000/software/2019/07/11/docker/" rel="alternate" type="text/html" title="Docker notes" /><published>2019-07-11T00:00:00+08:00</published><updated>2019-07-11T00:00:00+08:00</updated><id>http://localhost:4000/software/2019/07/11/docker</id><content type="html" xml:base="http://localhost:4000/software/2019/07/11/docker/">&lt;h1 id=&quot;docker简介&quot;&gt;Docker简介&lt;/h1&gt;
&lt;h2 id=&quot;什么是-docker&quot;&gt;什么是 Docker？&lt;/h2&gt;
&lt;p&gt;Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！
无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。&lt;/p&gt;
&lt;h2 id=&quot;为什么要使用-docker&quot;&gt;为什么要使用 Docker？&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;更高效的利用系统资源&lt;/li&gt;
  &lt;li&gt;更快速的启动时间&lt;/li&gt;
  &lt;li&gt;一致的运行环境&lt;/li&gt;
  &lt;li&gt;持续交付和部署&lt;/li&gt;
  &lt;li&gt;更轻松的迁移&lt;/li&gt;
  &lt;li&gt;更轻松的维护和扩展&lt;/li&gt;
  &lt;li&gt;对比传统虚拟机总结&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;容器&lt;/th&gt;
      &lt;th&gt;虚拟机&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;启动&lt;/td&gt;
      &lt;td&gt;秒级&lt;/td&gt;
      &lt;td&gt;分钟级&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;硬盘使用&lt;/td&gt;
      &lt;td&gt;一般为 MB&lt;/td&gt;
      &lt;td&gt;一般为 GB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;性能&lt;/td&gt;
      &lt;td&gt;接近原生&lt;/td&gt;
      &lt;td&gt;弱于&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;系统支持量&lt;/td&gt;
      &lt;td&gt;单机支持上千个容器&lt;/td&gt;
      &lt;td&gt;一般几十个&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;基本概念&quot;&gt;基本概念&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;镜像(Image)
Docker 镜像，就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。
Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。&lt;/li&gt;
  &lt;li&gt;分层存储
Docker 利用了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。
镜像构建时，会一层层构建，前一层是后一层的基础。在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。&lt;/li&gt;
  &lt;li&gt;容器(Container)
容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。
容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。
每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。&lt;/li&gt;
  &lt;li&gt;仓库(Repository)
&lt;strong&gt;Docker Registry&lt;/strong&gt;
&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html&quot;&gt;Docker Registry&lt;/a&gt; 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Docker Registry 公开服务&lt;/strong&gt;
开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。
最常使用的 Registry 公开服务&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;官方的 &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://quay.io/repository/&quot;&gt;Quay.io&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;时速云镜像仓库&lt;/li&gt;
  &lt;li&gt;网易云镜像服务&lt;/li&gt;
  &lt;li&gt;DaoCloud 镜像市场&lt;/li&gt;
  &lt;li&gt;阿里云镜像库&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（Registry Mirror），这些镜像服务被称为加速器。常见的有：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cr.console.aliyun.com/#/accelerator&quot;&gt;阿里云加速器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.daocloud.io/mirror#accelerator-doc&quot;&gt;DaoCloud 加速器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;install-docker-ce&quot;&gt;Install Docker CE&lt;/h1&gt;
&lt;h2 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h2&gt;
&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Uninstall old versions
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo apt remove docker docker-engine docker.io containerd runc&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Install packages to allow apt to use a repository over HTTPS:
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo apt update
$ sudo apt-get install \
apt-transport-https \
ca-certificates \
curl \
gnupg-agent \
software-properties-common&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Add Docker’s official GPG key:
    &lt;blockquote&gt;
      &lt;p&gt;$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
Verify that you now have the key with the fingerprint 9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88, by searching for the last 8 characters of the fingerprint.
sudo apt-key fingerprint 0EBFCD88
pub   rsa4096 2017-02-22 [SCEA]
   9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
uid           [ unknown] Docker Release (CE deb) &lt;a href=&quot;mailto:docker@docker.com&quot;&gt;docker@docker.com&lt;/a&gt;
sub   rsa4096 2017-02-22 [S]&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Use the following command to set up the stable repository.
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo add-apt-repository \
“deb [arch=amd64] https://download.docker.com/linux/ubuntu \
$(lsb_release -cs) \
stable”&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the latest version of Docker CE and containerd, or go to the next step to install a specific version:
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo apt-get install docker-ce docker-ce-cli containerd.io&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;To install a specific version of Docker CE, list the available versions in the repo, then select and install:
    &lt;ul&gt;
      &lt;li&gt;List the versions available in your repo:
        &lt;blockquote&gt;
          &lt;p&gt;$ apt-cache madison docker-ce&lt;/p&gt;
        &lt;/blockquote&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Install a specific version using the version string from the second column, for example,
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo apt-get install docker-ce=&lt;VERSION_STRING&gt; docker-ce-cli=&lt;VERSION_STRING&gt; containerd.io&lt;/VERSION_STRING&gt;&lt;/VERSION_STRING&gt;&lt;/p&gt;
      &lt;ol&gt;
        &lt;li&gt;Verify that Docker CE is installed correctly by running the hello-world image.
$ sudo docker run hello-world&lt;/li&gt;
        &lt;li&gt;Test Docker Version and Installation
// List Docker CLI commands
$ docker
$ docker container –help&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;// Display Docker version and info
$ sudo docker –version
$ sudo docker version
$ sudo docker info&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;Uninstall Docker CE
// Uninstall the Docker CE package
$ sudo apt purge docker-ce
// Images, containers, volumes, or customized configuration files on your host are not automatically removed. To delete all images, containers, and volumes:
$ sudo rm -rf /var/lib/docker&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;get-started-with-docker&quot;&gt;Get Started with Docker&lt;/h2&gt;
&lt;h3 id=&quot;define-a-container-with-dockerfile&quot;&gt;Define a container with Dockerfile&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Create an empty directory on your local machine. Change directories (cd) into the new directory, create a file called Dockerfile
    &lt;blockquote&gt;
      &lt;p&gt;$ vim Dockerfile&lt;/p&gt;
      &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Use an official Python runtime as a parent image&lt;/span&gt;
FROM python:3.7-slim
&lt;span class=&quot;c&quot;&gt;# Set the working directory to /app&lt;/span&gt;
WORKDIR /app
&lt;span class=&quot;c&quot;&gt;# Copy the current directory contents into the container at /app&lt;/span&gt;
COPY &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; /app
&lt;span class=&quot;c&quot;&gt;# Install any needed packages specified in requirements.txt&lt;/span&gt;
RUN pip install &lt;span class=&quot;nt&quot;&gt;--trusted-host&lt;/span&gt; pypi.python.org &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;span class=&quot;c&quot;&gt;# Make port 80 available to the world outside this container&lt;/span&gt;
EXPOSE 80
&lt;span class=&quot;c&quot;&gt;# Define environment variable&lt;/span&gt;
ENV NAME World
&lt;span class=&quot;c&quot;&gt;# Run app.py when the container launches&lt;/span&gt;
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;app.py&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Create two more files, requirements.txt and app.py
    &lt;blockquote&gt;
      &lt;p&gt;$ vim requirements.txt&lt;/p&gt;
      &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Flask
Redis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;$ vim app.py
```shell
from flask import Flask
from redis import Redis, RedisError
import os
import socket&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;connect-to-redis&quot;&gt;Connect to Redis&lt;/h1&gt;
&lt;p&gt;redis = Redis(host=”redis”, db=0, socket_connect_timeout=2, socket_timeout=2)&lt;/p&gt;

&lt;p&gt;app = Flask(&lt;strong&gt;name&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;@app.route(“/”)
def hello():
    try:
        visits = redis.incr(“counter”)
    except RedisError:
        visits = “&lt;i&gt;cannot connect to Redis, counter disabled&lt;/i&gt;”&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;html = &quot;&amp;lt;h3&amp;gt;Hello {name}!&amp;lt;/h3&amp;gt;&quot; \
       &quot;&amp;lt;b&amp;gt;Hostname:&amp;lt;/b&amp;gt; {hostname}&amp;lt;br/&amp;gt;&quot; \
       &quot;&amp;lt;b&amp;gt;Visits:&amp;lt;/b&amp;gt; {visits}&quot;
return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;if &lt;strong&gt;name&lt;/strong&gt; == “&lt;strong&gt;main&lt;/strong&gt;”:
    app.run(host=’0.0.0.0’, port=80)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3. Installs the Flask and Redis libraries for Python
&amp;gt; $ sudo pip install -r requirements.txt
4. Build the app
&amp;gt; $ ls
&amp;gt; // Create image using this directory's Dockerfile
&amp;gt; $ sudo docker build --tag=friendlyhello .
&amp;gt; // List all images on this machine
&amp;gt; $ sudo docker image ls
5. Proxy server settings
```shell
# Proxy server settings
# Proxy servers can block connections to your web app once it’s up and running. If you are behind a proxy server, add the following lines to your Dockerfile, using the ENV command to specify the host and port for your proxy servers:
# Set proxy server, replace host:port with values for your servers
ENV http_proxy host:port
ENV https_proxy host:port
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;DNS settings
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# DNS settings&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# DNS misconfigurations can generate problems with pip. You need to set your own DNS server address to make pip work properly. You might want to change the DNS settings of the Docker daemon. You can edit (or create) the configuration file at /etc/docker/daemon.json with the dns key, as following:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;dns&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;your_dns_address&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;8.8.8.8&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Before proceeding, save daemon.json and restart the docker service.
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo service docker restart&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the app
    &lt;blockquote&gt;
      &lt;p&gt;// Run the app, mapping your machine’s port 4000 to the container’s published port 80 using -p:
$ sudo docker run -p 4000:80 friendlyhello
// Let’s run the app in the background, in detached mode:
$ sudo docker run -d -p 4000:80 friendlyhello&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go to that URL in a web browser to see the display content served up on a web page.&lt;/p&gt;

&lt;h3 id=&quot;share-your-image&quot;&gt;Share your image&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Log in with your Docker ID
If you don’t have a Docker account, sign up for one at &lt;a href=&quot;https://hub.docker.com/&quot;&gt;hub.docker.com&lt;/a&gt;. Make note of your username.
Log in to the Docker public registry on your local machine.
    &lt;blockquote&gt;
      &lt;p&gt;$ sudo docker login&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Tag the image
    &lt;blockquote&gt;
      &lt;p&gt;// Run docker tag image with your username, repository, and tag names so that the image uploads to your desired destination. The syntax of the command is:
docker tag &amp;lt;image&amp;gt; username/repository:tag
// For example:
$ sudo docker tag friendlyhello gordon/get-started:part2&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;Publish the image
    &lt;blockquote&gt;
      &lt;p&gt;// Upload your tagged image to the repository:
$ sudo docker push username/repository:tag
// Pull and run the image from the remote repository
docker run -p 4000:80 username/repository:tag
$ sudo docker run -p 4000:80 gordon/get-started:part2&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;recap-and-cheat-sheetoptional&quot;&gt;Recap and cheat sheet(optional)&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; friendlyhello &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Create image using this directory's Dockerfile&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:80 friendlyhello  &lt;span class=&quot;c&quot;&gt;# Run &quot;friendlyhello&quot; mapping port 4000 to 80&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:80 friendlyhello         &lt;span class=&quot;c&quot;&gt;# Same thing, but in detached mode&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;                                &lt;span class=&quot;c&quot;&gt;# List all running containers&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# List all containers, even those not running&lt;/span&gt;
docker container stop &amp;lt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# Gracefully stop the specified container&lt;/span&gt;
docker container &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &amp;lt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# Force shutdown of the specified container&lt;/span&gt;
docker container rm &amp;lt;&lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# Remove specified container from this machine&lt;/span&gt;
docker container rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker container &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# Remove all containers&lt;/span&gt;
docker image &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt;                             &lt;span class=&quot;c&quot;&gt;# List all images on this machine&lt;/span&gt;
docker image rm &amp;lt;image id&amp;gt;            &lt;span class=&quot;c&quot;&gt;# Remove specified image from this machine&lt;/span&gt;
docker image rm &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker image &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# Remove all images from this machine&lt;/span&gt;
docker login             &lt;span class=&quot;c&quot;&gt;# Log in this CLI session using your Docker credentials&lt;/span&gt;
docker tag &amp;lt;image&amp;gt; username/repository:tag  &lt;span class=&quot;c&quot;&gt;# Tag &amp;lt;image&amp;gt; for upload to registry&lt;/span&gt;
docker run username/repository:tag                   &lt;span class=&quot;c&quot;&gt;# Run image from a registry&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;Docker — 从入门到实践&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>zrg</name></author><category term="Docker" /><summary type="html">Docker简介 什么是 Docker？ Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！ 无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。 为什么要使用 Docker？ 更高效的利用系统资源 更快速的启动时间 一致的运行环境 持续交付和部署 更轻松的迁移 更轻松的维护和扩展 对比传统虚拟机总结</summary></entry><entry><title type="html">使用 Shadowsocks + SwitchyOmega 科学上网</title><link href="http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn/" rel="alternate" type="text/html" title="使用 Shadowsocks + SwitchyOmega 科学上网" /><published>2019-06-23T00:00:00+08:00</published><updated>2019-06-23T00:00:00+08:00</updated><id>http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn</id><content type="html" xml:base="http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn/">&lt;p&gt;
本文内容仅作交流学习和查阅技术资料之用，请勿用于商业用途！如造成任何后果，本文作者概不负责。谢谢您的关注！
&lt;/p&gt;

&lt;div class=&quot;org-center&quot;&gt;
&lt;p&gt;
如果您有任何问题或建议，可以发送邮件到 zrg1390556487@gmail.com
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgf1f036e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf1f036e&quot;&gt;服务端&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgf1f036e&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org913bfed&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org913bfed&quot;&gt;服务部署第一步&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org913bfed&quot;&gt;
&lt;p&gt;
首先，购买一台境外云服务器
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;搬瓦工&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org32d2614&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org32d2614&quot;&gt;安装和配置 Shadowsocks&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org32d2614&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装 pip
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
// CentOS
# yum install python-pip
&lt;/pre&gt;

&lt;p&gt;
或者:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;
# python get-pip.py
&lt;/pre&gt;

&lt;p&gt;
更新:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# pip install --upgrade pip
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
安装及配置 shadowsocks
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
// 使用 pip 安装 shadowsocks
# pip install shadowsocks
&lt;/pre&gt;


&lt;p&gt;
&lt;b&gt;自动安装脚本&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ vim install-shadowsocks.sh, content of file from 
&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/zhaorengui/article/blob/master/network/install-shadowsocks.sh&quot;&gt;install-shadowsocks.sh&lt;/a&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# chmod +x install-shadowsocks.sh
# ./install-shadowsocks.sh
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
// 配置 shadowsocks
# vim /etc/shadowsocks.json
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;{
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;server&quot;&lt;/span&gt;: &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;123.123.123.123&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;server_port&quot;&lt;/span&gt;: 8388,
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;local_address&quot;&lt;/span&gt;:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:1080,
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;port_password&quot;&lt;/span&gt;:{
          &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;9001&quot;&lt;/span&gt;:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password9001&quot;&lt;/span&gt;,
          &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;9002&quot;&lt;/span&gt;:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password9002&quot;&lt;/span&gt;,
          &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;9003&quot;&lt;/span&gt;:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password9003&quot;&lt;/span&gt;,
     },
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password&quot;&lt;/span&gt;: &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;method&quot;&lt;/span&gt;: &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:600
  }
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
解释: 
&lt;/p&gt;
&lt;dl class=&quot;org-dl&quot;&gt;
&lt;dt&gt;&quot;server&quot;: &quot;123.123.123.123&quot;&lt;/dt&gt;&lt;dd&gt;服务器 IP 地址&lt;/dd&gt;
&lt;dt&gt;&quot;server_port&quot;: 8388&lt;/dt&gt;&lt;dd&gt;服务器端口号&lt;/dd&gt;
&lt;dt&gt;&quot;local_address&quot;:&quot;127.0.0.1&quot;&lt;/dt&gt;&lt;dd&gt;本地回环地址&lt;/dd&gt;
&lt;dt&gt;&quot;local_port&quot;:1080,&lt;/dt&gt;&lt;dd&gt;本地端口号&lt;/dd&gt;
&lt;dt&gt;&quot;port_password&quot;&lt;/dt&gt;&lt;dd&gt;映射端口和密码&lt;/dd&gt;
&lt;dt&gt;&quot;password&quot;: &quot;password&quot;&lt;/dt&gt;&lt;dd&gt;密码&lt;/dd&gt;
&lt;dt&gt;&quot;method&quot;: &quot;aes-256-cfb&quot;&lt;/dt&gt;&lt;dd&gt;加密方式，详细可参考 &lt;a href=&quot;http://ucdok.com/project/generate_password.html&quot;&gt;password tool&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;&quot;timeout&quot;:600&lt;/dt&gt;&lt;dd&gt;超时时间&lt;/dd&gt;
&lt;/dl&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
配置自启动脚本
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# vim /etc/systemd/system/shadowsocks.service
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;[Unit]
&lt;span style=&quot;color: #a0522d;&quot;&gt;Description&lt;/span&gt;=Shadowsocks

[Service]
&lt;span style=&quot;color: #a0522d;&quot;&gt;TimeoutStartSec&lt;/span&gt;=0
&lt;span style=&quot;color: #a0522d;&quot;&gt;ExecStart&lt;/span&gt;=/usr/bin/ssserver -c /etc/shadowsocks.json

[Install]
&lt;span style=&quot;color: #a0522d;&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
设置 shadowsocks 自启动
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# systemctl enable shadowsocks
# systemctl start shadowsocks
# systemctl status shadowsocks -l
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org13d8788&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org13d8788&quot;&gt;客户端&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org13d8788&quot;&gt;
&lt;p&gt;
目前支持以下客户端进行连接：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Mac OS X&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;IOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb1026b0&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb1026b0&quot;&gt;Linux&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgb1026b0&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga469c39&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orga469c39&quot;&gt;安装、配置和使用 Linux Shadowsocks 客户端&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orga469c39&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
Linux 系列
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Debian/Ubuntu:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo apt-get install python-pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Fedora/Centos:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo yum install python-setuptools
&lt;/pre&gt;

&lt;p&gt;
or
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo dnf install python-setuptools
$ sudo easy_install pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
OpenSUSE:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo zypper install python-pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Archlinux:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo pacman -S python-pip
sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
sslocal 是客户端软件，ssserver 是服务端软件，常见于 Linux 发行版，如 Ubuntu。sslocal 在 &lt;i&gt;usr/local/bin 目录下，也有其他发行版在 /usr/bin&lt;/i&gt; 目录下，可以使用 whereis 命令找到它的位置。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ whereis sslocal
&lt;/pre&gt;

&lt;p&gt;
sslocal: /usr/local/bin/sslocal
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
/etc/shadowsocks.json
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;{
&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;server-ip&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;server_port&quot;&lt;/span&gt;:8000,
&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;local_address&quot;&lt;/span&gt;: &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:1080,
&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;password&quot;&lt;/span&gt;:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;your-password&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:600,
&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
// 启动
$ sudo sslocal -c /etc/shadowsocks.json
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
// 后台运行
$ sudo sslocal -c /etc/shadowsocks.json -d start
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
/etc/rc.local
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo vim /etc/rc.local
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;sudo sslocal -c /etc/shadowsocks.json -d start
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
// 检查是否正常工作
# sudo systemctl status rc-local.service
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgffd06a9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgffd06a9&quot;&gt;开启全局代理&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orgffd06a9&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装及配置 polipo
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo apt install polipo
$ sudo vim /etc/polipo/config
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot; id=&quot;orged33c5c&quot;&gt;logSyslog = true
logFile = /var/log/polipo/polipo.log
proxyAddress = &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;
socksParentProxy = &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;127.0.0.1:1080&quot;&lt;/span&gt;
socksProxyType = socks5
chunkHighMark = 50331648
objectHighMark = 16384
serverMaxSlots = 64
serverSlots = 16
serverSlots1 = 32
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
重启 polipo
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo systemctl restart polipo
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
设置全局变量 http_proxy and https_proxy
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ export http_proxy=&quot;http://127.0.0.1:8123/&quot;
$ export https_proxy=&quot;https://127.0.0.1:8123/&quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
测试
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ curl www.google.com
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd9b524f&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd9b524f&quot;&gt;问题解决&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orgd9b524f&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
ShadowSocks start error: undefined symbol EVP_CIPHER_CTX_cleanup
[原因分析]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
openssl 1.1.0 &quot;EVP_CIPHER_CTX_cleanup&quot; is old.
&lt;/pre&gt;

&lt;p&gt;
[解决办法]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ vim /usr/local/lib/python3.5/dist-packages/shadowsocks/crypto/openssl.py
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot; id=&quot;orgaa0b293&quot;&gt;VIM Command&amp;#65306;
:%s/cleanup/reset/
:x
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
not support &quot;chacha20&quot;
[解决办法]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ apt install m2crypto gcc -y
$ wget -N --no-check-certificate https://download.libsodium.org/libsodium/releases/libsodium-1.0.8.tar.gz
$ tar zxvf libsodium-1.0.8.tar.gz
$ cd libsodium-1.0.8
$ sudo ./configure
$ sudo make &amp;amp;&amp;amp; make install
$ sudo echo &quot;include ld.so.conf.d/*.conf&quot; &amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/usr/lib64&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/usr/local/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo ldconfig
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org56deb45&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org56deb45&quot;&gt;Windows&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org56deb45&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8ec7fd6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8ec7fd6&quot;&gt;下载&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org8ec7fd6&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Windows Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org63bce0c&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org63bce0c&quot;&gt;配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org63bce0c&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;解压
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111438.png&quot; alt=&quot;shadowsocks-20170123111438.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;运行
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111902.png&quot; alt=&quot;shadowsocks-20170123111902.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;配置
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111953.png&quot; alt=&quot;shadowsocks-20170123111953.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;设置代理
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123112126.png&quot; alt=&quot;shadowsocks-20170123112126.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9c4c187&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9c4c187&quot;&gt;Android&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org9c4c187&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb35f1d2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgb35f1d2&quot;&gt;下载&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orgb35f1d2&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Android Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga08b5d9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orga08b5d9&quot;&gt;配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orga08b5d9&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123141118.png&quot; alt=&quot;shadowsocks-20170123141118.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf0c354a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf0c354a&quot;&gt;IOS&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgf0c354a&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;打开 Apple 应用市场, 搜索 &quot;shadowrocket&quot;。我记得不错的话，标价应该是：￥12&lt;/li&gt;
&lt;li&gt;配置
&lt;img src=&quot;http://localhost:4000/assets/images/ios-shadowrocket-01.jpeg&quot; alt=&quot;ios-shadowrocket-01.jpeg&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/ios-shadowrocket-02.jpeg&quot; alt=&quot;ios-shadowrocket-02.jpeg&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5f09ee3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5f09ee3&quot;&gt;Mac OS X&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org5f09ee3&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb46938a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgb46938a&quot;&gt;浏览器插件：SwitchyOmega&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgb46938a&quot;&gt;
&lt;p&gt;
该插件用于调节代理，方便快速切换代理上网模式。根据目前使用经验，Linux 必装，Windows 可选。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgccec4af&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgccec4af&quot;&gt;下载&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgccec4af&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2a9768e&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2a9768e&quot;&gt;配置&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org2a9768e&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;设置代理
&lt;img src=&quot;http://localhost:4000/assets/images/switchyomega-01.png&quot; alt=&quot;switchyomega-01.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
设定规则
&lt;img src=&quot;http://localhost:4000/assets/images/switchyomega-02.png&quot; alt=&quot;switchyomega-02.png&quot; /&gt;
&lt;b&gt;可选规则&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
rule:http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt
&lt;/pre&gt;

&lt;p&gt;
or
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge224820&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orge224820&quot;&gt;参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orge224820&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/Shadowsocks&quot;&gt;https://zh.wikipedia.org/zh-hans/Shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://shadowsocks.com&quot;&gt;https://shadowsocks.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shadowsocks.org/&quot;&gt;http://shadowsocks.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html&quot;&gt;在 CentOS 7 下安装配置 shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client&quot;&gt;Install And Use Shadowsocks Command Line Client on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doub.io/ss-jc10/&quot;&gt;ShadowsocksR 客户端 小白使用教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kionf.com/2016/12/15/errornote-ss/&quot;&gt;ShadowSocks启动报错undefined symbol EVP_CIPHER_CTX_cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList&quot;&gt;SwitchyOmega&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doub.io/ss-jc25/&quot;&gt;IOS系统推荐几款支持Shadowsocks的代理软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jeyzhang.com/how-to-install-and-setup-shadowsocks-client-in-different-os.html&quot;&gt;各种系统下Shadowsocks客户端的安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/41378f4e14bc&quot;&gt;linux 配置shadowsocks代理全局代理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/guizaijianchic/article/details/78422811&quot;&gt;linux ubuntu下使用ss设置全局代理,命令行也走代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Shadowsocks" /><category term="SwitchyOmega" /><summary type="html">本文内容仅作交流学习和查阅技术资料之用，请勿用于商业用途！如造成任何后果，本文作者概不负责。谢谢您的关注！ 如果您有任何问题或建议，可以发送邮件到 zrg1390556487@gmail.com 服务端 服务部署第一步 首先，购买一台境外云服务器 搬瓦工 DigitalOcean AWS 安装和配置 Shadowsocks 安装 pip // CentOS # yum install python-pip 或者: # curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot; # python get-pip.py 更新: # pip install --upgrade pip 安装及配置 shadowsocks // 使用 pip 安装 shadowsocks # pip install shadowsocks 自动安装脚本 $ vim install-shadowsocks.sh, content of file from install-shadowsocks.sh # chmod +x install-shadowsocks.sh # ./install-shadowsocks.sh // 配置 shadowsocks # vim /etc/shadowsocks.json { &quot;server&quot;: &quot;123.123.123.123&quot;, &quot;server_port&quot;: 8388, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:{ &quot;9001&quot;:&quot;password9001&quot;, &quot;9002&quot;:&quot;password9002&quot;, &quot;9003&quot;:&quot;password9003&quot;, }, &quot;password&quot;: &quot;password&quot;, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;timeout&quot;:600 } 解释: &quot;server&quot;: &quot;123.123.123.123&quot;服务器 IP 地址 &quot;server_port&quot;: 8388服务器端口号 &quot;local_address&quot;:&quot;127.0.0.1&quot;本地回环地址 &quot;local_port&quot;:1080,本地端口号 &quot;port_password&quot;映射端口和密码 &quot;password&quot;: &quot;password&quot;密码 &quot;method&quot;: &quot;aes-256-cfb&quot;加密方式，详细可参考 password tool &quot;timeout&quot;:600超时时间 配置自启动脚本 # vim /etc/systemd/system/shadowsocks.service [Unit] Description=Shadowsocks [Service] TimeoutStartSec=0 ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json [Install] WantedBy=multi-user.target 设置 shadowsocks 自启动 # systemctl enable shadowsocks # systemctl start shadowsocks # systemctl status shadowsocks -l 客户端 目前支持以下客户端进行连接： Linux Windows Mac OS X Android IOS Linux 安装、配置和使用 Linux Shadowsocks 客户端 Linux 系列 Debian/Ubuntu: $ sudo apt-get install python-pip $ sudo pip install shadowsocks Fedora/Centos: $ sudo yum install python-setuptools or $ sudo dnf install python-setuptools $ sudo easy_install pip $ sudo pip install shadowsocks OpenSUSE: $ sudo zypper install python-pip $ sudo pip install shadowsocks Archlinux: $ sudo pacman -S python-pip sudo pip install shadowsocks sslocal 是客户端软件，ssserver 是服务端软件，常见于 Linux 发行版，如 Ubuntu。sslocal 在 usr/local/bin 目录下，也有其他发行版在 /usr/bin 目录下，可以使用 whereis 命令找到它的位置。 $ whereis sslocal sslocal: /usr/local/bin/sslocal /etc/shadowsocks.json { &quot;server&quot;:&quot;server-ip&quot;, &quot;server_port&quot;:8000, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;your-password&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot; } // 启动 $ sudo sslocal -c /etc/shadowsocks.json // 后台运行 $ sudo sslocal -c /etc/shadowsocks.json -d start /etc/rc.local $ sudo vim /etc/rc.local sudo sslocal -c /etc/shadowsocks.json -d start // 检查是否正常工作 # sudo systemctl status rc-local.service 开启全局代理 安装及配置 polipo $ sudo apt install polipo $ sudo vim /etc/polipo/config logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &quot;0.0.0.0&quot; socksParentProxy = &quot;127.0.0.1:1080&quot; socksProxyType = socks5 chunkHighMark = 50331648 objectHighMark = 16384 serverMaxSlots = 64 serverSlots = 16 serverSlots1 = 32 重启 polipo $ sudo systemctl restart polipo 设置全局变量 http_proxy and https_proxy $ export http_proxy=&quot;http://127.0.0.1:8123/&quot; $ export https_proxy=&quot;https://127.0.0.1:8123/&quot; 测试 $ curl www.google.com 问题解决 ShadowSocks start error: undefined symbol EVP_CIPHER_CTX_cleanup [原因分析] openssl 1.1.0 &quot;EVP_CIPHER_CTX_cleanup&quot; is old. [解决办法] $ vim /usr/local/lib/python3.5/dist-packages/shadowsocks/crypto/openssl.py VIM Command&amp;#65306; :%s/cleanup/reset/ :x not support &quot;chacha20&quot; [解决办法] $ apt install m2crypto gcc -y $ wget -N --no-check-certificate https://download.libsodium.org/libsodium/releases/libsodium-1.0.8.tar.gz $ tar zxvf libsodium-1.0.8.tar.gz $ cd libsodium-1.0.8 $ sudo ./configure $ sudo make &amp;amp;&amp;amp; make install $ sudo echo &quot;include ld.so.conf.d/*.conf&quot; &amp;gt; /etc/ld.so.conf $ sudo echo &quot;/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo echo &quot;/usr/lib64&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo echo &quot;/usr/local/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo ldconfig Windows 下载 发送邮件至 zrg1390556487@gmail.com，索取 Windows Shadowsocks 客户端。 配置 解压 运行 配置 设置代理 Android 下载 发送邮件至 zrg1390556487@gmail.com，索取 Android Shadowsocks 客户端。 配置 IOS 打开 Apple 应用市场, 搜索 &quot;shadowrocket&quot;。我记得不错的话，标价应该是：￥12 配置 Mac OS X 发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。 浏览器插件：SwitchyOmega 该插件用于调节代理，方便快速切换代理上网模式。根据目前使用经验，Linux 必装，Windows 可选。 下载 发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。 配置 设置代理 设定规则 可选规则 rule:http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt or https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 参考资料 https://zh.wikipedia.org/zh-hans/Shadowsocks https://shadowsocks.com http://shadowsocks.org/ 在 CentOS 7 下安装配置 shadowsocks Install And Use Shadowsocks Command Line Client on Linux ShadowsocksR 客户端 小白使用教程 ShadowSocks启动报错undefined symbol EVP_CIPHER_CTX_cleanup SwitchyOmega IOS系统推荐几款支持Shadowsocks的代理软件 各种系统下Shadowsocks客户端的安装与配置 linux 配置shadowsocks代理全局代理 linux ubuntu下使用ss设置全局代理,命令行也走代理</summary></entry><entry><title type="html">JavaScript Functions</title><link href="http://localhost:4000/php/2019/06/19/js-functions/" rel="alternate" type="text/html" title="JavaScript Functions" /><published>2019-06-19T00:00:00+08:00</published><updated>2019-06-19T00:00:00+08:00</updated><id>http://localhost:4000/php/2019/06/19/js-functions</id><content type="html" xml:base="http://localhost:4000/php/2019/06/19/js-functions/">&lt;h2 id=&quot;数字取整问题&quot;&gt;数字取整问题&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;直接取整(不考虑小数点后的部分)
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 方式一: parseInt()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3.14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-3.14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//-3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//2019&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//NaN&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0xA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//10(十六进制)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;070&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//56(八进制)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 方式二: 位运算&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~~&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 方式三: &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;计算后取整(四舍五入,向上取整,向下取整)
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 四舍五入&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;8.54&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//9&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 向上取整&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 向下取整&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;数组对象遍历操作&quot;&gt;数组对象遍历操作&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;使用 Object.keys(obj) 遍历
```javascript
var obj = {‘0’:’a’,’1’:’b’,’2’:’c’};
Object.keys(obj).forEach(function(key){
 console.log(key,obj[key]);
});
// 注意： forEach不支持以下2种方式跳出循环，
// 1) break; 执行报错: Uncaught SyntaxError: Illegal break statement
// 2) return false; 只能跳出当前遍历执行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;// 缺失需要跳出循环，使用 try…catch…
var obj = {‘0’:’a’,’1’:’b’,’2’:’c’};
try {
Object.keys(obj).forEach(function(key){
	if(key == ‘a’){
		console.log(key,obj[key]);
		throw new Error(‘exist’);
	}
});
} catch (ex) {
  if(ex.message==’exist’) throw ex
} finally {
  console.log(‘done’)
}&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2. for-in.	
```javascript
var obj = {'0':'a','1':'b','2':'c'};
for(var i in obj) {
	console.log(i,&quot;:&quot;,obj[i]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ol&gt;
  &lt;li&gt;for-of
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 支持数组遍历、大多数类数组对象、字符串（视为一系列的Unicode字符来进行遍历）&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;张三&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;李四&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;王五&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;赵六&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用Object.getOwnPropertyNames(obj) 遍历
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getOwnPropertyNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;使用Reflect.ownKeys(obj) 遍历
    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'b'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;Reflect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ownKeys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
 &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>zrg</name></author><category term="PHP" /><summary type="html">数字取整问题 直接取整(不考虑小数点后的部分) // 方式一: parseInt() var n = parseInt(&quot;3.14&quot;); //3 var n = parseInt(&quot;-3.14&quot;); //-3 var n = parseInt(&quot;2019hello&quot;); //2019 var n = parseInt(&quot;&quot;); //NaN var n = parseInt(&quot;0xA&quot;); //10(十六进制) var n = parseInt(&quot;070&quot;); //56(八进制) // 方式二: 位运算 var n = ~~3.14 //3 var n = 3.14^0 //3 var n = 3.14&amp;lt;&amp;lt;0 //3 // 方式三: 计算后取整(四舍五入,向上取整,向下取整) // 四舍五入 var n = Math.round(3.14); //3 var n = Math.ceil(8.54); //9 // 向上取整 var n = Math.ceil(3.14); //4 // 向下取整 var n = Math.ceil(3.14); //3</summary></entry><entry><title type="html">Thinking In Java</title><link href="http://localhost:4000/2019/06/18/thinking-in-java/" rel="alternate" type="text/html" title="Thinking In Java" /><published>2019-06-18T00:00:00+08:00</published><updated>2019-06-18T00:00:00+08:00</updated><id>http://localhost:4000/2019/06/18/thinking-in-java</id><content type="html" xml:base="http://localhost:4000/2019/06/18/thinking-in-java/"></content><author><name>Zhao Rengui</name></author><summary type="html"></summary></entry><entry><title type="html">Learning Markdown</title><link href="http://localhost:4000/software/2019/06/05/markdown/" rel="alternate" type="text/html" title="Learning Markdown" /><published>2019-06-05T00:00:00+08:00</published><updated>2019-06-05T00:00:00+08:00</updated><id>http://localhost:4000/software/2019/06/05/markdown</id><content type="html" xml:base="http://localhost:4000/software/2019/06/05/markdown/">&lt;h2 id=&quot;标题&quot;&gt;标题&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#,一级标题 
##,二级标题
###,三级标题 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;列表&quot;&gt;列表&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 有序列表 
2. 有序列表 
3. 无序列表
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;引用&quot;&gt;引用&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 有的人活着，他已经死了；有的人死了，他还活着
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;有的人活着，他已经死了；有的人死了，他还活着&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;图片&quot;&gt;图片&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot; alt=&quot;Google Logo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;链接&quot;&gt;链接&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Google](https://www.google.com/)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;分割线&quot;&gt;分割线&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;***
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;粗体斜体&quot;&gt;粗体/斜体&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**作者**
*张三*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;
&lt;em&gt;张三&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```sh
#/bin/sh
echo &quot;hello world&quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;区块标识&quot;&gt;区块标识&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这是一个区块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;表格&quot;&gt;表格&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;姓名&lt;/th&gt;
      &lt;th&gt;性别&lt;/th&gt;
      &lt;th&gt;毕业学校&lt;/th&gt;
      &lt;th&gt;工资&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;张三&lt;/td&gt;
      &lt;td&gt;男&lt;/td&gt;
      &lt;td&gt;重庆交通大学&lt;/td&gt;
      &lt;td&gt;3200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;李四&lt;/td&gt;
      &lt;td&gt;男&lt;/td&gt;
      &lt;td&gt;贵州大学&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;王五&lt;/td&gt;
      &lt;td&gt;女&lt;/td&gt;
      &lt;td&gt;北京大学&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:---&lt;/td&gt;
      &lt;td&gt;左对齐&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;---:&lt;/td&gt;
      &lt;td&gt;右对齐&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;---&lt;/td&gt;
      &lt;td&gt;居中&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;使用-sequence-画时序图&quot;&gt;使用 sequence 画时序图&lt;/h2&gt;
&lt;p&gt;注意: GitHub 暂不支持，或者说作者没有找到可用的第三方组件提供支持，所以在这你是看不到效果啦！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sequence&quot;&gt;title: 时序图例子
A-&amp;gt;B: 实线实箭头 
B--&amp;gt;C: 虚线实箭头 
C-&amp;gt;&amp;gt;C: 实线虚箭头 
note right of C: 自通知 
note over B,C:横跨通知 
C-&amp;gt;A:长通知 
note left of A:左通知
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;使用-flow-画流程图&quot;&gt;使用 flow 画流程图&lt;/h2&gt;
&lt;p&gt;注意: GitHub 暂不支持，或者说作者没有找到可用的第三方组件提供支持，所以在这你是看不到效果啦！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;start=&amp;gt;start: 开始
isLogin=&amp;gt;condition: 是否登录
login=&amp;gt;operation: 登录
check=&amp;gt;subroutine: 校验用户信息
view=&amp;gt;operation: 浏览
end=&amp;gt;end: 结束
start-&amp;gt;isLogin
isLogin(no)-&amp;gt;login(right)-&amp;gt;check-&amp;gt;view
isLogin(yes)-&amp;gt;view
view-&amp;gt;end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mermaid&quot;&gt;mermaid&lt;/h2&gt;
&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中。
Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码&lt;/p&gt;
&lt;h3 id=&quot;图表方向&quot;&gt;图表方向&lt;/h3&gt;

&lt;p&gt;| name | description |
|——|————-|
| TB   | 从上到下    |
| BT   | 从下到上    |
| RL   | 从右到左    |
| LR   | 从左到右    |&lt;/p&gt;
&lt;h3 id=&quot;节点定义&quot;&gt;节点定义&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;id[文字]&lt;/td&gt;
      &lt;td&gt;矩形节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id(文字)&lt;/td&gt;
      &lt;td&gt;圆角矩形节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id((文字))&lt;/td&gt;
      &lt;td&gt;圆形节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id&amp;gt;文字]&lt;/td&gt;
      &lt;td&gt;右向旗帜状节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id{文字}&lt;/td&gt;
      &lt;td&gt;菱形节点&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;节点之间的连接线&quot;&gt;节点之间的连接线&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;添加尾部箭头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;不添加尾部箭头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–&lt;/td&gt;
      &lt;td&gt;单线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–text–&lt;/td&gt;
      &lt;td&gt;单线上加文字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;==&lt;/td&gt;
      &lt;td&gt;粗线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;==text==&lt;/td&gt;
      &lt;td&gt;粗线加文字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-.-&lt;/td&gt;
      &lt;td&gt;虚线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-.text.-&lt;/td&gt;
      &lt;td&gt;虚线加文字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;无箭头的实线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–&amp;gt;&lt;/td&gt;
      &lt;td&gt;无箭头的虚线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&amp;gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;有箭头的实线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–&amp;gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;有箭头的虚线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-x&lt;/td&gt;
      &lt;td&gt;末端为叉的实线（表示异步）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–x&lt;/td&gt;
      &lt;td&gt;末端为叉的虚线（表示异步）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;mermaid-流程图&quot;&gt;mermaid: 流程图&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;graph TB
A&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;开始&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; B[Round edge]
B &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; C&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Decision&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
C &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;|Y| D[Result one]
C &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;|N| E[Result two]
E &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;F
subgraph 子图表名称
F &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; This is the text &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; H
H &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; I&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;H-I&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
I &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; J&amp;gt;I-J]
end
H &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Z&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;结束&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
D &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TB;
A(开始) --&amp;gt;B[Round edge]
B --&amp;gt; C{Decision}
C --&amp;gt;|Y| D[Result one]
C --&amp;gt;|N| E[Result two]
E --&amp;gt;F
subgraph 子图表名称
	F --&amp;gt; H
	H --&amp;gt; I((H-I))
	I --&amp;gt; J&amp;gt;I-J]
end
H --&amp;gt; Z(结束)
D --&amp;gt; Z
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mermaid-序列图&quot;&gt;mermaid: 序列图&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sequenceDiagram
    participant Alice
    participant Bob
    Alice-&amp;gt;John: Hello John, how are you?
    loop Healthcheck
        John-&amp;gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail...
    John--&amp;gt;Alice: Great!
    John-&amp;gt;Bob: How about you?
    Bob--&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    participant Alice
    participant Bob
    Alice-&amp;gt;John: Hello John, how are you?
    loop Healthcheck
        John-&amp;gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail...
    John--&amp;gt;Alice: Great!
    John-&amp;gt;Bob: How about you?
    Bob--&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;mermaid-甘特图&quot;&gt;mermaid: 甘特图&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gantt
        dateFormat  YYYY-MM-DD
        title Adding GANTT diagram functionality to mermaid
        section A section
        Completed task            :done,    des1, 2014-01-06,2014-01-08
        Active task               :active,  des2, 2014-01-09, 3d
        Future task               :         des3, after des2, 5d
        Future task2               :         des4, after des3, 5d
        section Critical tasks
        Completed task in the critical line :crit, done, 2014-01-06,24h
        Implement parser and jison          :crit, done, after des1, 2d
        Create tests for parser             :crit, active, 3d
        Future task in critical line        :crit, 5d
        Create tests for renderer           :2d
        Add to mermaid                      :1d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;gantt
	dateFormat  YYYY-MM-DD
	title Adding GANTT diagram functionality to mermaid
	section A section
	Completed task            :done,    des1, 2014-01-06,2014-01-08
	Active task               :active,  des2, 2014-01-09, 3d
	Future task               :         des3, after des2, 5d
	Future task2               :         des4, after des3, 5d
	section Critical tasks
	Completed task in the critical line :crit, done, 2014-01-06,24h
	Implement parser and jison          :crit, done, after des1, 2d
	Create tests for parser             :crit, active, 3d
	Future task in critical line        :crit, 5d
	Create tests for renderer           :2d
	Add to mermaid                      :1d
&lt;/code&gt;&lt;/pre&gt;</content><author><name>zrg</name></author><category term="Markdown" /><summary type="html">标题 #,一级标题 ##,二级标题 ###,三级标题 列表 1. 有序列表 2. 有序列表 3. 无序列表</summary></entry><entry><title type="html">数据结构与算法</title><link href="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/" rel="alternate" type="text/html" title="数据结构与算法" /><published>2019-02-13T00:00:00+08:00</published><updated>2019-02-13T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/">&lt;div id=&quot;outline-container-orgfb1089b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfb1089b&quot;&gt;数据结构和算法目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfb1089b&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
首先明确一点：程序=数据结构+算法
&lt;/pre&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; 数据结构和算法表&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;线性结构&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;树&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;堆&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;图&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;排序算法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;数组、单链表和双链表&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉查找树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;图的理论基础&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;冒泡排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Linux内核中双向链表的经典实现&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;AVL树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;左倾堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;无向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;快速排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;栈&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;伸展树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斜堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;有向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;插入排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;队列&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;红黑树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二项堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;深度优先搜索和广度优先搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;希尔排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;哈夫曼树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斐波那契堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;拓扑排序&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;选择排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Kruskal算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;堆排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Prim算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;归并排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Dijkstra算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;桶排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;基数排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7f683b0&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7f683b0&quot;&gt;线性结构&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org7f683b0&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
常用的线性结构有：线性表，栈，队列，循环队列，数组。
&lt;/pre&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;线性表：是一种线性结构，它是具有相同类型的n(n≥0)个数据元素组成的有限序列。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;顺序表：是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。&lt;/li&gt;
&lt;li&gt;链表（Linked list）
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表：它由节点组成，每个节点都包含下一个节点的指针。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表分为：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;动态单链表&lt;/li&gt;
&lt;li&gt;静态单链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
单链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-01.jpg&quot; alt=&quot;linked-list-01.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点是&quot;节点10&quot;，&quot;节点10&quot;的后继节点是&quot;节点20&quot;。
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-02.jpg&quot; alt=&quot;linked-list-02.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-03.jpg&quot; alt=&quot;linked-list-03.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;单链表的特点是：节点的链接方向是单向的；相对于数组来说，单链表的的随机访问速度较慢，但是单链表删除/添加数据的效率很高。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双链表：它也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
双链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-04.jpg&quot; alt=&quot;linked-list-04.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点为&quot;节点10&quot;(数据为10的节点)；&quot;节点10&quot;的后继节点是&quot;节点20&quot;(数据为10的节点)，&quot;节点20&quot;的前继节点是&quot;节点10&quot;；&quot;节点20&quot;的后继节点是&quot;节点30&quot;，&quot;节点30&quot;的前继节点是&quot;节点20&quot;；...；末尾节点的后继节点是表头。
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-05.jpg&quot; alt=&quot;linked-list-05.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-06.jpg&quot; alt=&quot;linked-list-06.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;代码实现
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Java
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;org3dd71ac&quot;&gt;&lt;span style=&quot;color: #8b2252;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt; * Java &amp;#23454;&amp;#29616;&amp;#30340;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#12290; &lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt; * &amp;#27880;&amp;#65306;java&amp;#33258;&amp;#24102;&amp;#30340;&amp;#38598;&amp;#21512;&amp;#21253;&amp;#20013;&amp;#26377;&amp;#23454;&amp;#29616;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#65292;&amp;#36335;&amp;#24452;&amp;#26159;:java.util.LinkedList&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;DoubleLink&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;T&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;循环链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单循环链表&lt;/li&gt;
&lt;li&gt;双循环链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;栈（stack）：是计算机科学中一种特殊的串列形式的抽象数据类型，按照后进先出（LIFO, Last In First Out）的原理运作。其特殊之处在于只能允许在链表或数组的一端（称为堆栈顶端指针，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。&lt;/li&gt;
&lt;li&gt;队列：又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。&lt;/li&gt;
&lt;li&gt;数组：在计算机科学中，数组数据结构（英语：array data structure），简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块连续的内存来存储。
&lt;img src=&quot;http://localhost:4000/assets/images/array-data-structure-01.jpg&quot; alt=&quot;array-data-structure-01.jpg&quot; /&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;数组的特点是：数据的元素在上下界内是连续的；随机访问速度快。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org01c6718&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org01c6718&quot;&gt;树&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org01c6718&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org380a7b4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org380a7b4&quot;&gt;二叉树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb6ebed2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb6ebed2&quot;&gt;AVL 树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org017d4ba&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org017d4ba&quot;&gt;伸展树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org151ae43&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org151ae43&quot;&gt;红黑树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9e201a7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9e201a7&quot;&gt;哈夫曼树&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc2d81fb&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc2d81fb&quot;&gt;堆&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org55cfb1b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org55cfb1b&quot;&gt;图&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7b880ad&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7b880ad&quot;&gt;排序算法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org7b880ad&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orged4c6bf&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orged4c6bf&quot;&gt;冒泡排序(BubbleSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orged4c6bf&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org14f48f1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org14f48f1&quot;&gt;介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org14f48f1&quot;&gt;
&lt;p&gt;
&lt;b&gt;en&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Bubblesort is a popular,but inefficient,sorting algorithm. It works by repeatedly swapping adjacent elements that are out of order.
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序是一种较简单的排序算法。它会遍历若干次要排序的数列，每次遍历时，它都会从前往后依次的比较相邻两个数的大小；如果前者比后者大，
则交换它们的位置。这样，一次遍历之后，最大的元素就在数列的末尾！ 采用相同的方法再次遍历时，第二大的元素就被排列在最大元素之前。重复
此操作，直到整个数列都有序为止！
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org66085c9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org66085c9&quot;&gt;伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org66085c9&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;pseudo code&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for i = 1 to A.length - 1
    for j = A:length downto i + 1
        if A[j] &amp;lt; A[j-1]   
            exchange A[j] with A[j - 1]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9182ad5&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org9182ad5&quot;&gt;时间复杂度和稳定性&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org9182ad5&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序的时间复杂度是O(N2)。
假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢？N-1次！因此，冒泡排序的时间复杂度是O(N2)。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
冒泡排序是稳定的算法，它满足稳定算法的定义。
算法稳定性 -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7c9d32d&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org7c9d32d&quot;&gt;实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org7c9d32d&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 2: &lt;/span&gt;C&lt;/label&gt;&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;;
&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;flag&lt;/span&gt;; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#26631;&amp;#35760;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (i=n-1; i&amp;gt;0; i--)
{
    flag = 0; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#26631;&amp;#35760;&amp;#20026;0&lt;/span&gt;
    &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#23558;a[0...i]&amp;#20013;&amp;#26368;&amp;#22823;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#25918;&amp;#22312;&amp;#26411;&amp;#23614;&lt;/span&gt;
    &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (j=0; j&amp;lt;i; j++)
    {
        &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (a[j] &amp;gt; a[j+1])
        {
            swap(a[j], a[j+1]);
            flag = 1;    &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#33509;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35774;&amp;#26631;&amp;#35760;&amp;#20026;1&lt;/span&gt;
        }
    }
    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (flag==0)
        &lt;span style=&quot;color: #a020f0;&quot;&gt;break&lt;/span&gt;;&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#33509;&amp;#27809;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35828;&amp;#26126;&amp;#25968;&amp;#21015;&amp;#24050;&amp;#26377;&amp;#24207;&amp;#12290;&lt;/span&gt;
} 
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;C#&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 3: &lt;/span&gt;C#&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;//Core code.
for (int i = 0&lt;span style=&quot;color: #b22222;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;i &amp;lt; arrInt.Length - 1; i++)&lt;/span&gt;
{
    for (int j = 1&lt;span style=&quot;color: #b22222;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;j &amp;lt; arrInt.Length - i; j++)&lt;/span&gt;
    {
        if (arrInt[j] &amp;lt; arrInt[j - 1])
        {
            //&amp;#20132;&amp;#25442;&amp;#20540;
            int temp = arrInt[j]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            arrInt[j] = arrInt[j - 1]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            arrInt[j - 1] = temp&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 4: &lt;/span&gt;Java&lt;/label&gt;&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;BubbleSort&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt;[] &lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;,&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;num&lt;/span&gt;) {
    &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt; = 0; i &amp;lt; arr.&lt;span style=&quot;color: #228b22;&quot;&gt;length&lt;/span&gt;; i++) {
            &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt; = num-1; j &amp;gt;i; j--) {
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; (arr[i]&amp;gt;arr[j]) {
                            &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;temp&lt;/span&gt;=arr[i];
                            arr[i]=arr[j];
                            arr[j]=temp;
                    }
            }
    }
    &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;k&lt;/span&gt;=0;k&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;num&lt;/span&gt;;k++){
            System.out.print(arr[k]+&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot; &quot;&lt;/span&gt;);
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 5: &lt;/span&gt;PHP&lt;/label&gt;&lt;pre class=&quot;src src-shell&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;BubbleSort&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;){
        &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;=0;$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;&amp;lt;count($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;);$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;++){
                &lt;span style=&quot;color: #a020f0;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;=0;$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;&amp;lt;$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;;$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;++){
                        &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;]&amp;gt;$&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;]){
                                $&lt;span style=&quot;color: #a0522d;&quot;&gt;temp&lt;/span&gt; = $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;];
                                $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;] = $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;];
                                $&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;] = $&lt;span style=&quot;color: #a0522d;&quot;&gt;temp&lt;/span&gt;;
                        }
                }
        }
        foreach($&lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt; as $&lt;span style=&quot;color: #a0522d;&quot;&gt;value&lt;/span&gt;){
                &lt;span style=&quot;color: #483d8b;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #a0522d;&quot;&gt;value&lt;/span&gt;.&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot; &quot;&lt;/span&gt;;
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb4cf07c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb4cf07c&quot;&gt;快速排序(QuickSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orgb4cf07c&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org72e31a9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org72e31a9&quot;&gt;介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org72e31a9&quot;&gt;
&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序(Quick Sort)使用分治法策略。
基本思想是：选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外
一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此
达到整个数据变成有序序列。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
快速排序流程：
(1) 从数列中挑出一个基准值。
(2) 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。
(3) 递归地把&quot;基准值前面的子数列&quot;和&quot;基准值后面的子数列&quot;进行排序。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0a840e7&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org0a840e7&quot;&gt;伪代码(pseudo code)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8289f83&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8289f83&quot;&gt;时间复杂度和稳定&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-org8289f83&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序的时间复杂度在最坏情况下是O(N2)，平均的时间复杂度是O(N*lgN)。 
这句话很好理解：假设被排序的数列中有N个数。遍历一次的时间复杂度是O(N)，需要遍历多少次呢？至少lg(N+1)次，最多N次。
(01) 为什么最少是lg(N+1)次？快速排序是采用的分治法进行遍历的，我们将它看作一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的定义，它的深度至少是lg(N+1)。因此，快速排序的遍历次数最少是lg(N+1)次。
(02) 为什么最多是N次？这个应该非常简单，还是将快速排序看作一棵二叉树，它的深度最大是N。因此，快读排序的遍历次数最多是N次。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
快速排序是不稳定的算法，它不满足稳定算法的定义。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf0c2dfa&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf0c2dfa&quot;&gt;实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orgf0c2dfa&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #8b2252;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;* arr -- &amp;#24453;&amp;#25490;&amp;#24207;&amp;#30340;&amp;#25968;&amp;#32452;&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;* left -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#24038;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;* right -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#21491;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #8b2252;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #228b22;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;quick_sort&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;arr&lt;/span&gt;[],&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;left&lt;/span&gt;,&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;right&lt;/span&gt;){
    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(left &amp;lt; right){
            &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;,&lt;span style=&quot;color: #a0522d;&quot;&gt;k&lt;/span&gt;;
            i = left;
            j = right;
            k = arr[i];
            &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j){
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j &amp;amp;&amp;amp; arr[j] &amp;gt; k){
                            j--; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#20174;&amp;#21491;&amp;#24448;&amp;#24038;&amp;#25214;&amp;#19968;&amp;#20010;&amp;#23567;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(i &amp;lt; j){
                            arr[i++] = arr[j];
                    }
                    &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i&amp;lt;j &amp;amp;&amp;amp; arr[i] &amp;lt; k){
                            i++; &lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#20174;&amp;#24038;&amp;#24448;&amp;#21491;&amp;#25214;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#22823;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
            }
            arr[i] = k;
            quick_sort(arr,left,i-1);
            quick_sort(arr,i+1,right);
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7fa6d96&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org7fa6d96&quot;&gt;插入排序(InsertSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org7fa6d96&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org57717f6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org57717f6&quot;&gt;介绍(Instoduction)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge0b3403&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge0b3403&quot;&gt;伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orge0b3403&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for j=2 to A.length
    key=A[j]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    //Insert A[j] into the sorted sequence A[1..j-1]
    i=j-1
    while i&amp;gt;0 and A[i]&amp;gt;key
         A[i+1]=A[i]
         i=i-1
    A[i+1]=key
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd20aa8d&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd20aa8d&quot;&gt;实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orgd20aa8d&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgff596f2&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgff596f2&quot;&gt;分而治之(divideand-conquer)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-orgff596f2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9eaced7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9eaced7&quot;&gt;选择排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7ee17ed&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org7ee17ed&quot;&gt;希尔排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge1fba89&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge1fba89&quot;&gt;归并排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3d92621&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3d92621&quot;&gt;基数排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc5d3782&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc5d3782&quot;&gt;堆排序&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org28e7202&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org28e7202&quot;&gt;参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org28e7202&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8&quot;&gt;线性表-维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3603935.html&quot;&gt;数据结构与算法系列 目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Data-Structure" /><category term="Algorithms" /><summary type="html">数据结构和算法目录 首先明确一点：程序=数据结构+算法</summary></entry><entry><title type="html">剑指 Offer</title><link href="http://localhost:4000/algorithms/2019/02/12/offer/" rel="alternate" type="text/html" title="剑指 Offer" /><published>2019-02-12T00:00:00+08:00</published><updated>2019-02-12T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/12/offer</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/12/offer/">&lt;div id=&quot;outline-container-org5f7c8ea&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5f7c8ea&quot;&gt;前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org5f7c8ea&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。&lt;/li&gt;
&lt;li&gt;文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。&lt;/li&gt;
&lt;li&gt;引用别人的一句话“我们不生产代码，我们是代码的搬运工”。&lt;/li&gt;
&lt;li&gt;文章内容仅供参考。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org08c02c2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org08c02c2&quot;&gt;1~10&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org08c02c2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;二维数组的查找
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C++&quot; id=&quot;org0002e4e&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orge4b3979&quot;&gt;   &amp;lt;?php

function Find($target, $array)
{
    foreach($array as $key=&amp;gt;$val){
        if(in_array($target,$val)){
            return &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
    }
    return &lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
while(fscanf(STDIN,&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;%d,%s&quot;&lt;/span&gt;,$a,$b) == 2){
    $target = $a&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    eval('$array='.$b.'&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;');&lt;/span&gt;
    try{
        echo Find($target,$array).&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }catch(Exception $e){
        die&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;orge77fbb9&quot;&gt;   &lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Solution&lt;/span&gt; {
    &lt;span style=&quot;color: #a020f0;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;target&lt;/span&gt;, &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; [][] &lt;span style=&quot;color: #a0522d;&quot;&gt;array&lt;/span&gt;) {
        &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;rows&lt;/span&gt; = array.length;
        &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;cols&lt;/span&gt; = array[0].length;
        &lt;span style=&quot;color: #228b22;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;=rows-1,&lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;=0;
        &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt;(i&amp;gt;=0 &amp;amp;&amp;amp; j&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;cols&lt;/span&gt;){
            &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(target&amp;lt;&lt;span style=&quot;color: #228b22;&quot;&gt;array&lt;/span&gt;[i][j])
                i--;
            &lt;span style=&quot;color: #a020f0;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt;(target&amp;gt;array[i][j])
                j++;
            &lt;span style=&quot;color: #a020f0;&quot;&gt;else&lt;/span&gt;
                &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;false&lt;/span&gt;;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot; id=&quot;org3b2a4de&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Solution&lt;/span&gt;:
 &lt;span style=&quot;color: #b22222;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;array &amp;#20108;&amp;#32500;&amp;#21015;&amp;#34920;&lt;/span&gt;
 &lt;span style=&quot;color: #a020f0;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #a020f0;&quot;&gt;self&lt;/span&gt;, target, array):
     &lt;span style=&quot;color: #a0522d;&quot;&gt;rows&lt;/span&gt;=&lt;span style=&quot;color: #483d8b;&quot;&gt;len&lt;/span&gt;(array)
     &lt;span style=&quot;color: #a0522d;&quot;&gt;cols&lt;/span&gt;=&lt;span style=&quot;color: #483d8b;&quot;&gt;len&lt;/span&gt;(array[0])
     &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt;=rows-1
     &lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt;=0
     &lt;span style=&quot;color: #a020f0;&quot;&gt;while&lt;/span&gt; i&amp;gt;=0 &lt;span style=&quot;color: #a020f0;&quot;&gt;and&lt;/span&gt; j&amp;lt;cols:
         &lt;span style=&quot;color: #a020f0;&quot;&gt;if&lt;/span&gt; target&amp;lt;array[i][j]:
             &lt;span style=&quot;color: #a0522d;&quot;&gt;i&lt;/span&gt; -= 1
         &lt;span style=&quot;color: #a020f0;&quot;&gt;elif&lt;/span&gt; target&amp;gt;array[i][j]:
             &lt;span style=&quot;color: #a0522d;&quot;&gt;j&lt;/span&gt; += 1
         &lt;span style=&quot;color: #a020f0;&quot;&gt;else&lt;/span&gt;:
             &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;True&lt;/span&gt;
     &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008b8b;&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orgfb85e0c&quot;&gt;   class Solution
{
    public bool Find(int target, int[][] array)
    {
        int row=0&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        int col=array[0].Length-1&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        while(row&amp;lt;=array.Length-1&amp;amp;&amp;amp;col&amp;gt;=0){
            if(target==array[row][col])
                return true&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            else if(target&amp;gt;array[row][col])
                row++&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
            else
                col--&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
        return false&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;

    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
矩阵是有序的，从左下角来看，向上数字递减，向右数字递增，因此从左下角开始查找，当要查找数字比左下角数字大时。右移要查找数字比左下角数字小时，上移。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;替换空格
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org3ade2d6&quot;&gt;   &amp;lt;?php
// &amp;#30452;&amp;#25509;&amp;#20351;&amp;#29992;&amp;#20989;&amp;#25968;
function replaceSpace($str)
{
    return str_replace(' ','%20',$str)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
// &amp;#19981;&amp;#20801;&amp;#35768;&amp;#30452;&amp;#25509;&amp;#35843;&amp;#29992;&amp;#20869;&amp;#32622;&amp;#20989;&amp;#25968;
&amp;lt;?php
function replaceSpace($str)
{
    $res = ''&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    $strLength = strlen($str)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    for($i=0&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;$i&amp;lt;$len;$i++){&lt;/span&gt;
        if($str[$i]==' '){
                $res .='%20'&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }else{
                $res .=$str[$i]&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        }
    }
    return $res&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;问题1：替换字符串，是在原来的字符串上做替换，还是新开辟一个字符串做替换！&lt;/li&gt;
&lt;li&gt;问题2：在当前字符串替换，怎么替换才更有效率（不考虑内置的replace方法）。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;从前往后替换，后面的字符要不断往后移动，要多次移动，所以效率低下&lt;/li&gt;
&lt;li&gt;从后往前，先计算需要多少空间，然后从后往前移动，则每个字符只为移动一次，这样效率更高一点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;从尾到头打印链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org8676558&quot;&gt;     &amp;lt;?php

/*class ListNode{
    var $val&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    var $next = NULL&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    function __construct($x){
        $this-&amp;gt;val = $x&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }
}*/
function printListFromTailToHead($head)
{
    $arrayList = []&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    while($head !== null){
        $arrayList[]=$head-&amp;gt;val&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
        $head=$head-&amp;gt;next&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
    }
    return array_reverse($arrayList)&lt;span style=&quot;color: #b22222;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
有三种思路，
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一就是利用栈先入后出的特性完成；&lt;/li&gt;
&lt;li&gt;第二就是存下来然后进行数组翻转；&lt;/li&gt;
&lt;li&gt;第三是利用递归。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重建二叉树
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org894998b&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org29b3a7a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org29b3a7a&quot;&gt;11~20&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org29b3a7a&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org54730dd&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org54730dd&quot;&gt;21~30&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org54730dd&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="剑指-Offer" /><summary type="html">前言 本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。 文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。 引用别人的一句话“我们不生产代码，我们是代码的搬运工”。 文章内容仅供参考。 1~10 二维数组的查找 题目描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</summary></entry><entry><title type="html">DB Tools</title><link href="http://localhost:4000/software/2019/01/28/db-tools/" rel="alternate" type="text/html" title="DB Tools" /><published>2019-01-28T00:00:00+08:00</published><updated>2019-01-28T00:00:00+08:00</updated><id>http://localhost:4000/software/2019/01/28/db-tools</id><content type="html" xml:base="http://localhost:4000/software/2019/01/28/db-tools/">&lt;h2 id=&quot;navicat&quot;&gt;Navicat&lt;/h2&gt;
&lt;h3 id=&quot;激活&quot;&gt;激活&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Windows&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Navicat Premium 12.1.16.0激活教程： https://www.jianshu.com/p/5f693b4c9468&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Linux&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;$ ls ~/.navicat64/ 
dosdevices  drive_c  Navicat  system.reg  userdef.reg  user.reg 
$ cd ~/.navicat64 
$ mv system.reg /tmp/ 
$ mv user.reg /tmp/&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;dbexportdocformysql&quot;&gt;DBExportDocForMySQL&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;准备
    &lt;blockquote&gt;
      &lt;p&gt;DBExportDocForMySQL
ODBC&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;控制面板》管理工具》ODBC 数据源，添加连接信息。注意名称尽量不要包括特殊字符。&lt;/li&gt;
  &lt;li&gt;打开Word宏功能,编辑DBExportDocForMySQL.doc连接信息&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mysql-workbench&quot;&gt;MySQL-Workbench&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;逆向生成ER模型&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;Datebase&amp;gt;Reverse Engineer&amp;gt;Next…&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;power-designer&quot;&gt;Power Designer&lt;/h2&gt;
&lt;h3 id=&quot;常用快捷键&quot;&gt;常用快捷键&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Alt+Enter &amp;gt; Properties
2. Ctrl+I &amp;gt; Insert an Object
3. Ctrl+Shift+I &amp;gt; Insert an Sub-Object
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;需求模型rqm&quot;&gt;需求模型RQM&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. “Priority” （需求优先级）
2. “Wordload” （工作量）
3. “Risk” （风险等级）
4. “Status” （状态，包括草稿、已定义、已校验、待评审和已评审五种状态）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;各类模型介绍&quot;&gt;各类模型介绍&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Requirements,需求模型
   A requirements model (RQM) helps you analyze any kind of written requirements and link them with users and groups who will implement them and with design objects in other models. 
   You can use an RQM to represent any structured document (e.g. functional specification, test plan, business goals, etc.) and import and export hierarchies of requirements as MS Word documents.
2. Conceptual Data,概念数据模型（CDM）
   A conceptual data model (CDM) helps you analyze the conceptual structure of an information system, to identify the principal entities to be represented, their attributes, and the relationships between them. A CDM is more abstract than a logical (LDM) or physical (PDM) data model.
   帮助您分析信息系统的概念结构,确定主要实体的代表,它们的属性和它们之间的关系。清洁发展机制是更抽象的逻辑(LDM)或物理数据模型(PDM)。
3. Logical Data,逻辑数据模型（LDM）
   A logical data model (LDM) helps you analyze the structure of an information system, independent of any specific physical database implementation. An LDM has migrated entity identifiers and is less abstract than a conceptual data model (CDM), but does not allow you to model views, indexes and other elements that are available in the more concrete physical data model (PDM). 
   逻辑数据模型（LDM）可帮助您分析信息系统的结构，而不依赖于任何特定的物理数据库实现。LDM迁移了实体标识符，并且不像概念数据模型（CDM）那样抽象，但不允许您对更具体的物理数据模型（PDM）中可用的视图，索引和其他元素进行建模。 |
4. Physical Data,物理数据模型（PDM）
	A physical data model (PDM) helps you to analyze the tables, views, and other objects in a database, including multidimensional objects necessary for data warehousing. A PDM is more concrete than a conceptual (CDM) or logical (LDM) data model. You can model, reverse-engineer, and generate for all the most popular DBMSs. 
	帮助您分析数据库中的表，视图和其他对象，包括数据仓库所需的多维对象。PDM比概念（CDM）或逻辑（LDM）数据模型更具体。您可以为所有最流行的DBMS建模、反向工程和生成。                                                                                                                  |
5. Object Oriented,面向对象模型（OOM）
	An object-oriented model (OOM) helps you analyze an information system through use cases, structural and behavioral analysis, and in terms of deployment, using the Unified Modeling Language (UML). You can model, reverse-engineer, and generate for Java, .NET and other languages. 
6. Business Process | 业务处理模型（BPM）
	A business process diagram (or process flow diagram) provides a graphical view of the control flow (the sequence of execution) or data flow (the exchange of data) between processes at any level in your system. 
	从业务人员的角度对业务逻辑和规则进行详细描述的概念模型，并使用流程图表示从一个或多个起点到终点间的处理过程、流程、消息和协作协议。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;cdmpdm和oom之间的关系&quot;&gt;CDM、PDM和OOM之间的关系&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/cdm-pdm-oom.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>zrg</name></author><category term="DataBase" /><category term="Tool" /><summary type="html">Navicat 激活 Windows Navicat Premium 12.1.16.0激活教程： https://www.jianshu.com/p/5f693b4c9468 Linux $ ls ~/.navicat64/ dosdevices drive_c Navicat system.reg userdef.reg user.reg $ cd ~/.navicat64 $ mv system.reg /tmp/ $ mv user.reg /tmp/</summary></entry><entry><title type="html">总结2018，展望2019</title><link href="http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019/" rel="alternate" type="text/html" title="总结2018，展望2019" /><published>2019-01-17T00:00:00+08:00</published><updated>2019-01-17T00:00:00+08:00</updated><id>http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019</id><content type="html" xml:base="http://localhost:4000/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/2019/01/17/%E6%80%BB%E7%BB%932018-%E5%B1%95%E6%9C%9B2019/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-org4a762db&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org4a762db&quot;&gt;喜乐哀愁的2018&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org4a762db&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org606f5be&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org606f5be&quot;&gt;大事记&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org606f5be&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
失业21天
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
继2017年12月31号从上家公司辞职后，于2018年1月22日入职现在的公司，当时也算为徘徊了半个多月的自己找到了归宿。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
大雨过后的车祸
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年3月3日20点35分，在二环快速B线（北）下高架桥的时候，自己驾驶的一辆共享汽车追尾了一辆起亚k3的小汽车，回头想了想，还是觉得离老司机的路尚远。后续赔付了4000多块，事情得以终结。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
公司辞职潮
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年4月，所在部门掀起了一批辞职潮，个中缘由在这就不细说了！对于一个刚转正，继续回血的新人来说，实在是说不清楚的。\\
由于4月份、5月份部门内辞职了一大批核心技术人员，致使很多工作压到了我这里，倍感极具挑战性。入职4个月，从中也学到了很多之前没有接触的新知识，这点很欣慰，继续加油！！！
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
搭建个人博客
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年7月3日，在 Github 上使用 Jekyll 搭建了自己的 Blog，从此提醒自己记录开发笔记。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
新项目
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年11月，被编入了一个新项目（政府项目），在该项目中技术上没学到什么，不过在其他方面算是“受益匪浅”吧。，项目还在继续，在这就不细说了
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
外公过逝
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2018年12月15日，外公过逝了，我是晚上19点多接到父亲电话的，之后联系了表妹、姨兄，本欲赶往参加葬礼，后面被父亲劝住了。\\
父亲说了一句话：活着的时候你已多孝，死了不不能前来也不会怎么样！也就是那句话吧！【生前早尽孝,莫待人老空哭坟】
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org16ead5f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org16ead5f&quot;&gt;总结&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org16ead5f&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;如果说要给 2018 年做一个总结的话，那就是两个字：不顺。按说，2017年是本命年，应该才是不顺的一年，也许本命年过度到 2018 了吧！&lt;/li&gt;
&lt;li&gt;期待 2019 年顺顺利利吧！不管工作、生活、学习都能有所进步。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc7348d5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc7348d5&quot;&gt;期待新未来2019&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc7348d5&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge1ec84c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge1ec84c&quot;&gt;未来展望&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-orge1ec84c&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
一起回想和展望
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
2019年1月6-7日，和大学同学（老蒋，超哥，礼杰，我）聊了好久，说了很多！回想了在学校时的想法，回顾了从毕业到现在的种种，尤感岁月蹉跎，一眨眼2年半过去了，最后各自说了自己未来3年的计划。\\
这次相互间的交流让我感到了一股压力，让我不得不再次思考要不要驻留昆明，如果留昆明，那就意味着要买房，我一直是一个崇尚自由的人，不想被绑架，但父母又希望我能回老家某个职位，我有点不知所措。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
新的一年，新的方向
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
进一步提高职业技能，掌握专长技能，总结并构建技能框架，积累工作经验。
进一步学习，保留原有的常规学习内容：汉字书写练习、英语口语加强、专业知识积累。新技术学习也很重要，不能固步自封，向前看。
生活上，提高情商吧！女朋友一直说我情商低，是时候给自己定个小目标了！
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org14ce206&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org14ce206&quot;&gt;小小心愿&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org14ce206&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;工作技能提升，排在第一位一直都是很有必要的。&lt;/li&gt;
&lt;li&gt;找一份合适自己的工作很重要。&lt;/li&gt;
&lt;li&gt;升职加薪，当然是 2019 年追求的终极目标，毕竟有余力才能创造更多的东西，不管是工作还是生活上。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="年终总结" /><category term="未来展望" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry><entry><title type="html">vue实例属性之el-template-render</title><link href="http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render/" rel="alternate" type="text/html" title="vue实例属性之el-template-render" /><published>2018-12-29T00:00:00+08:00</published><updated>2018-12-29T00:00:00+08:00</updated><id>http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render</id><content type="html" xml:base="http://localhost:4000/javascript/2018/12/29/vue%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B9%8Bel_template_render/">&lt;p&gt;
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
&lt;/p&gt;

&lt;div id=&quot;outline-container-orgfe9c9ce&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfe9c9ce&quot;&gt;优先级&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgfe9c9ce&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/vue-level.png&quot; alt=&quot;vue-level.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org9eebc63&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9eebc63&quot;&gt;优先级-示例&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-org9eebc63&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org921b2d9&quot;&gt;&amp;lt;div class=&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;vapp-1&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;vapp-2&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&lt;span style=&quot;color: #8b2252;&quot;&gt;&quot;vapp-3&quot;&lt;/span&gt;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;orgd6e0594&quot;&gt;&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #8b2252;&quot;&gt;'.vapp-1'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  },
  template: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;lt;div&amp;gt;&amp;#36825;&amp;#26159;template&amp;#23646;&amp;#24615;&amp;#27169;&amp;#26495;&amp;#28210;&amp;#26579;&amp;#12290;&amp;lt;/div&amp;gt;'&lt;/span&gt;,
  &lt;span style=&quot;color: #0000ff;&quot;&gt;render&lt;/span&gt;: &lt;span style=&quot;color: #a020f0;&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color: #a0522d;&quot;&gt;h&lt;/span&gt;){
    &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; h(&lt;span style=&quot;color: #8b2252;&quot;&gt;'div'&lt;/span&gt;, {}, &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;render&amp;#23646;&amp;#24615;&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;)
  }
})
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #8b2252;&quot;&gt;'.vapp-2'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  },
  template: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;lt;div&amp;gt;&amp;#36825;&amp;#26159;template&amp;#23646;&amp;#24615;&amp;#27169;&amp;#26495;&amp;#28210;&amp;#26579;&amp;#12290;&amp;lt;/div&amp;gt;'&lt;/span&gt;
})
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  el: &lt;span style=&quot;color: #8b2252;&quot;&gt;'.vapp-3'&lt;/span&gt;,
  data: {
    info: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;#36825;&amp;#26159;&amp;#36890;&amp;#36807;el&amp;#23646;&amp;#24615;&amp;#33719;&amp;#21462;&amp;#25346;&amp;#36733;&amp;#20803;&amp;#32032;&amp;#30340;outerHTML&amp;#26041;&amp;#24335;&amp;#28210;&amp;#26579;&amp;#12290;'&lt;/span&gt;
  }
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6ceca91&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6ceca91&quot;&gt;独立构建和运行时构建&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6ceca91&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
ue.js 1.0，编译器需要依赖浏览器的DOM，所以无法将编译器和运行时分开。因此在Vue.js 1.0分发包中，编译器和运行时是打包在一起，都在浏览器端执行。
Vue.js 2.0，为了支持服务端渲染(server-side rendering)，编译器不能依赖浏览器的DOM，所以必须将编译器和运行时分开。于是形成了独立构建（编译器 + 运行时）和运行时构建（仅运行时）。显而易见，运行时构建体积要小于独立构建。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
1. 模板编译器
模板编译器的职责是将模板字符串编译为纯JavaScript的渲染函数，即将&amp;lt;template&amp;gt;编译成render函数。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
2. Vue.js的执行过程
包含编译过程和运行过程，在编译过程，编译器将字符串模板(template)编译为渲染函数(render)，在运行过程，调用渲染函数。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
3. 运行时构建
运行时构建指不能进行模板编译的Vue库。运行时构建不包含模板编译器，即不支持template选项，如果使用vue-loader和vueify预编译模板，只需要打包运行时，而不需要打包编译器。
运行时构建，可以用render选项，但它只在单文件组件中起作用，因为单文件组件的模板是在构建时预编译到render函数中，运行时构建只有独立构建大小的30%，只有16Kb min+gzip大小。
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;orgf06216b&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#19981;&amp;#38656;&amp;#35201;&amp;#32534;&amp;#35793;&amp;#22120;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  render (h) {
    &lt;span style=&quot;color: #a020f0;&quot;&gt;return&lt;/span&gt; h(&lt;span style=&quot;color: #8b2252;&quot;&gt;'div'&lt;/span&gt;, &lt;span style=&quot;color: #008b8b;&quot;&gt;this&lt;/span&gt;.hello)
  }
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
4. 独立构建
独立构建指能够将template模板或者从el挂载元素提取的模板编译成渲染函数的Vue库，独立构建包含模板编译器，可以用template选项实时编译模板。
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-javascript&quot; id=&quot;org8c352d2&quot;&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #b22222;&quot;&gt;&amp;#38656;&amp;#35201;&amp;#32534;&amp;#35793;&amp;#22120;&lt;/span&gt;
&lt;span style=&quot;color: #a020f0;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #228b22;&quot;&gt;Vue&lt;/span&gt;({
  template: &lt;span style=&quot;color: #8b2252;&quot;&gt;'&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;'&lt;/span&gt;
})
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
使用vue-cli生成项目时，会提醒使用哪种构建方式，npm包默认导出的是运行时构建，即runtime版本vue.runtime.common.js，如果想使用独立构建，需要在webpack.config.js中配置alias。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1417eb4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org1417eb4&quot;&gt;References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org1417eb4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/camille666/p/vue_instance_prop_el_template_render.html&quot;&gt;el，template，render属性优先性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Vue.js" /><summary type="html">感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！</summary></entry></feed>