<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-02-10T22:57:13+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Knowledge Has No Limit</title><subtitle>Life doesn't just happen to you; you receive everything in your life based on what you've given. 生命中的一切都不是巧合，你得到什么，是源于你付出了什么。</subtitle><author><name>Zhao Rengui</name></author><entry><title type="html">Java 开发笔记</title><link href="http://localhost:4000/java/2021/01/31/java-notes/" rel="alternate" type="text/html" title="Java 开发笔记" /><published>2021-01-31T00:00:00+08:00</published><updated>2021-01-31T00:00:00+08:00</updated><id>http://localhost:4000/java/2021/01/31/java-notes</id><content type="html" xml:base="http://localhost:4000/java/2021/01/31/java-notes/">&lt;p&gt;
x
&lt;/p&gt;

&lt;div id=&quot;outline-container-org900f0ca&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org900f0ca&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; Java 概念&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgde20516&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgde20516&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 重写(override)和重载(overload)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;概念
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Override：子类中和父类中的方法声明一模一样。&lt;/li&gt;
&lt;li&gt;Overload：方法一样，参数或参数类型不一样。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;使用注意事项
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;父类中私有方法不能被重写&lt;/li&gt;
&lt;li&gt;子类重写父类方法时，访问权限不能更低&lt;/li&gt;
&lt;li&gt;父类静态方法，子类也必须通过静态方法进行重写。（算不上重写）&lt;/li&gt;
&lt;li&gt;推荐：重写时，最好声明一模一样。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2b606cb&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2b606cb&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; == vs equals&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;对于==，如果作用于基本数据类型的变量（byte,short,char,int,long,float,double,boolean ），则直接比较其存储的&quot;值&quot;是否相等；如果作用于引用类型的变量（String），则比较的是所指向的对象的地址（即是否指向同一个对象）。&lt;/li&gt;
&lt;li&gt;equals方法是基类Object中的方法，因此对于所有的继承于Object的类都会有该方法。在Object类中，equals方法是用来比较两个对象的引用是否相等，即是否指向同一个对象。&lt;/li&gt;
&lt;li&gt;对于equals方法注意：equals方法不能作用于基本数据类型的变量。如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；而String类对equals方法进行了重写，用来比较指向的字符串对象所存储的字符串是否相等。其他的一些类诸如Double，Date，Integer等，都对equals方法进行了重写用来比较指向的对象所存储的内容是否相等。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0af0c65&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0af0c65&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 反射 &amp;amp; 范型&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;概念
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;反射：在日常生活中，通过放大镜可以看清楚物体的内部结构。在Java 中，反射机制就是起到放大镜的效果，可以通过类名，加载这个 类，显示出这个类的方法等信息。&lt;/li&gt;
&lt;li&gt;范型：在日常生活中，橡皮泥通过外力可以改变其形状，其形状是不固 定的。在Java中，通过泛型可以给开发带来方便，通过参数的指 定，可以改变其类型。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
使用范型的优缺点
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;使代码看起来灵活，代码量减少，容易管理 ，不容易产生错误；&lt;/li&gt;
&lt;li&gt;使用泛型在代码编译的时候能进行类型的检查并自动转换，使代码的运行效率得到提高；&lt;/li&gt;
&lt;li&gt;使用泛型在编译进行自动转换的时候出现了错误，会进行错误提示；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
-（缺点）在性能上不如数组快。
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1da7301&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1da7301&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 值传递 vs 引用传递&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;错误理解
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;值传递和引用传递，区分的条件是传递的内容，如果是个值，就是值传递。如果是个引用，就是引用传递。&lt;/li&gt;
&lt;li&gt;Java是引用传递&lt;/li&gt;
&lt;li&gt;传递的参数如果是普通类型，那就是值传递，如果是对象，那就是引用传递。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;实参和形参
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;形式参数：是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数。&lt;/li&gt;
&lt;li&gt;实际参数：在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
值传递和引用传递
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。&lt;/li&gt;
&lt;li&gt;引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;举例：&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/value-example.png&quot; alt=&quot;value-example.png&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;总结
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;值传递：会创建副本，在函数中无法改变原始对象。&lt;/li&gt;
&lt;li&gt;引用传递：引用传递不会创建副本，函数中可以改变原始对象。&lt;/li&gt;
&lt;li&gt;Java中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。可以说，Java中的传递只有值传递。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4c42cef&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4c42cef&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.5&lt;/span&gt; Class&amp;lt;T&amp;gt; vs Class&amp;lt;?&amp;gt;&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-5&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9f20da1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org9f20da1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5.1&lt;/span&gt; 提前了解&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-1&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;使用大写字母A,B,C,D&amp;#x2026;&amp;#x2026;X,Y,Z定义的，就都是泛型，把T换成A也一样，这里T只是名字上的意义而已。&lt;/li&gt;
&lt;li&gt;？ 表示不确定的java类型&lt;/li&gt;
&lt;li&gt;T (type) 表示具体的一个java类型&lt;/li&gt;
&lt;li&gt;K V (key value) 分别代表java键值中的Key Value&lt;/li&gt;
&lt;li&gt;E (element) 代表Element&lt;/li&gt;
&lt;li&gt;?和T区别是：？是一个不确定类，？和T都表示不确定的类型 ，但如果是T的话，函数里面可以对T进行操作，比方 T car = getCar()，而不能用？ car = getCar()。&lt;/li&gt;
&lt;li&gt;Object和T不同点在于，Object是一个实打实的类,并没有泛指谁，可以直接给List中 add(new Object())&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfaf1e87&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgfaf1e87&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.5.2&lt;/span&gt; Class&amp;lt;T&amp;gt;，Class&amp;lt;?&amp;gt;区别&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-5-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Class是什么呢，Class也是一个类，但Class是存放上面String,List,Map&amp;#x2026;&amp;#x2026;类信息的一个类，有点抽象。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
如何获取到Class类呢，有三种方式:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;List&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;list&lt;/span&gt; = &lt;span style=&quot;color: #AF87FF;&quot;&gt;null&lt;/span&gt;;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Class&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;clazz&lt;/span&gt; = list.getClass();
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Class&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;clazz&lt;/span&gt; = Class.forName(&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;com.lyang.demo.fanxing.People&quot;&lt;/span&gt;);
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Class&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;clazz&lt;/span&gt; = List.&lt;span style=&quot;color: #FF1493;&quot;&gt;class&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
使用Class&amp;lt;T&amp;gt;和Class&amp;lt;?&amp;gt;多发生在反射场景下，如果我们不使用泛型，反射创建一个类是什么样的:
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;People&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;people&lt;/span&gt; = (&lt;span style=&quot;color: #5FD7FF;&quot;&gt;People&lt;/span&gt;) Class.forName(&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;com.lyang.demo.fanxing.People&quot;&lt;/span&gt;).newInstance();
&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#38656;&amp;#35201;&amp;#24378;&amp;#36716;&amp;#65292;&amp;#22914;&amp;#26524;&amp;#21453;&amp;#23556;&amp;#30340;&amp;#31867;&amp;#22411;&amp;#19981;&amp;#26159;People&amp;#31867;&amp;#65292;&amp;#23601;&amp;#20250;&amp;#25253;java.lang.ClassCastException&amp;#38169;&amp;#35823;&amp;#12290;&lt;/span&gt;

&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#20351;&amp;#29992;Class&amp;lt;T&amp;gt;&amp;#27867;&amp;#22411;&amp;#21518;&amp;#65292;&amp;#19981;&amp;#29992;&amp;#24378;&amp;#36716;&amp;#20102;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Test&lt;/span&gt; {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &amp;lt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;T&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;createInstance&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Class&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;clazz&lt;/span&gt;) &lt;span style=&quot;color: #FF1493;&quot;&gt;throws&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;IllegalAccessException&lt;/span&gt;, &lt;span style=&quot;color: #5FD7FF;&quot;&gt;InstantiationException&lt;/span&gt; {
        &lt;span style=&quot;color: #FF1493;&quot;&gt;return&lt;/span&gt; clazz.newInstance();
    }

    &lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: #FF8C00;&quot;&gt;args&lt;/span&gt;)  &lt;span style=&quot;color: #FF1493;&quot;&gt;throws&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;IllegalAccessException&lt;/span&gt;, &lt;span style=&quot;color: #5FD7FF;&quot;&gt;InstantiationException&lt;/span&gt;  {
            &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Fruit&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;fruit&lt;/span&gt;= createInstance(Fruit .&lt;span style=&quot;color: #FF1493;&quot;&gt;class&lt;/span&gt;);
            &lt;span style=&quot;color: #5FD7FF;&quot;&gt;People&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;people&lt;/span&gt;= createInstance(People.&lt;span style=&quot;color: #FF1493;&quot;&gt;class&lt;/span&gt;);
    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
结论：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Class&amp;lt;T&amp;gt;在实例化的时候，T要替换成具体类&lt;/li&gt;
&lt;li&gt;Class&amp;lt;?&amp;gt;它是个通配泛型，?可以代表任何类型，主要用于声明时的限制情况&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#21487;&amp;#20197;&amp;#36825;&amp;#26679;&amp;#22768;&amp;#26126;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Class&lt;/span&gt;&amp;lt;?&amp;gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;clazz&lt;/span&gt;;
&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#20294;&amp;#19981;&amp;#21487;&amp;#20197;&amp;#36825;&amp;#26679;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Class&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;T&lt;/span&gt;&amp;gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;clazz&lt;/span&gt;;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga9594db&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orga9594db&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.6&lt;/span&gt; String vs StringBuffer vs StringBuilder&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-6&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;都是final类，都不允许被继承；&lt;/li&gt;
&lt;li&gt;String类长度是不可变的，StringBuffer和StringBuilder类长度是可以改变的；&lt;/li&gt;
&lt;li&gt;StringBuffer类是线程安全的，StringBuilder不是线程安全的；&lt;/li&gt;
&lt;li&gt;String类型和StringBuffer类型的主要性能区别：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;String是不可变的对象，因此每次在对String类进行改变的时候都会生成一个新的string对象，然后将指针指向新的string对象，所以经常要改变字符串长度的话不要使用string，因为每次生成对象都会对系统性能产生影响，特别是当内存中引用的对象多了以后，JVM的GC就会开始工作，性能就会降低；&lt;/li&gt;
&lt;li&gt;使用StringBuffer类时，每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用，所以多数情况下推荐使用StringBuffer，特别是字符串对象经常要改变的情况；&lt;/li&gt;
&lt;li&gt;在某些情况下，String对象的字符串拼接其实是被Java Compiler编译成了StringBuffer对象的拼接，所以这些时候String对象的速度并不会比StringBuffer对象慢。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;StringBuilder是5.0新增的，此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同；&lt;/li&gt;
&lt;li&gt;使用策略：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;基本原则：如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。&lt;/li&gt;
&lt;li&gt;不要使用String类的”+”来进行频繁的拼接，因为那样的性能极差的，应该使用StringBuffer或StringBuilder类，这在Java的优化上是一条比较重要的原则。&lt;/li&gt;
&lt;li&gt;StringBuilder一般使用在方法内部来完成类似”+”功能，因为是线程不安全的，所以用完以后可以丢弃。StringBuffer主要用在全局变量中。&lt;/li&gt;
&lt;li&gt;相同情况下，使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。而在现实的模块化编程中，负责某一模块的程序员不一定能清晰地判断该模块是否会放入多线程的环境中运行，因此：除非确定系统的瓶颈是在 StringBuffer 上，并且确定你的模块不会运行在多线程模式下，才可以采用StringBuilder；否则还是用StringBuffer。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3424245&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org3424245&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.7&lt;/span&gt; 自动装箱、拆箱&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-7&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
什么是自动装箱、拆箱
简单一点说，装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据类型。如下所示：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#33258;&amp;#21160;&amp;#35013;&amp;#31665;&lt;/span&gt;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;total&lt;/span&gt; = 99;

&lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#33258;&amp;#21160;&amp;#25286;&amp;#31665;&lt;/span&gt;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;totalprim&lt;/span&gt; = total;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
反编译class文件之后得到如下内容：
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
javap -c StringTest
&lt;/pre&gt;


&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;total&lt;/span&gt; = 99; 
&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#25191;&amp;#34892;&amp;#19978;&amp;#38754;&amp;#37027;&amp;#21477;&amp;#20195;&amp;#30721;&amp;#30340;&amp;#26102;&amp;#20505;&amp;#65292;&amp;#31995;&amp;#32479;&amp;#20026;&amp;#25105;&amp;#20204;&amp;#25191;&amp;#34892;&amp;#20102;&amp;#65306; &lt;/span&gt;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;total&lt;/span&gt; = Integer.valueOf(99);

&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;totalprim&lt;/span&gt; = total; 
&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#25191;&amp;#34892;&amp;#19978;&amp;#38754;&amp;#37027;&amp;#21477;&amp;#20195;&amp;#30721;&amp;#30340;&amp;#26102;&amp;#20505;&amp;#65292;&amp;#31995;&amp;#32479;&amp;#20026;&amp;#25105;&amp;#20204;&amp;#25191;&amp;#34892;&amp;#20102;&amp;#65306; &lt;/span&gt;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;totalprim&lt;/span&gt; = total.intValue();

&lt;span style=&quot;color: #CDC673;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #CDC673;&quot;&gt; * &amp;#36827;&amp;#32780;&amp;#20197;Integer&amp;#20026;&amp;#20363;&amp;#65292;&amp;#20998;&amp;#26512;&amp;#28304;&amp;#30721;&lt;/span&gt;
&lt;span style=&quot;color: #CDC673;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;Integer.valueOf&amp;#20989;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;valueOf&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i&lt;/span&gt;) {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;return&lt;/span&gt;  i &amp;gt;= 128 || i &amp;lt; -128 ? &lt;span style=&quot;color: #FF1493;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt;(i) : SMALL_VALUES[i + 128];
}

&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;Integer&amp;#30340;&amp;#26500;&amp;#36896;&amp;#20989;&amp;#25968;&amp;#65306;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;value&lt;/span&gt;;

&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#23450;&amp;#20041;&amp;#20102;&amp;#19968;&amp;#20010;value&amp;#21464;&amp;#37327;&amp;#65292;&amp;#21019;&amp;#24314;&amp;#19968;&amp;#20010;Integer&amp;#23545;&amp;#35937;&amp;#65292;&amp;#23601;&amp;#20250;&amp;#32473;&amp;#36825;&amp;#20010;&amp;#21464;&amp;#37327;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#12290;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;Integer&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;value&lt;/span&gt;) {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;this&lt;/span&gt;.value = value;
}

&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#20256;&amp;#20837;&amp;#30340;&amp;#26159;&amp;#19968;&amp;#20010;String&amp;#21464;&amp;#37327;&amp;#65292;&amp;#23427;&amp;#20250;&amp;#20808;&amp;#25226;&amp;#23427;&amp;#36716;&amp;#25442;&amp;#25104;&amp;#19968;&amp;#20010;int&amp;#20540;&amp;#65292;&amp;#28982;&amp;#21518;&amp;#36827;&amp;#34892;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#12290;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;Integer&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;String&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;string&lt;/span&gt;) &lt;span style=&quot;color: #FF1493;&quot;&gt;throws&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;NumberFormatException&lt;/span&gt; {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;this&lt;/span&gt;(parseInt(string));
}

&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;SMALL_VALUES[i + 128]&amp;#65292;&amp;#23427;&amp;#26159;&amp;#19968;&amp;#20010;&amp;#38745;&amp;#24577;&amp;#30340;Integer&amp;#25968;&amp;#32452;&amp;#23545;&amp;#35937;&amp;#65292;&amp;#20063;&amp;#23601;&amp;#26159;&amp;#35828;&amp;#26368;&amp;#32456;valueOf&amp;#36820;&amp;#22238;&amp;#30340;&amp;#37117;&amp;#26159;&amp;#19968;&amp;#20010;Integer&amp;#23545;&amp;#35937;&amp;#12290;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt;[] &lt;span style=&quot;color: #FF8C00;&quot;&gt;SMALL_VALUES&lt;/span&gt; = &lt;span style=&quot;color: #FF1493;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt;[256];
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
小结：装箱的过程会创建对应的对象，这个会消耗内存，所以装箱的过程会增加内存的消耗，影响性能。
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
进一步了解
在Integer的构造函数中，它分两种情况：
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
i &amp;gt;= 128 || i &amp;lt; -128 =====&amp;gt; new Integer(i)
i &amp;lt; 128 &amp;amp;&amp;amp; i &amp;gt;= -128 =====&amp;gt; SMALL_VALUES[i + 128]
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
private static final Integer[] SMALL_VALUES = new Integer[256];
&lt;/pre&gt;


&lt;p&gt;
SMALL_VALUES本来已经被创建好，也就是说在i &amp;gt;= 128 || i &amp;lt; -128是会创建不同的对象，在i &amp;lt; 128 &amp;amp;&amp;amp; i &amp;gt;= -128会根据i的值返回已经创建好的指定的对象。下面举例说明：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Main&lt;/span&gt; {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: #FF8C00;&quot;&gt;args&lt;/span&gt;) {

        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i1&lt;/span&gt; = 100;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i2&lt;/span&gt; = 100;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i3&lt;/span&gt; = 200;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i4&lt;/span&gt; = 200;

        System.out.println(i1==i2);  &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;true&lt;/span&gt;
        System.out.println(i3==i4);  &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;false&lt;/span&gt;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;i1和i2会进行自动装箱，执行了valueOf函数，它们的值在(-128,128]这个范围内，它们会拿到SMALL_VALUES数组里面的同一个对象SMALL_VALUES[228]，它们引用到了同一个Integer对象，所以它们肯定是相等的。&lt;/li&gt;
&lt;li&gt;i3和i4也会进行自动装箱，执行了valueOf函数，它们的值大于128，所以会执行new Integer(200)，也就是说它们会分别创建两个不同的对象，所以它们肯定不等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;b&gt;举例2:&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Main&lt;/span&gt; {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: #FF8C00;&quot;&gt;args&lt;/span&gt;) {

        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Double&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i1&lt;/span&gt; = 100.0;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Double&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i2&lt;/span&gt; = 100.0;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Double&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i3&lt;/span&gt; = 200.0;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Double&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i4&lt;/span&gt; = 200.0;

        System.out.println(i1==i2); &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;false&lt;/span&gt;
        System.out.println(i3==i4); &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;false&lt;/span&gt;
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
看看上面的执行结果，跟Integer不一样，对于Integer，在(-128,128]之间只有固定的256个值，所以为了避免多次创建对象，我们事先就创建好一个大小为256的Integer数组SMALL_VALUES，所以如果值在这个范围内，就可以直接返回我们事先创建好的对象就可以了。
&lt;br /&gt;
但是对于Double类型来说，因为它在这个范围内个数是无限的。所以在Double里面的做法很直接，就是直接创建一个对象，所以每次创建的对象都不一样。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Double&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;valueOf&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;double&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;d&lt;/span&gt;) {
     &lt;span style=&quot;color: #FF1493;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Double&lt;/span&gt;(d);
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
下面我们进行一个归类：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Integer派别：Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的。&lt;/li&gt;
&lt;li&gt;Double派别：Double、Float的valueOf方法的实现是类似的。每次都返回不同的对象。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;其他情况
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Boolean
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Main&lt;/span&gt; {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;main&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;String&lt;/span&gt;[] &lt;span style=&quot;color: #FF8C00;&quot;&gt;args&lt;/span&gt;) {

        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i1&lt;/span&gt; = &lt;span style=&quot;color: #AF87FF;&quot;&gt;false&lt;/span&gt;;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i2&lt;/span&gt; = &lt;span style=&quot;color: #AF87FF;&quot;&gt;false&lt;/span&gt;;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i3&lt;/span&gt; = &lt;span style=&quot;color: #AF87FF;&quot;&gt;true&lt;/span&gt;;
        &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;i4&lt;/span&gt; = &lt;span style=&quot;color: #AF87FF;&quot;&gt;true&lt;/span&gt;;

        System.out.println(i1==i2);&lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;true&lt;/span&gt;
        System.out.println(i3==i4);&lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;true&lt;/span&gt;
    }
}

&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#36820;&amp;#22238;&amp;#30340;&amp;#37117;&amp;#26159;true&amp;#65292;&amp;#20063;&amp;#23601;&amp;#26159;&amp;#23427;&amp;#20204;&amp;#25191;&amp;#34892;valueOf&amp;#36820;&amp;#22238;&amp;#30340;&amp;#37117;&amp;#26159;&amp;#30456;&amp;#21516;&amp;#30340;&amp;#23545;&amp;#35937;&amp;#12290;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;valueOf&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;b&lt;/span&gt;) {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;return&lt;/span&gt; b ? &lt;span style=&quot;color: #AF87FF;&quot;&gt;Boolean&lt;/span&gt;.TRUE : &lt;span style=&quot;color: #AF87FF;&quot;&gt;Boolean&lt;/span&gt;.FALSE;
}

&lt;span style=&quot;color: #8B8878;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#21487;&amp;#20197;&amp;#30475;&amp;#21040;&amp;#23427;&amp;#24182;&amp;#27809;&amp;#26377;&amp;#21019;&amp;#24314;&amp;#23545;&amp;#35937;&amp;#65292;&amp;#22240;&amp;#20026;&amp;#22312;&amp;#20869;&amp;#37096;&amp;#24050;&amp;#32463;&amp;#25552;&amp;#21069;&amp;#21019;&amp;#24314;&amp;#22909;&amp;#20004;&amp;#20010;&amp;#23545;&amp;#35937;&amp;#65292;&amp;#22240;&amp;#20026;&amp;#23427;&amp;#21482;&amp;#26377;&amp;#20004;&amp;#31181;&amp;#24773;&amp;#20917;&amp;#65292;&amp;#36825;&amp;#26679;&amp;#20063;&amp;#26159;&amp;#20026;&amp;#20102;&amp;#36991;&amp;#20813;&amp;#37325;&amp;#22797;&amp;#21019;&amp;#24314;&amp;#22826;&amp;#22810;&amp;#30340;&amp;#23545;&amp;#35937;&amp;#12290;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;TRUE&lt;/span&gt; = &lt;span style=&quot;color: #FF1493;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt;(&lt;span style=&quot;color: #AF87FF;&quot;&gt;true&lt;/span&gt;);

&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #FF1493;&quot;&gt;final&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;FALSE&lt;/span&gt; = &lt;span style=&quot;color: #FF1493;&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;Boolean&lt;/span&gt;(&lt;span style=&quot;color: #AF87FF;&quot;&gt;false&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
拆箱操作
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;num1&lt;/span&gt; = 400;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;num2&lt;/span&gt; = 400;
System.out.println(num1 == num2); &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;true&lt;/span&gt;
System.out.println(num1.equals(num2));  &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;true&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
equals 源码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #AF87FF;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;equals&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Object&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;o&lt;/span&gt;) {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;return&lt;/span&gt; (o &lt;span style=&quot;color: #FF1493;&quot;&gt;instanceof&lt;/span&gt; Integer) &amp;amp;&amp;amp; (((&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt;) o).value == value);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
说明：指定equal比较的是内容本身，并且我也可看到 equals 的参数是一个Object对象，我们传入的是一个 int 类型，所以首先会进行装箱，然后比较。之所以返回 true，是由于它比较的是对象里面的 value 值。
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;num1&lt;/span&gt; = 100;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;num2&lt;/span&gt; = 100;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Long&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;num3&lt;/span&gt; = 200l;
System.out.println(num1 + num2);  &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;200&lt;/span&gt;
System.out.println(num3 == (num1 + num2));  &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;true&lt;/span&gt;
System.out.println(num3.equals(num1 + num2));  &lt;span style=&quot;color: #8B8878;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;false&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
说明：当一个基础数据类型与封装类进行==、+、-、*、/运算时，会将封装类进行拆箱，对基础数据类型进行运算。 对于num3.equals(num1 + num2)为false的原因，根据代码实现来说明。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #AF87FF;&quot;&gt;@Override&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #5FD7FF;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #87D700;&quot;&gt;equals&lt;/span&gt;(&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Object&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;o&lt;/span&gt;) {
    &lt;span style=&quot;color: #FF1493;&quot;&gt;return&lt;/span&gt; (o &lt;span style=&quot;color: #FF1493;&quot;&gt;instanceof&lt;/span&gt; Long) &amp;amp;&amp;amp; (((&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Long&lt;/span&gt;) o).value == value);
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
所以，对于num3.equals(num1 + num2)为false的原因就是类型不同。
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
陷阱
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #5FD7FF;&quot;&gt;Integer&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;integer100&lt;/span&gt;=&lt;span style=&quot;color: #AF87FF;&quot;&gt;null&lt;/span&gt;;
&lt;span style=&quot;color: #5FD7FF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FF8C00;&quot;&gt;int100&lt;/span&gt;=integer100;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
这两行代码是完全合法的，完全能够通过编译的，但是在运行时，就会抛出空指针异常。其中，integer100为Integer类型的对象，它当然可以指向null。但在第二行时，就会对integer100进行拆箱，也就是对一个null对象执行intValue()方法，当然会抛出空指针异常。所以，有拆箱操作时一定要特别注意封装类对象是否为null。
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5afaddf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org5afaddf&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; &lt;/h2&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="java" /><category term="Java" /><summary type="html">x 1 Java 概念 1.1 重写(override)和重载(overload) 概念 Override：子类中和父类中的方法声明一模一样。 Overload：方法一样，参数或参数类型不一样。 使用注意事项 父类中私有方法不能被重写 子类重写父类方法时，访问权限不能更低 父类静态方法，子类也必须通过静态方法进行重写。（算不上重写） 推荐：重写时，最好声明一模一样。 1.2 == vs equals 对于==，如果作用于基本数据类型的变量（byte,short,char,int,long,float,double,boolean ），则直接比较其存储的&quot;值&quot;是否相等；如果作用于引用类型的变量（String），则比较的是所指向的对象的地址（即是否指向同一个对象）。 equals方法是基类Object中的方法，因此对于所有的继承于Object的类都会有该方法。在Object类中，equals方法是用来比较两个对象的引用是否相等，即是否指向同一个对象。 对于equals方法注意：equals方法不能作用于基本数据类型的变量。如果没有对equals方法进行重写，则比较的是引用类型的变量所指向的对象的地址；而String类对equals方法进行了重写，用来比较指向的字符串对象所存储的字符串是否相等。其他的一些类诸如Double，Date，Integer等，都对equals方法进行了重写用来比较指向的对象所存储的内容是否相等。 1.3 反射 &amp;amp; 范型 概念 反射：在日常生活中，通过放大镜可以看清楚物体的内部结构。在Java 中，反射机制就是起到放大镜的效果，可以通过类名，加载这个 类，显示出这个类的方法等信息。 范型：在日常生活中，橡皮泥通过外力可以改变其形状，其形状是不固 定的。在Java中，通过泛型可以给开发带来方便，通过参数的指 定，可以改变其类型。 使用范型的优缺点 使代码看起来灵活，代码量减少，容易管理 ，不容易产生错误； 使用泛型在代码编译的时候能进行类型的检查并自动转换，使代码的运行效率得到提高； 使用泛型在编译进行自动转换的时候出现了错误，会进行错误提示； -（缺点）在性能上不如数组快。 1.4 值传递 vs 引用传递 错误理解 值传递和引用传递，区分的条件是传递的内容，如果是个值，就是值传递。如果是个引用，就是引用传递。 Java是引用传递 传递的参数如果是普通类型，那就是值传递，如果是对象，那就是引用传递。 实参和形参 形式参数：是在定义函数名和函数体的时候使用的参数,目的是用来接收调用该函数时传入的参数。 实际参数：在调用有参函数时，主调函数和被调函数之间有数据传递关系。在主调函数中调用一个函数时，函数名后面括号中的参数称为“实际参数”。 值传递和引用传递 值传递（pass by value）是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。 引用传递（pass by reference）是指在调用函数时将实际参数的地址直接传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。 举例： 总结 值传递：会创建副本，在函数中无法改变原始对象。 引用传递：引用传递不会创建副本，函数中可以改变原始对象。 Java中其实还是值传递的，只不过对于对象参数，值的内容是对象的引用。可以说，Java中的传递只有值传递。 1.5 Class&amp;lt;T&amp;gt; vs Class&amp;lt;?&amp;gt; 1.5.1 提前了解 使用大写字母A,B,C,D&amp;#x2026;&amp;#x2026;X,Y,Z定义的，就都是泛型，把T换成A也一样，这里T只是名字上的意义而已。 ？ 表示不确定的java类型 T (type) 表示具体的一个java类型 K V (key value) 分别代表java键值中的Key Value E (element) 代表Element ?和T区别是：？是一个不确定类，？和T都表示不确定的类型 ，但如果是T的话，函数里面可以对T进行操作，比方 T car = getCar()，而不能用？ car = getCar()。 Object和T不同点在于，Object是一个实打实的类,并没有泛指谁，可以直接给List中 add(new Object()) 1.5.2 Class&amp;lt;T&amp;gt;，Class&amp;lt;?&amp;gt;区别 Class是什么呢，Class也是一个类，但Class是存放上面String,List,Map&amp;#x2026;&amp;#x2026;类信息的一个类，有点抽象。 如何获取到Class类呢，有三种方式: List list = null; Class clazz = list.getClass(); Class clazz = Class.forName(&quot;com.lyang.demo.fanxing.People&quot;); Class clazz = List.class; 使用Class&amp;lt;T&amp;gt;和Class&amp;lt;?&amp;gt;多发生在反射场景下，如果我们不使用泛型，反射创建一个类是什么样的: People people = (People) Class.forName(&quot;com.lyang.demo.fanxing.People&quot;).newInstance(); // &amp;#38656;&amp;#35201;&amp;#24378;&amp;#36716;&amp;#65292;&amp;#22914;&amp;#26524;&amp;#21453;&amp;#23556;&amp;#30340;&amp;#31867;&amp;#22411;&amp;#19981;&amp;#26159;People&amp;#31867;&amp;#65292;&amp;#23601;&amp;#20250;&amp;#25253;java.lang.ClassCastException&amp;#38169;&amp;#35823;&amp;#12290; // &amp;#20351;&amp;#29992;Class&amp;lt;T&amp;gt;&amp;#27867;&amp;#22411;&amp;#21518;&amp;#65292;&amp;#19981;&amp;#29992;&amp;#24378;&amp;#36716;&amp;#20102; public class Test { public static &amp;lt;T&amp;gt; T createInstance(Class&amp;lt;T&amp;gt; clazz) throws IllegalAccessException, InstantiationException { return clazz.newInstance(); } public static void main(String[] args) throws IllegalAccessException, InstantiationException { Fruit fruit= createInstance(Fruit .class); People people= createInstance(People.class); } } 结论： Class&amp;lt;T&amp;gt;在实例化的时候，T要替换成具体类 Class&amp;lt;?&amp;gt;它是个通配泛型，?可以代表任何类型，主要用于声明时的限制情况 // &amp;#21487;&amp;#20197;&amp;#36825;&amp;#26679;&amp;#22768;&amp;#26126; public Class&amp;lt;?&amp;gt; clazz; // &amp;#20294;&amp;#19981;&amp;#21487;&amp;#20197;&amp;#36825;&amp;#26679; public Class&amp;lt;T&amp;gt; clazz; 1.6 String vs StringBuffer vs StringBuilder 都是final类，都不允许被继承； String类长度是不可变的，StringBuffer和StringBuilder类长度是可以改变的； StringBuffer类是线程安全的，StringBuilder不是线程安全的； String类型和StringBuffer类型的主要性能区别： String是不可变的对象，因此每次在对String类进行改变的时候都会生成一个新的string对象，然后将指针指向新的string对象，所以经常要改变字符串长度的话不要使用string，因为每次生成对象都会对系统性能产生影响，特别是当内存中引用的对象多了以后，JVM的GC就会开始工作，性能就会降低； 使用StringBuffer类时，每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用，所以多数情况下推荐使用StringBuffer，特别是字符串对象经常要改变的情况； 在某些情况下，String对象的字符串拼接其实是被Java Compiler编译成了StringBuffer对象的拼接，所以这些时候String对象的速度并不会比StringBuffer对象慢。 StringBuilder是5.0新增的，此类提供一个与 StringBuffer 兼容的 API，但不保证同步。该类被设计用作 StringBuffer 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比 StringBuffer 要快。两者的方法基本相同； 使用策略： 基本原则：如果要操作少量的数据，用String ；单线程操作大量数据，用StringBuilder ；多线程操作大量数据，用StringBuffer。 不要使用String类的”+”来进行频繁的拼接，因为那样的性能极差的，应该使用StringBuffer或StringBuilder类，这在Java的优化上是一条比较重要的原则。 StringBuilder一般使用在方法内部来完成类似”+”功能，因为是线程不安全的，所以用完以后可以丢弃。StringBuffer主要用在全局变量中。 相同情况下，使用 StirngBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。而在现实的模块化编程中，负责某一模块的程序员不一定能清晰地判断该模块是否会放入多线程的环境中运行，因此：除非确定系统的瓶颈是在 StringBuffer 上，并且确定你的模块不会运行在多线程模式下，才可以采用StringBuilder；否则还是用StringBuffer。 1.7 自动装箱、拆箱 什么是自动装箱、拆箱 简单一点说，装箱就是自动将基本数据类型转换为包装器类型；拆箱就是自动将包装器类型转换为基本数据类型。如下所示： //&amp;#33258;&amp;#21160;&amp;#35013;&amp;#31665; Integer total = 99; //&amp;#33258;&amp;#21160;&amp;#25286;&amp;#31665; int totalprim = total; 反编译class文件之后得到如下内容： javap -c StringTest Integer total = 99; // &amp;#25191;&amp;#34892;&amp;#19978;&amp;#38754;&amp;#37027;&amp;#21477;&amp;#20195;&amp;#30721;&amp;#30340;&amp;#26102;&amp;#20505;&amp;#65292;&amp;#31995;&amp;#32479;&amp;#20026;&amp;#25105;&amp;#20204;&amp;#25191;&amp;#34892;&amp;#20102;&amp;#65306; Integer total = Integer.valueOf(99); int totalprim = total; // &amp;#25191;&amp;#34892;&amp;#19978;&amp;#38754;&amp;#37027;&amp;#21477;&amp;#20195;&amp;#30721;&amp;#30340;&amp;#26102;&amp;#20505;&amp;#65292;&amp;#31995;&amp;#32479;&amp;#20026;&amp;#25105;&amp;#20204;&amp;#25191;&amp;#34892;&amp;#20102;&amp;#65306; int totalprim = total.intValue(); /** * &amp;#36827;&amp;#32780;&amp;#20197;Integer&amp;#20026;&amp;#20363;&amp;#65292;&amp;#20998;&amp;#26512;&amp;#28304;&amp;#30721; */ // Integer.valueOf&amp;#20989;&amp;#25968; public static Integer valueOf(int i) { return i &amp;gt;= 128 || i &amp;lt; -128 ? new Integer(i) : SMALL_VALUES[i + 128]; } // Integer&amp;#30340;&amp;#26500;&amp;#36896;&amp;#20989;&amp;#25968;&amp;#65306; private final int value; // &amp;#23450;&amp;#20041;&amp;#20102;&amp;#19968;&amp;#20010;value&amp;#21464;&amp;#37327;&amp;#65292;&amp;#21019;&amp;#24314;&amp;#19968;&amp;#20010;Integer&amp;#23545;&amp;#35937;&amp;#65292;&amp;#23601;&amp;#20250;&amp;#32473;&amp;#36825;&amp;#20010;&amp;#21464;&amp;#37327;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#12290; public Integer(int value) { this.value = value; } // &amp;#20256;&amp;#20837;&amp;#30340;&amp;#26159;&amp;#19968;&amp;#20010;String&amp;#21464;&amp;#37327;&amp;#65292;&amp;#23427;&amp;#20250;&amp;#20808;&amp;#25226;&amp;#23427;&amp;#36716;&amp;#25442;&amp;#25104;&amp;#19968;&amp;#20010;int&amp;#20540;&amp;#65292;&amp;#28982;&amp;#21518;&amp;#36827;&amp;#34892;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#12290; public Integer(String string) throws NumberFormatException { this(parseInt(string)); } // SMALL_VALUES[i + 128]&amp;#65292;&amp;#23427;&amp;#26159;&amp;#19968;&amp;#20010;&amp;#38745;&amp;#24577;&amp;#30340;Integer&amp;#25968;&amp;#32452;&amp;#23545;&amp;#35937;&amp;#65292;&amp;#20063;&amp;#23601;&amp;#26159;&amp;#35828;&amp;#26368;&amp;#32456;valueOf&amp;#36820;&amp;#22238;&amp;#30340;&amp;#37117;&amp;#26159;&amp;#19968;&amp;#20010;Integer&amp;#23545;&amp;#35937;&amp;#12290; private static final Integer[] SMALL_VALUES = new Integer[256]; 小结：装箱的过程会创建对应的对象，这个会消耗内存，所以装箱的过程会增加内存的消耗，影响性能。 进一步了解 在Integer的构造函数中，它分两种情况： i &amp;gt;= 128 || i &amp;lt; -128 =====&amp;gt; new Integer(i) i &amp;lt; 128 &amp;amp;&amp;amp; i &amp;gt;= -128 =====&amp;gt; SMALL_VALUES[i + 128] private static final Integer[] SMALL_VALUES = new Integer[256]; SMALL_VALUES本来已经被创建好，也就是说在i &amp;gt;= 128 || i &amp;lt; -128是会创建不同的对象，在i &amp;lt; 128 &amp;amp;&amp;amp; i &amp;gt;= -128会根据i的值返回已经创建好的指定的对象。下面举例说明： public class Main { public static void main(String[] args) { Integer i1 = 100; Integer i2 = 100; Integer i3 = 200; Integer i4 = 200; System.out.println(i1==i2); //true System.out.println(i3==i4); //false } } i1和i2会进行自动装箱，执行了valueOf函数，它们的值在(-128,128]这个范围内，它们会拿到SMALL_VALUES数组里面的同一个对象SMALL_VALUES[228]，它们引用到了同一个Integer对象，所以它们肯定是相等的。 i3和i4也会进行自动装箱，执行了valueOf函数，它们的值大于128，所以会执行new Integer(200)，也就是说它们会分别创建两个不同的对象，所以它们肯定不等。 举例2: public class Main { public static void main(String[] args) { Double i1 = 100.0; Double i2 = 100.0; Double i3 = 200.0; Double i4 = 200.0; System.out.println(i1==i2); //false System.out.println(i3==i4); //false } } 看看上面的执行结果，跟Integer不一样，对于Integer，在(-128,128]之间只有固定的256个值，所以为了避免多次创建对象，我们事先就创建好一个大小为256的Integer数组SMALL_VALUES，所以如果值在这个范围内，就可以直接返回我们事先创建好的对象就可以了。 但是对于Double类型来说，因为它在这个范围内个数是无限的。所以在Double里面的做法很直接，就是直接创建一个对象，所以每次创建的对象都不一样。 public static Double valueOf(double d) { return new Double(d); } 下面我们进行一个归类： Integer派别：Integer、Short、Byte、Character、Long这几个类的valueOf方法的实现是类似的。 Double派别：Double、Float的valueOf方法的实现是类似的。每次都返回不同的对象。 其他情况 Boolean public class Main { public static void main(String[] args) { Boolean i1 = false; Boolean i2 = false; Boolean i3 = true; Boolean i4 = true; System.out.println(i1==i2);//true System.out.println(i3==i4);//true } } // &amp;#36820;&amp;#22238;&amp;#30340;&amp;#37117;&amp;#26159;true&amp;#65292;&amp;#20063;&amp;#23601;&amp;#26159;&amp;#23427;&amp;#20204;&amp;#25191;&amp;#34892;valueOf&amp;#36820;&amp;#22238;&amp;#30340;&amp;#37117;&amp;#26159;&amp;#30456;&amp;#21516;&amp;#30340;&amp;#23545;&amp;#35937;&amp;#12290; public static Boolean valueOf(boolean b) { return b ? Boolean.TRUE : Boolean.FALSE; } // &amp;#21487;&amp;#20197;&amp;#30475;&amp;#21040;&amp;#23427;&amp;#24182;&amp;#27809;&amp;#26377;&amp;#21019;&amp;#24314;&amp;#23545;&amp;#35937;&amp;#65292;&amp;#22240;&amp;#20026;&amp;#22312;&amp;#20869;&amp;#37096;&amp;#24050;&amp;#32463;&amp;#25552;&amp;#21069;&amp;#21019;&amp;#24314;&amp;#22909;&amp;#20004;&amp;#20010;&amp;#23545;&amp;#35937;&amp;#65292;&amp;#22240;&amp;#20026;&amp;#23427;&amp;#21482;&amp;#26377;&amp;#20004;&amp;#31181;&amp;#24773;&amp;#20917;&amp;#65292;&amp;#36825;&amp;#26679;&amp;#20063;&amp;#26159;&amp;#20026;&amp;#20102;&amp;#36991;&amp;#20813;&amp;#37325;&amp;#22797;&amp;#21019;&amp;#24314;&amp;#22826;&amp;#22810;&amp;#30340;&amp;#23545;&amp;#35937;&amp;#12290; public static final Boolean TRUE = new Boolean(true); public static final Boolean FALSE = new Boolean(false); 拆箱操作 Integer num1 = 400; int num2 = 400; System.out.println(num1 == num2); //true System.out.println(num1.equals(num2)); //true equals 源码： @Override public boolean equals(Object o) { return (o instanceof Integer) &amp;amp;&amp;amp; (((Integer) o).value == value); } 说明：指定equal比较的是内容本身，并且我也可看到 equals 的参数是一个Object对象，我们传入的是一个 int 类型，所以首先会进行装箱，然后比较。之所以返回 true，是由于它比较的是对象里面的 value 值。 Integer num1 = 100; int num2 = 100; Long num3 = 200l; System.out.println(num1 + num2); //200 System.out.println(num3 == (num1 + num2)); //true System.out.println(num3.equals(num1 + num2)); //false 说明：当一个基础数据类型与封装类进行==、+、-、*、/运算时，会将封装类进行拆箱，对基础数据类型进行运算。 对于num3.equals(num1 + num2)为false的原因，根据代码实现来说明。 @Override public boolean equals(Object o) { return (o instanceof Long) &amp;amp;&amp;amp; (((Long) o).value == value); } 所以，对于num3.equals(num1 + num2)为false的原因就是类型不同。 陷阱 Integer integer100=null; int int100=integer100; 这两行代码是完全合法的，完全能够通过编译的，但是在运行时，就会抛出空指针异常。其中，integer100为Integer类型的对象，它当然可以指向null。但在第二行时，就会对integer100进行拆箱，也就是对一个null对象执行intValue()方法，当然会抛出空指针异常。所以，有拆箱操作时一定要特别注意封装类对象是否为null。 2</summary></entry><entry><title type="html">计算机书籍</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2021/01/30/books/" rel="alternate" type="text/html" title="计算机书籍" /><published>2021-01-30T00:00:00+08:00</published><updated>2021-01-30T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2021/01/30/books</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2021/01/30/books/">&lt;div id=&quot;outline-container-org6aaa811&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6aaa811&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 计算机体系结构&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;计算机体系结构(张晨曦版)&lt;/li&gt;
&lt;li&gt;计算机体系结构(量化研究方法)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfafdbd5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfafdbd5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 计算机数学基础类&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;高等数学&lt;/li&gt;
&lt;li&gt;线性代数&lt;/li&gt;
&lt;li&gt;概率论与数理统计&lt;/li&gt;
&lt;li&gt;离散数学及其应用(Discrete Mathematics and Its Applications)&lt;/li&gt;
&lt;li&gt;离散数学教程(北大版)&lt;/li&gt;
&lt;li&gt;什么是数学&lt;/li&gt;
&lt;li&gt;具体数学：计算机科学基础&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7b06a7b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7b06a7b&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 电子技术基础类&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;模拟电子技术(童诗白版)&lt;/li&gt;
&lt;li&gt;数字逻辑与数字集成电路(清华版)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org53510f9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org53510f9&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 计算机组成原理&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;计算机组成原理&lt;/li&gt;
&lt;li&gt;计算机组成-结构化方法&lt;/li&gt;
&lt;li&gt;计算机组成与设计硬件/软件接口&lt;/li&gt;
&lt;li&gt;微机原理与接口技术(陈光军版)&lt;/li&gt;
&lt;li&gt;Intel微处理器结构、编程与接口&lt;/li&gt;
&lt;li&gt;编程卓越之道卷1&lt;/li&gt;
&lt;li&gt;编程卓越之道卷2&lt;/li&gt;
&lt;li&gt;编码的奥秘&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga143465&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orga143465&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 计算机网络&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;图解HTTP，[日]上野宣/ 2014-4-15 / 人民邮电出版社&lt;/li&gt;
&lt;li&gt;图解TCP/IP&lt;/li&gt;
&lt;li&gt;计算机网络（第4版），[美]JamesF.Kurose/[美]KeithW.Ross/ 2009-11 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;TCP/IP详解（卷1/2/3），[美]W·RichardStevens/ 2000-4-1 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;计算机网络，谢希仁/ 电子工业出版社&lt;/li&gt;
&lt;li&gt;CCNA/CCNP&lt;/li&gt;
&lt;li&gt;用TCP/IP进行网际互联(第1/2/3卷)&lt;/li&gt;
&lt;li&gt;HTTP权威指南&lt;/li&gt;
&lt;li&gt;《计算机网络 自顶向下》&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org25ac142&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org25ac142&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 数据结构与算法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;数据结构(清华版)&lt;/li&gt;
&lt;li&gt;数据结构与算法分析—C语言描述&lt;/li&gt;
&lt;li&gt;编程珠玑&lt;/li&gt;
&lt;li&gt;编程珠玑II&lt;/li&gt;
&lt;li&gt;算法导论&lt;/li&gt;
&lt;li&gt;计算机程序设计艺术卷1&lt;/li&gt;
&lt;li&gt;计算机程序设计艺术卷2&lt;/li&gt;
&lt;li&gt;计算机程序设计艺术卷3&lt;/li&gt;
&lt;li&gt;大话数据结构，程杰/清华大学出版社&lt;/li&gt;
&lt;li&gt;算法（第4版），塞奇威克(RobertSedgewick)/韦恩(KevinWayne)/ 2012-10-1 / 人民邮电出版社&lt;/li&gt;
&lt;li&gt;算法导论（第3版），(美)科尔曼 著 殷建平 译/机械工业出版社，不适合初学者&lt;/li&gt;
&lt;li&gt;数据结构与算法分析，[美]MarkAllenWeiss/ 2004-1-1 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;机器学习，周志华/清华大学出版社&lt;/li&gt;
&lt;li&gt;机器学习实战，[美]Peter Harrington/人民邮电出版社&lt;/li&gt;
&lt;li&gt;程序员代码面试指南：IT名企算法与数据结构题目最优解，左程云/ 2015-9 / 电子工业出版社&lt;/li&gt;
&lt;li&gt;程序员的数学&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf1abb16&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgf1abb16&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; code&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;软件工程(Software.Engineering)&lt;/li&gt;
&lt;li&gt;软件工程：实践者的研究方法&lt;/li&gt;
&lt;li&gt;深入浅出面向对象分析与设计&lt;/li&gt;
&lt;li&gt;道法自然:面向对象实践指南&lt;/li&gt;
&lt;li&gt;面向对象分析与设计&lt;/li&gt;
&lt;li&gt;设计模式:可复用面向对象软件的基础&lt;/li&gt;
&lt;li&gt;head first设计模式&lt;/li&gt;
&lt;li&gt;软件架构的艺术&lt;/li&gt;
&lt;li&gt;设计模式，刘伟/清华大学出版社&lt;/li&gt;
&lt;li&gt;设计模式，[美]ErichGamma/RichardHelm/RalphJohnson/JohnVlissides/ 2000-9 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;重构—改善既有代码的设计&lt;/li&gt;
&lt;li&gt;敏捷软件开发：原则、模式与实践&lt;/li&gt;
&lt;li&gt;敏捷软件开发，[美]RobertC·Martin/ 2003-09-01 / 清华大学出版社&lt;/li&gt;
&lt;li&gt;测试驱动开发&lt;/li&gt;
&lt;li&gt;代码大全 2&lt;/li&gt;
&lt;li&gt;程序设计实践&lt;/li&gt;
&lt;li&gt;程序员修炼之道：从小工到专家&lt;/li&gt;
&lt;li&gt;卓有成效的程序员&lt;/li&gt;
&lt;li&gt;代码之美&lt;/li&gt;
&lt;li&gt;人月神话&lt;/li&gt;
&lt;li&gt;计算机程序的构造和解释&lt;/li&gt;
&lt;li&gt;观止-微软创建NT和未来的夺命狂奔&lt;/li&gt;
&lt;li&gt;代码优化：有效使用内存[美]克里斯·卡巴斯基&lt;/li&gt;
&lt;li&gt;编程高手箴言(梁肇新)&lt;/li&gt;
&lt;li&gt;游戏之旅-我的编程感悟(云风)&lt;/li&gt;
&lt;li&gt;剑指Offer，何海涛/ 2012-1 / 电子工业出版社&lt;/li&gt;
&lt;li&gt;编程珠玑，[美]JonBentley/ 2008-10 / 人民邮电出版社&lt;/li&gt;
&lt;li&gt;Head First 设计模式，[美]弗里曼/ 2007-9 / 中国电力出版社&lt;/li&gt;
&lt;li&gt;编程之美——微软技术面试心得，电子工业出版社&lt;/li&gt;
&lt;li&gt;大话设计模式，程杰/ 2007-12-1 / 清华大学出版社&lt;/li&gt;
&lt;li&gt;《重构 改善既有代码的设计》 需要一些经验，拔高内容&lt;/li&gt;
&lt;li&gt;程序员的自我修养:链接、装载与库&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2c5515e&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2c5515e&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 编程语言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org88aa6ee&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org88aa6ee&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.1&lt;/span&gt; 汇编语言&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;汇编语言(王爽版)&lt;/li&gt;
&lt;li&gt;80X86汇编语言程序设计教程&lt;/li&gt;
&lt;li&gt;Intel汇编语言程序设计&lt;/li&gt;
&lt;li&gt;IBM PC汇编语言程序设计(国外版)&lt;/li&gt;
&lt;li&gt;高级汇编语言程序设计&lt;/li&gt;
&lt;li&gt;保护方式下的80386及其编程&lt;/li&gt;
&lt;li&gt;黑客反汇编揭秘&lt;/li&gt;
&lt;li&gt;Windows环境下32&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7c85102&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org7c85102&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.2&lt;/span&gt; C/C++&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;C/C++语言程序设计 谭浩强&lt;/li&gt;
&lt;li&gt;《C Primer Plus》(第5版）中文版  买新版&lt;/li&gt;
&lt;li&gt;《C++ Primer》中文版，对C++语法有全面的了解&lt;/li&gt;
&lt;li&gt;《C++ Primer Plus》 更适合零基础学习&lt;/li&gt;
&lt;li&gt;The C programming language&lt;/li&gt;
&lt;li&gt;The C++ programming language，适合全面深入掌握C++。&lt;/li&gt;
&lt;li&gt;C和指针&lt;/li&gt;
&lt;li&gt;C专家教程&lt;/li&gt;
&lt;li&gt;C陷阱与缺陷&lt;/li&gt;
&lt;li&gt;c语言解惑&lt;/li&gt;
&lt;li&gt;C标准库&lt;/li&gt;
&lt;li&gt;C++标准程序库&lt;/li&gt;
&lt;li&gt;你必须知道的495个C语言问题&lt;/li&gt;
&lt;li&gt;C++编程思想2&lt;/li&gt;
&lt;li&gt;Essential C++&lt;/li&gt;
&lt;li&gt;C++程序设计语言&lt;/li&gt;
&lt;li&gt;C++语言的设计和演化&lt;/li&gt;
&lt;li&gt;Accelerated C++&lt;/li&gt;
&lt;li&gt;Effective C++，这本书适合在面试之前突击C++。&lt;/li&gt;
&lt;li&gt;Effective STL&lt;/li&gt;
&lt;li&gt;More Effective C++&lt;/li&gt;
&lt;li&gt;Exceptional C++&lt;/li&gt;
&lt;li&gt;More Exceptional C++&lt;/li&gt;
&lt;li&gt;C++设计新思维&lt;/li&gt;
&lt;li&gt;深度探索C++对象模型，深入了解C++对象的内部，比如虚函数的调用机制等。&lt;/li&gt;
&lt;li&gt;C++沉思录&lt;/li&gt;
&lt;li&gt;C++ Templates: The Complete Guide&lt;/li&gt;
&lt;li&gt;C++ FAQs&lt;/li&gt;
&lt;li&gt;泛型编程与STL&lt;/li&gt;
&lt;li&gt;STL源码剖析&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5693e6c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5693e6c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.3&lt;/span&gt; Java&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;《Java编程思想》（Thinking in Java）&lt;/li&gt;
&lt;li&gt;Java编程规范&lt;/li&gt;
&lt;li&gt;《Java核心技术》卷1卷2&lt;/li&gt;
&lt;li&gt;Effective Java，[美]JoshuaBloch/ 2009-1-1 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;深入理解Java虚拟机（第2版），周志明/ 2013-9-1 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;实战Java虚拟机，葛一鸣/ 2015-3 / 电子工业出版社出品方:博文视点&lt;/li&gt;
&lt;li&gt;Java编程的逻辑，马俊昌/ 2018-1-1 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;Java并发编程实战，BrianGoetz/TimPeierls/JoshuaBloch/JosephBowbeer/DavidHolmes/DougLea/ 2012-2 / 机械工业出版社华章公司&lt;/li&gt;
&lt;li&gt;Java并发编程的艺术，方腾飞/魏鹏/程晓明/ 2015-7-1 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;Java并发编程实战指南（核心篇），黄文海/ 2017-4 / 电子工业出版社出品方:博文视点&lt;/li&gt;
&lt;li&gt;看透Spring MVC，韩路彪/ 2016-1-1 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;深入分析Java Web技术内幕，许令波/ 2014-8-1 / 电子工业出版社&lt;/li&gt;
&lt;li&gt;Java核心技术（卷1，原书第10版），[美]凯.S.霍斯特曼（CayS.Horstmann）/ 2016-9 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;疯狂Java讲义，李刚/ 2008-10 / 电子工业出版社&lt;/li&gt;
&lt;li&gt;《Spring实战》&lt;/li&gt;
&lt;li&gt;《Spring Boot实战》&lt;/li&gt;
&lt;li&gt;《Spring技术内幕》 很难&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6dd4c08&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org6dd4c08&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.4&lt;/span&gt; PHP&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;跟着兄弟学PHP&lt;/li&gt;
&lt;li&gt;深入PHP-面向对象、模式与实践，[美]Matt Zandstra 著/人民邮电出版社&lt;/li&gt;
&lt;li&gt;PHP核心技术与最佳实践，列旭松 陈文/机械工业出版社&lt;/li&gt;
&lt;li&gt;PHP高级程序设计_模式、框架与测试&lt;/li&gt;
&lt;li&gt;Learning PHP Design Patterns&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org99f0897&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org99f0897&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.5&lt;/span&gt; Python&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;《Python核心编程》&lt;/li&gt;
&lt;li&gt;《Python&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0818428&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0818428&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.6&lt;/span&gt; Golang&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-6&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;《Go语言实战》 or《Go In Action》&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgec76db3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgec76db3&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.7&lt;/span&gt; 前端技术&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-7&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;JavaScript 高级程序设计&lt;/li&gt;
&lt;li&gt;JavaScript权威指南.第六版&lt;/li&gt;
&lt;li&gt;深入浅出Nodejs&lt;/li&gt;
&lt;li&gt;深入理解ES6&lt;/li&gt;
&lt;li&gt;学习JavaScript数据结构与算法&lt;/li&gt;
&lt;li&gt;数据结构与算法JavaScript描述&lt;/li&gt;
&lt;li&gt;CSS权威指南-第三版&lt;/li&gt;
&lt;li&gt;JavaScript+DOM编程艺术&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org13eb173&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org13eb173&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;9&lt;/span&gt; 数据库&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-9&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org680008b&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org680008b&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;9.1&lt;/span&gt; 数据库理论&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;数据库系统概念，AbrahamSilberschatz/HenryF.Korth/S.Sudarshan/ 2006-10-01 / 机械工业&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org45882a1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org45882a1&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;9.2&lt;/span&gt; Redis&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Redis 实战，JosiahL.Carlson/ 2015-10 / 人民邮电出版社&lt;/li&gt;
&lt;li&gt;Redis 设计与实现，黄健宏/ 2014-6 / 机械工业出版社&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org15f22e9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org15f22e9&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;9.3&lt;/span&gt; MySQL&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-9-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;MySQL必知必会，[英]BenForta/ 2009-1 / 人民邮电出版社，涵盖 《SQL必知必会》的内容&lt;/li&gt;
&lt;li&gt;高性能MySQL，BaronSchwartz/PeterZaitsev/VadimTkachenko/JeremyD.Zawodny/ArjenLent/DerekJ.Ballin/ 2010年1月 / 电子工业出版社&lt;/li&gt;
&lt;li&gt;MySQL技术内幕，姜承尧/ 2013-5 / 机械工业出版社&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgedec75b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgedec75b&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;10&lt;/span&gt; 操作系统&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-10&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0784841&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0784841&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;10.1&lt;/span&gt; Unix/Linux 操作系统&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;鸟哥的Linux私房菜（基础学习篇）&lt;/li&gt;
&lt;li&gt;鸟哥的Linux私房菜（服务器架设篇）&lt;/li&gt;
&lt;li&gt;Unix/Linux编程实践教程，BruceMolay/杨宗源/黄海涛/ 2004-10-1 / 清华大学出版社&lt;/li&gt;
&lt;li&gt;《Unix环境高级编程》&lt;/li&gt;
&lt;li&gt;Linux程序设计&lt;/li&gt;
&lt;li&gt;Unix网络编程卷1&lt;/li&gt;
&lt;li&gt;UNIX网络编程卷2&lt;/li&gt;
&lt;li&gt;UNIX编程艺术&lt;/li&gt;
&lt;li&gt;UNIX Shell范例精解&lt;/li&gt;
&lt;li&gt;深入理解计算机系统，RandalE.Bryant/DavidO'Hallaron/ 2004-5-1 / 中国电力出版社&lt;/li&gt;
&lt;li&gt;现代操作系统（第3版），[美]AndrewS·Tanenbaum/ 2009-7 / 机械工业出版社&lt;/li&gt;
&lt;li&gt;Linux多线程服务端编程，陈硕/ 2013-1-15 / 电子工业出版社&lt;/li&gt;
&lt;li&gt;操作系统概念&lt;/li&gt;
&lt;li&gt;现代操作系统&lt;/li&gt;
&lt;li&gt;链接器和加载器&lt;/li&gt;
&lt;li&gt;自己动手写操作系统&lt;/li&gt;
&lt;li&gt;操作系统设计与实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8cc2850&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org8cc2850&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;10.2&lt;/span&gt; Window 操作系统&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Windows操作系统原理&lt;/li&gt;
&lt;li&gt;Inside Windows 2000&lt;/li&gt;
&lt;li&gt;深入解析Windows操作系统&lt;/li&gt;
&lt;li&gt;天书夜读：从汇编语言到Windows内核编程&lt;/li&gt;
&lt;li&gt;windows程序设计&lt;/li&gt;
&lt;li&gt;WINDOWS核心编程&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1da5720&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1da5720&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;10.3&lt;/span&gt; Linux/unix内核源代码和驱动程序&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Linux内核设计与实现&lt;/li&gt;
&lt;li&gt;LINUX内核源代码情景分析&lt;/li&gt;
&lt;li&gt;深入理解LINUX内核&lt;/li&gt;
&lt;li&gt;Linux内核完全注释&lt;/li&gt;
&lt;li&gt;Linux设备驱动程序&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1cdb12f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1cdb12f&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;10.4&lt;/span&gt; 编译原理&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-10-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;编译原理(清华第2版)&lt;/li&gt;
&lt;li&gt;编译原理及实践&lt;/li&gt;
&lt;li&gt;编译原理:原则,技术和工具&lt;/li&gt;
&lt;li&gt;现代编译原理-C语言描述&lt;/li&gt;
&lt;li&gt;高级编译器设计与实现&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9da0d9b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9da0d9b&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;11&lt;/span&gt; 其他&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-11&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4ce1732&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org4ce1732&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;11.1&lt;/span&gt; 人物传记&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;褚时健传&lt;/li&gt;
&lt;li&gt;史蒂夫乔布斯传&lt;/li&gt;
&lt;li&gt;浪潮之巅-吴军&lt;/li&gt;
&lt;li&gt;遥远的救世主-豆豆&lt;/li&gt;
&lt;li&gt;颠覆者-周鸿祎自传&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org08297d2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org08297d2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;11.2&lt;/span&gt; 鸡汤书&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-11-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;《鬼谷子》&lt;/li&gt;
&lt;li&gt;《墨菲定律》&lt;/li&gt;
&lt;li&gt;《羊皮卷》&lt;/li&gt;
&lt;li&gt;《狼道》&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Rengui Zhao</name></author><category term="软件工程" /><category term="计算机书籍" /><summary type="html">1 计算机体系结构 计算机体系结构(张晨曦版) 计算机体系结构(量化研究方法) 2 计算机数学基础类 高等数学 线性代数 概率论与数理统计 离散数学及其应用(Discrete Mathematics and Its Applications) 离散数学教程(北大版) 什么是数学 具体数学：计算机科学基础 3 电子技术基础类 模拟电子技术(童诗白版) 数字逻辑与数字集成电路(清华版) 4 计算机组成原理 计算机组成原理 计算机组成-结构化方法 计算机组成与设计硬件/软件接口 微机原理与接口技术(陈光军版) Intel微处理器结构、编程与接口 编程卓越之道卷1 编程卓越之道卷2 编码的奥秘 5 计算机网络 图解HTTP，[日]上野宣/ 2014-4-15 / 人民邮电出版社 图解TCP/IP 计算机网络（第4版），[美]JamesF.Kurose/[美]KeithW.Ross/ 2009-11 / 机械工业出版社 TCP/IP详解（卷1/2/3），[美]W·RichardStevens/ 2000-4-1 / 机械工业出版社 计算机网络，谢希仁/ 电子工业出版社 CCNA/CCNP 用TCP/IP进行网际互联(第1/2/3卷) HTTP权威指南 《计算机网络 自顶向下》 6 数据结构与算法 数据结构(清华版) 数据结构与算法分析—C语言描述 编程珠玑 编程珠玑II 算法导论 计算机程序设计艺术卷1 计算机程序设计艺术卷2 计算机程序设计艺术卷3 大话数据结构，程杰/清华大学出版社 算法（第4版），塞奇威克(RobertSedgewick)/韦恩(KevinWayne)/ 2012-10-1 / 人民邮电出版社 算法导论（第3版），(美)科尔曼 著 殷建平 译/机械工业出版社，不适合初学者 数据结构与算法分析，[美]MarkAllenWeiss/ 2004-1-1 / 机械工业出版社 机器学习，周志华/清华大学出版社 机器学习实战，[美]Peter Harrington/人民邮电出版社 程序员代码面试指南：IT名企算法与数据结构题目最优解，左程云/ 2015-9 / 电子工业出版社 程序员的数学 7 code 软件工程(Software.Engineering) 软件工程：实践者的研究方法 深入浅出面向对象分析与设计 道法自然:面向对象实践指南 面向对象分析与设计 设计模式:可复用面向对象软件的基础 head first设计模式 软件架构的艺术 设计模式，刘伟/清华大学出版社 设计模式，[美]ErichGamma/RichardHelm/RalphJohnson/JohnVlissides/ 2000-9 / 机械工业出版社 重构—改善既有代码的设计 敏捷软件开发：原则、模式与实践 敏捷软件开发，[美]RobertC·Martin/ 2003-09-01 / 清华大学出版社 测试驱动开发 代码大全 2 程序设计实践 程序员修炼之道：从小工到专家 卓有成效的程序员 代码之美 人月神话 计算机程序的构造和解释 观止-微软创建NT和未来的夺命狂奔 代码优化：有效使用内存[美]克里斯·卡巴斯基 编程高手箴言(梁肇新) 游戏之旅-我的编程感悟(云风) 剑指Offer，何海涛/ 2012-1 / 电子工业出版社 编程珠玑，[美]JonBentley/ 2008-10 / 人民邮电出版社 Head First 设计模式，[美]弗里曼/ 2007-9 / 中国电力出版社 编程之美——微软技术面试心得，电子工业出版社 大话设计模式，程杰/ 2007-12-1 / 清华大学出版社 《重构 改善既有代码的设计》 需要一些经验，拔高内容 程序员的自我修养:链接、装载与库 8 编程语言 8.1 汇编语言 汇编语言(王爽版) 80X86汇编语言程序设计教程 Intel汇编语言程序设计 IBM PC汇编语言程序设计(国外版) 高级汇编语言程序设计 保护方式下的80386及其编程 黑客反汇编揭秘 Windows环境下32 8.2 C/C++ C/C++语言程序设计 谭浩强 《C Primer Plus》(第5版）中文版 买新版 《C++ Primer》中文版，对C++语法有全面的了解 《C++ Primer Plus》 更适合零基础学习 The C programming language The C++ programming language，适合全面深入掌握C++。 C和指针 C专家教程 C陷阱与缺陷 c语言解惑 C标准库 C++标准程序库 你必须知道的495个C语言问题 C++编程思想2 Essential C++ C++程序设计语言 C++语言的设计和演化 Accelerated C++ Effective C++，这本书适合在面试之前突击C++。 Effective STL More Effective C++ Exceptional C++ More Exceptional C++ C++设计新思维 深度探索C++对象模型，深入了解C++对象的内部，比如虚函数的调用机制等。 C++沉思录 C++ Templates: The Complete Guide C++ FAQs 泛型编程与STL STL源码剖析 8.3 Java 《Java编程思想》（Thinking in Java） Java编程规范 《Java核心技术》卷1卷2 Effective Java，[美]JoshuaBloch/ 2009-1-1 / 机械工业出版社 深入理解Java虚拟机（第2版），周志明/ 2013-9-1 / 机械工业出版社 实战Java虚拟机，葛一鸣/ 2015-3 / 电子工业出版社出品方:博文视点 Java编程的逻辑，马俊昌/ 2018-1-1 / 机械工业出版社 Java并发编程实战，BrianGoetz/TimPeierls/JoshuaBloch/JosephBowbeer/DavidHolmes/DougLea/ 2012-2 / 机械工业出版社华章公司 Java并发编程的艺术，方腾飞/魏鹏/程晓明/ 2015-7-1 / 机械工业出版社 Java并发编程实战指南（核心篇），黄文海/ 2017-4 / 电子工业出版社出品方:博文视点 看透Spring MVC，韩路彪/ 2016-1-1 / 机械工业出版社 深入分析Java Web技术内幕，许令波/ 2014-8-1 / 电子工业出版社 Java核心技术（卷1，原书第10版），[美]凯.S.霍斯特曼（CayS.Horstmann）/ 2016-9 / 机械工业出版社 疯狂Java讲义，李刚/ 2008-10 / 电子工业出版社 《Spring实战》 《Spring Boot实战》 《Spring技术内幕》 很难 8.4 PHP 跟着兄弟学PHP 深入PHP-面向对象、模式与实践，[美]Matt Zandstra 著/人民邮电出版社 PHP核心技术与最佳实践，列旭松 陈文/机械工业出版社 PHP高级程序设计_模式、框架与测试 Learning PHP Design Patterns 8.5 Python 《Python核心编程》 《Python 8.6 Golang 《Go语言实战》 or《Go In Action》 8.7 前端技术 JavaScript 高级程序设计 JavaScript权威指南.第六版 深入浅出Nodejs 深入理解ES6 学习JavaScript数据结构与算法 数据结构与算法JavaScript描述 CSS权威指南-第三版 JavaScript+DOM编程艺术 9 数据库 9.1 数据库理论 数据库系统概念，AbrahamSilberschatz/HenryF.Korth/S.Sudarshan/ 2006-10-01 / 机械工业 9.2 Redis Redis 实战，JosiahL.Carlson/ 2015-10 / 人民邮电出版社 Redis 设计与实现，黄健宏/ 2014-6 / 机械工业出版社 9.3 MySQL MySQL必知必会，[英]BenForta/ 2009-1 / 人民邮电出版社，涵盖 《SQL必知必会》的内容 高性能MySQL，BaronSchwartz/PeterZaitsev/VadimTkachenko/JeremyD.Zawodny/ArjenLent/DerekJ.Ballin/ 2010年1月 / 电子工业出版社 MySQL技术内幕，姜承尧/ 2013-5 / 机械工业出版社 10 操作系统 10.1 Unix/Linux 操作系统 鸟哥的Linux私房菜（基础学习篇） 鸟哥的Linux私房菜（服务器架设篇） Unix/Linux编程实践教程，BruceMolay/杨宗源/黄海涛/ 2004-10-1 / 清华大学出版社 《Unix环境高级编程》 Linux程序设计 Unix网络编程卷1 UNIX网络编程卷2 UNIX编程艺术 UNIX Shell范例精解 深入理解计算机系统，RandalE.Bryant/DavidO'Hallaron/ 2004-5-1 / 中国电力出版社 现代操作系统（第3版），[美]AndrewS·Tanenbaum/ 2009-7 / 机械工业出版社 Linux多线程服务端编程，陈硕/ 2013-1-15 / 电子工业出版社 操作系统概念 现代操作系统 链接器和加载器 自己动手写操作系统 操作系统设计与实现 10.2 Window 操作系统 Windows操作系统原理 Inside Windows 2000 深入解析Windows操作系统 天书夜读：从汇编语言到Windows内核编程 windows程序设计 WINDOWS核心编程 10.3 Linux/unix内核源代码和驱动程序 Linux内核设计与实现 LINUX内核源代码情景分析 深入理解LINUX内核 Linux内核完全注释 Linux设备驱动程序 10.4 编译原理 编译原理(清华第2版) 编译原理及实践 编译原理:原则,技术和工具 现代编译原理-C语言描述 高级编译器设计与实现 11 其他 11.1 人物传记 褚时健传 史蒂夫乔布斯传 浪潮之巅-吴军 遥远的救世主-豆豆 颠覆者-周鸿祎自传 11.2 鸡汤书 《鬼谷子》 《墨菲定律》 《羊皮卷》 《狼道》</summary></entry><entry><title type="html">数据分析-学习笔记</title><link href="http://localhost:4000/python/2021/01/23/python-getting-started-tutorial/" rel="alternate" type="text/html" title="数据分析-学习笔记" /><published>2021-01-23T00:00:00+08:00</published><updated>2021-01-23T00:00:00+08:00</updated><id>http://localhost:4000/python/2021/01/23/python-getting-started-tutorial</id><content type="html" xml:base="http://localhost:4000/python/2021/01/23/python-getting-started-tutorial/">&lt;div id=&quot;outline-container-orgfd27eca&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgfd27eca&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 学习准备&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb1ab7fc&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb1ab7fc&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 学习安排&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Linux 基础学习（阅读书籍推荐《鸟哥的Linux私房菜：基础学习篇》，也可以参考我写的小册子：&lt;a href=&quot;https://zhaorengui.github.io/linux/2018/08/06/using-debian/&quot;&gt;Debian GNU/Linux&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;数据分析&lt;/li&gt;
&lt;li&gt;实例&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge216653&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge216653&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 励志公式&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
1.01^365 = 37.78
0.99^365 = 0.03
&lt;/pre&gt;

&lt;p&gt;
积硅步以致千里，积怠惰以致深渊。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
1.02^365 = 1377.41                                                                                                                                                : 0.98^365 = 0.0006
&lt;/pre&gt;

&lt;p&gt;
只比你努力一点的人，其实已经甩你很远。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
1.01^3 * 0.99^2 &amp;lt; 1.01
&lt;/pre&gt;

&lt;p&gt;
三天打鱼，两天晒网，终将一无所获。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb801466&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb801466&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 认识操作系统(Operating System)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8d165dc&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8d165dc&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.1&lt;/span&gt; OS 作为接口的示意图&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-1&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/os-01.png&quot; alt=&quot;os-01.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4c66d20&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org4c66d20&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.2&lt;/span&gt; 不同应用领域主流 OS&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;桌面 OS
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;MacOS&lt;/li&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;服务器 OS
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Windows Server&lt;/li&gt;
&lt;li&gt;Linux::
安全稳定，占有率高&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;嵌入式 OS
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Windows SE::
基本上没人用了&lt;/li&gt;
&lt;li&gt;Linux::
主流&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;移动设备 OS
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;iOS&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb6147a3&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgb6147a3&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.3&lt;/span&gt; 虚拟机&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-3&quot;&gt;
&lt;p&gt;
虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;虚拟系统生成全新虚拟镜像，具有真实操作系统完全一样的功能。&lt;/li&gt;
&lt;li&gt;独立安装软件、保存数据，不对真正的操作系统产生任何影响。&lt;/li&gt;
&lt;li&gt;操作系统与虚拟操作系统能灵活切换。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0190ec9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org0190ec9&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.3.4&lt;/span&gt; Linux&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-3-4&quot;&gt;
&lt;p&gt;
略。了解更多关于 Linux 参考本站的 &lt;a href=&quot;https://zhaorengui.github.io/linux/2018/08/06/using-debian/&quot;&gt;Debian GNU/Linux&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org37522ae&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org37522ae&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.4&lt;/span&gt; 常用软件&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2702e83&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org2702e83&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.4.1&lt;/span&gt; Google Chrome&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-1&quot;&gt;
&lt;p&gt;
当下最流行的浏览器。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9d6c41b&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org9d6c41b&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;1.4.1.1&lt;/span&gt; 常用快捷键&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-1-4-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Windows 和 Linux
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
标签页和窗口快捷键 
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开新窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在无痕模式下打开新窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开新的标签页，并跳转到该标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;按标签页的关闭顺序重新打开先前关闭的标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到下一个打开的标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Tab 或 Ctrl + PgDn&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到上一个打开的标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + Tab 或 Ctrl + PgUp&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到特定标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + 1 到 Ctrl + 8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到最右侧的那个标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + 9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在当前标签页中打开主页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + Home&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开当前标签页浏览记录中记录的上一个页面&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + 向左箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开当前标签页浏览记录中记录的下一个页面&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + 向右箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;关闭当前标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + w 或 Ctrl + F4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;关闭当前窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + w 或 Alt + F4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;最小化当前窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + 空格键，然后按 n 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;最大化当前窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + 空格键，然后按 x 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;退出 Google Chrome&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + f，然后按 x 键&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Google Chrome 功能快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开 Chrome 菜单&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + f 或 Alt + e&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;显示或隐藏书签栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开书签管理器&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + o&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新标签页中打开“历史记录”页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + h&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新标签页中打开“下载内容”页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + j&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开 Chrome 任务管理器&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Shift + Esc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将焦点放置在 Chrome 工具栏中的第一项上&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Shift + Alt + t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将焦点放置在 Chrome 工具栏中最右侧的那一项上&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;F10&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将焦点移到未聚焦于的对话框（如果显示）或所有工具栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;F6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开查找栏搜索当前网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + f 或 F3&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到与查找栏中搜索字词相匹配的下一条内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + g&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到与查找栏中搜索字词相匹配的上一条内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + g&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开“开发者工具”&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + j 或 F12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开“清除浏览数据”选项&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + Delete&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新标签页中打开 Chrome 帮助中心&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;F1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用其他帐号登录或以访客身份浏览&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + m&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开反馈表单&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + Shift + i&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;开启光标浏览模式&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;F7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
地址栏快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用默认搜索引擎进行搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入搜索字词并按 Enter 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用其他搜索引擎进行搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入搜索引擎名称，然后按 Tab 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;为网站名称添加 www. 和 .com，然后在当前标签页中打开该网址&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入网站名称并按 Ctrl + Enter 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开新的标签页并执行  Google 搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入搜索字词并按 Alt + Enter 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到地址栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + l 或 Alt + d 或 F6&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;从页面中的任意位置搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + k 或 Ctrl + e&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;从地址栏中移除联想查询内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按向下箭头键以突出显示相应内容，然后按 Shift + Delete 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将光标移到地址栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + F5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
网页快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开选项以打印当前网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + p&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开选项以保存当前网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;重新加载当前网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;F5 或 Ctrl + r&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;重新加载当前网页（忽略缓存的内容）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Shift + F5 或 Ctrl + Shift + r&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;停止加载网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Esc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;浏览下一个可点击项&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;浏览上一个可点击项&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Shift + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用 Chrome 打开计算机中的文件&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Ctrl + o 键并选择文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;显示当前网页的&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;HTML 源代码（不可修改）	Ctrl + u&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将当前网页保存为书签&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将所有打开的标签页以书签的形式保存在新文件夹中&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Shift + d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;开启或关闭全屏模式&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;F11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;放大网页上的所有内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl 和 +&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;缩小网页上的所有内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl 和 -&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将网页上的所有内容恢复到默认大小&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;向下滚动网页，一次一个屏幕&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;空格键或 PgDn&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;向上滚动网页，一次一个屏幕&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Shift + 空格键或 PgUp&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;转到网页顶部&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;首页&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;转到网页底部&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;末尾&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在网页上水平滚动&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Shift 键并滚动鼠标滚轮&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将光标移到文本字段中的上一个字词起始处&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + 向左箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将光标移到下一个字词起始处&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + 向右箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;删除文本字段中的上一个字词&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + Backspace&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在当前标签页中打开主页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Alt + Home&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;重置页面缩放级别&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
鼠标快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在当前标签页中打开链接（仅限鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将链接拖到标签页中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新的后台标签页中打开链接&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Ctrl 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开链接，并跳转到该链接&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Ctrl + Shift 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开链接，并跳转到该链接（仅使用鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将链接拖到标签栏的空白区域&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新窗口中打开链接&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Shift 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新窗口中打开标签页（仅使用鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页拖出标签栏&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页移至当前窗口（仅限鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页拖到现有窗口中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页移回其原始位置&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;拖动标签页的同时按 Esc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将当前网页保存为书签&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将相应网址拖动到书签栏中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在网页上水平滚动&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Shift 键并滚动鼠标滚轮&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;下载链接目标&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Alt 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;显示浏览记录&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;右键点击“后退”箭头  返回，或者左键点住“后退”箭头；右键点击“前进”箭头  下一步，或者左键点住“前进”箭头 下一步&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在最大化模式和窗口模式之间切换&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;双击标签栏的空白区域&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;放大网页上的所有内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Ctrl 键并向上滚动鼠标滚轮&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;缩小网页上的所有内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Ctrl 键并向下滚动鼠标滚轮&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Mac
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
标签页和窗口快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开新窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在无痕模式下打开新窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + n&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开新的标签页，并跳转到该标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;按标签页的关闭顺序重新打开先前关闭的标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + t&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到下一个打开的标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + 向右箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到上一个打开的标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + 向左箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到特定标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + 1 到 ⌘ + 8&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到最后一个标签页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + 9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开当前标签页浏览记录中记录的上一个页面&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + [ 或 ⌘ + 向左箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开当前标签页浏览记录中记录的下一个页面&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + ] 或 ⌘ + 向右箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;关闭当前的标签页或弹出式窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + w&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;关闭当前窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + w&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;最小化窗口&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + m&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;隐藏 Google Chrome&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + h&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;退出 Google Chrome&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + q&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Google Chrome 功能快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;显示或隐藏书签栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开书签管理器&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + b&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新标签页中打开“设置”页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + ,&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新标签页中打开“历史记录”页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + y&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新标签页中打开“下载内容”页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + j&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开查找栏搜索当前网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + f&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到与查找栏中搜索字词相匹配的下一条内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + g&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到与查找栏中搜索字词相匹配的上一条内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + g&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开查找栏后，搜索选定文本&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + e&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开“开发者工具”&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + i&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开“清除浏览数据”选项&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + Delete&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用另一帐号登录、以访客身份浏览，或者访问付款和密码信息&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + m&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到主菜单栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + F2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将焦点移到未聚焦于的对话框（如果显示）或所有工具栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + 向上箭头或向下箭头&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;开启光标浏览模式&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;F7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
地址栏快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用默认搜索引擎进行搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入搜索字词并按 Enter 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用其他搜索引擎进行搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入搜索引擎名称，然后按 Tab 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;为网站名称添加  www. 和 .com，然后在当前标签页中打开该网址&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入网站名称并按 Ctrl + Enter 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;为网站名称添加  www. 和 .com，然后在新标签页中打开该网址&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入网站名称并按 Ctrl + Shift + Enter 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新的后台标签页中打开网站&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;输入网址并按 ⌘ + Enter 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;跳转到地址栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + l&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;从地址栏中移除联想查询内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按向下箭头键以突出显示相应内容，然后按 Shift + fn + Delete 键；在笔记本电脑上按 Forward Delete 或 fn-Delete 键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将光标移到地址栏&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Ctrl + F5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
网页快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开选项以打印当前网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + p&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开选项以保存当前网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + s&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开“页面设置”对话框&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + p&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;重新加载当前网页（忽略缓存的内容）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + r&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;停止加载网页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Esc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;浏览下一个可点击项&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;浏览上一个可点击项&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Shift + Tab&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;使用 Google Chrome 打开计算机中的文件&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 ⌘ + o 键并选择文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;显示当前网页的  HTML 源代码（不可修改）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + u&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开 JavaScript 控制台&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + j&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将当前网页保存为书签&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将所有打开的标签页以书签的形式保存在新文件夹中&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + d&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;开启或关闭全屏模式&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Ctrl + f&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;放大网页上的所有内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ 和 +&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;缩小网页上的所有内容&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ 和 -&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将网页上的所有内容恢复到默认大小&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + 0&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;向下滚动网页，一次一个屏幕&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;空格键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;向上滚动网页，一次一个屏幕&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Shift + 空格键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;搜索网络&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Option + f&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将光标移到文本字段中的上一个字词起始处&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Option + 向左箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将光标移到文本字段中的上一个字词后面&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Option + 向右箭头键&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;删除文本字段中的上一个字词&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Option + Delete&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在当前标签页中打开主页&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;⌘ + Shift + h&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;重置页面缩放级别&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Cmd + 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
鼠标快捷键
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;操作&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;快捷键&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在当前标签页中打开链接（仅限鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将链接拖到标签页中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新的后台标签页中打开链接&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 ⌘ 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开链接，并跳转到该链接&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 ⌘ + Shift 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;打开链接，并跳转到该链接（仅使用鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将链接拖到标签栏的空白区域&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新窗口中打开链接&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Shift 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;在新窗口中打开标签页（仅使用鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页拖出标签栏&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页移至当前窗口（仅限鼠标）&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页拖到现有窗口中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将标签页移回其原始位置&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;拖动标签页的同时按 Esc&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将当前网页保存为书签&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;将相应网址拖动到书签栏中&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;下载链接目标&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;按住 Option 键的同时点击链接&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;显示浏览记录&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;右键点击“后退”箭头 返回，或者左键点住“后退”箭头；右键点击“前进”箭头 下一步，或者左键点住“前进”箭头 下一步&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;将窗口高度最大化&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;双击标签栏的空白区域&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc4a5e77&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgc4a5e77&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.4.2&lt;/span&gt; Cygwin&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-1-4-2&quot;&gt;
&lt;p&gt;
Cygwin是一个可原生运行于Windows系统上的POSXI兼容环境。具体参见资料：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/56692626&quot;&gt;Cygwin是什么&lt;/a&gt;  
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orged41963&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orged41963&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;1.4.3&lt;/span&gt; IDE(Integrated Development Environment): PyCharm&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org89db8ea&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org89db8ea&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; Python 入门&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org899ac5e&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org899ac5e&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; Python 简介&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。&lt;/li&gt;
&lt;li&gt;官方宣布于 2020 年 1 月 1 日， 停止 Python 2 的更新。Python 2.7 被确定为最后一个 Python 2.x 版本。&lt;/li&gt;
&lt;li&gt;特点
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;易于学习、易于阅读、易于维护&lt;/li&gt;
&lt;li&gt;丰富的库，且是跨平台的，可移植&lt;/li&gt;
&lt;li&gt;可扩展&lt;/li&gt;
&lt;li&gt;可嵌入&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;官网：&lt;a href=&quot;https://www.python.org/&quot;&gt;https://www.python.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基础教程参考：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://www.w3school.com.cn/p.asp#python&quot;&gt;w3school&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.runoob.com/python3/python3-tutorial.html&quot;&gt;Python 3 菜鸟教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1ex411x7Em?from=search&amp;amp;seid=10686282289125873067&quot;&gt;Python从入门到精通教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1ex411x7Em?p=1&quot;&gt;bilibili：Python从入门到精通教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;入门练习：&lt;a href=&quot;https://learnxinyminutes.com/docs/python/&quot;&gt;https://learnxinyminutes.com/docs/python/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfe25e7e&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgfe25e7e&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; Python 环境搭建&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org90d1174&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org90d1174&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.2.1&lt;/span&gt; &lt;b&gt;Windows&lt;/b&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;打开 Python 官网后，下载 Windows 版本的 Python 软件包，一般就下载 “Windows installer (64-bit)”。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
安装时，注意勾选 Add Python 3.x to PATH，安装完成后，可以通过按 Win+R 键，输入 cmd 调出命令提示符，输入 python 来验证。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
// 查看 Python 版本
&amp;gt; python -V
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;菜单》打开IDLE(Python)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
在 Windows 设置环境变量,在命令提示框中(cmd) : 输入
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
path=%path%;C:\Python 
// 按下&quot;Enter&quot;。
注意: C:\Python 是Python的安装目录。
&lt;/pre&gt;

&lt;p&gt;
//
也可以参照 Python 3 菜鸟教程，通过右键点击&quot;计算机&quot;，然后点击&quot;属性&quot;来设置。
&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc46351f&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgc46351f&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.2.2&lt;/span&gt; &lt;b&gt;Unix &amp;amp; Linux&lt;/b&gt;&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
源码方式安装
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# tar -zxvf Python-3.6.1.tgz
# cd Python-3.6.1
# ./configure
# make &amp;amp;&amp;amp; make install
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;包管理工具安装
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Debian/Ubuntu
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo apt-get install python3
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
RedHat/CentOS
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo yum install python3
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Mac
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ brew install python3
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;环境变量配置
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
bash
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ vim ~/.bash_profile
PATH=&quot;$PATH:/usr/local/bin/python&quot; 
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
zsh(Mac)
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ vim ~/.zshrc
PATH=&quot;/usr/local/bin/python:$PATH&quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0b163d1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org0b163d1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.2.3&lt;/span&gt; 执行 Python 程序的三种方式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;解释器：python/python3&lt;/li&gt;
&lt;li&gt;交互式：ipython&lt;/li&gt;
&lt;li&gt;IDE：PyCharm&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc161c92&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc161c92&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; Python 基本语法&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd387858&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd387858&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.1&lt;/span&gt; 基础语法&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5640fb5&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org5640fb5&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.1.1&lt;/span&gt; 编码&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-3-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org352de91&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org352de91&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.1.2&lt;/span&gt; 标识符&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5dd99ab&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org5dd99ab&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.1.3&lt;/span&gt; 保留字&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8ef56a8&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org8ef56a8&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.1.4&lt;/span&gt; 注释&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org64f6adb&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org64f6adb&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.1.5&lt;/span&gt; 语法格式&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-3-1-5&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;行与缩进&lt;/li&gt;
&lt;li&gt;多行语句&lt;/li&gt;
&lt;li&gt;同一行显示多条语句&lt;/li&gt;
&lt;li&gt;空行&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf483c13&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgf483c13&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.1.6&lt;/span&gt; import 与 from&amp;#x2026;import&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc3319d8&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgc3319d8&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.1.7&lt;/span&gt; 命令行参数&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf7e3d25&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf7e3d25&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.2&lt;/span&gt; 基本数据类型&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-2&quot;&gt;
&lt;p&gt;
Python3 中有六个标准的数据类型：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Tuple&lt;/li&gt;
&lt;li&gt;Set&lt;/li&gt;
&lt;li&gt;Dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
其中，不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgca592ac&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgca592ac&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.2.1&lt;/span&gt; Number&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgefeb957&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgefeb957&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.2.2&lt;/span&gt; String&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org71dcd58&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org71dcd58&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.2.3&lt;/span&gt; List&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org046b784&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org046b784&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.2.4&lt;/span&gt; Tuple(元组)&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2ebb87b&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org2ebb87b&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.2.5&lt;/span&gt; Set(集合)&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org45dbb93&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org45dbb93&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.2.6&lt;/span&gt; Dictionary&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf1fd0f1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf1fd0f1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.3&lt;/span&gt; 运算符&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2b72592&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org2b72592&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.4&lt;/span&gt; 流程控制语句&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-4&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org3d50460&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org3d50460&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.3.4.1&lt;/span&gt; 练习题：输入某年某月某日，判断这一天是这一年的第几天？&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-3-4-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;-*- coding: utf-8 -*-&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;@Date   : 2021/02/10&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;@Time   : 19:30&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;@Author : zrg&lt;/span&gt;

&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#38656;&amp;#27714;:&amp;#36755;&amp;#20837;&amp;#26576;&amp;#24180;&amp;#26576;&amp;#26376;&amp;#26576;&amp;#26085;&amp;#65292;&amp;#21028;&amp;#26029;&amp;#36825;&amp;#19968;&amp;#22825;&amp;#26159;&amp;#36825;&amp;#19968;&amp;#24180;&amp;#30340;&amp;#31532;&amp;#20960;&amp;#22825;&amp;#65311;&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#24605;&amp;#36335;:&amp;#20197;5&amp;#26376;20&amp;#26085;&amp;#20026;&amp;#20363;&amp;#65292;&amp;#24212;&amp;#35813;&amp;#20808;&amp;#25226;&amp;#21069;&amp;#22235;&amp;#20010;&amp;#26376;&amp;#30340;&amp;#21152;&amp;#36215;&amp;#26469;&amp;#65292;&amp;#28982;&amp;#21518;&amp;#20877;&amp;#21152;&amp;#19978;20&amp;#22825;&amp;#21363;&amp;#26412;&amp;#24180;&amp;#30340;&amp;#31532;&amp;#20960;&amp;#22825;&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#29305;&amp;#27530;&amp;#24773;&amp;#20917;: &amp;#22914;&amp;#26524;&amp;#24180;&amp;#20221;&amp;#20026;&amp;#38384;&amp;#24180;&amp;#19988;&amp;#36755;&amp;#20837;&amp;#26376;&amp;#20221;&amp;#22823;&amp;#20110;2&amp;#26102;&amp;#38656;&amp;#32771;&amp;#34385;&amp;#22810;&amp;#21152;&amp;#19968;&amp;#22825;&lt;/span&gt;

&lt;span style=&quot;color: #FF8C00;&quot;&gt;year&lt;/span&gt; = &lt;span style=&quot;color: #FF1493;&quot;&gt;int&lt;/span&gt;(&lt;span style=&quot;color: #FF1493;&quot;&gt;input&lt;/span&gt;(&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;Year:&quot;&lt;/span&gt;))
&lt;span style=&quot;color: #FF8C00;&quot;&gt;month&lt;/span&gt; = &lt;span style=&quot;color: #FF1493;&quot;&gt;int&lt;/span&gt;(&lt;span style=&quot;color: #FF1493;&quot;&gt;input&lt;/span&gt;(&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;Month:&quot;&lt;/span&gt;))
&lt;span style=&quot;color: #FF8C00;&quot;&gt;day&lt;/span&gt; = &lt;span style=&quot;color: #FF1493;&quot;&gt;int&lt;/span&gt;(&lt;span style=&quot;color: #FF1493;&quot;&gt;input&lt;/span&gt;(&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;Day:&quot;&lt;/span&gt;))

&lt;span style=&quot;color: #FF8C00;&quot;&gt;sum_day&lt;/span&gt; = 0 &lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#31532;&amp;#20960;&amp;#22825;&lt;/span&gt;
&lt;span style=&quot;color: #FF8C00;&quot;&gt;leap_year&lt;/span&gt; = 0 &lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#38384;&amp;#24180;&lt;/span&gt;

&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#20351;&amp;#29992;&amp;#20803;&amp;#32452;&amp;#23450;&amp;#20041;&amp;#22825;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#22914;&amp;#26524;&amp;#36755;&amp;#20837;&amp;#30340;&amp;#26376;&amp;#20221;&amp;#26159;1&amp;#26376;&amp;#20221;&amp;#65292;&amp;#21017;&amp;#30452;&amp;#25509;&amp;#35745;&amp;#31639;day&amp;#21363;&amp;#21487;&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#22914;&amp;#26524;&amp;#36755;&amp;#20837;&amp;#30340;&amp;#26376;&amp;#20221;&amp;#26159;2&amp;#26376;&amp;#20221;&amp;#65292;&amp;#21017;&amp;#35201;&amp;#20808;&amp;#35745;&amp;#31639;&amp;#20986;1&amp;#26376;&amp;#20221;&amp;#30340;&amp;#22825;&amp;#25968;&amp;#65292;&amp;#21363;&amp;#20026;31&amp;#22825;&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#20197;&amp;#27492;&amp;#31867;&amp;#25512;&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;1  2   3   4   5    6    7    8    9    10   11   12&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334&lt;/span&gt;
&lt;span style=&quot;color: #FF8C00;&quot;&gt;months&lt;/span&gt; = (0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334)

&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#26681;&amp;#25454;&amp;#36755;&amp;#20837;&amp;#30340;&amp;#26376;&amp;#20221;&amp;#65292;&amp;#35745;&amp;#31639;&amp;#20986;&amp;#21069;&amp;#20960;&amp;#20010;&amp;#26376;&amp;#30340;&amp;#22825;&amp;#25968;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;if&lt;/span&gt; 0 &amp;lt; month &amp;lt;= 12:
    &lt;span style=&quot;color: #FF8C00;&quot;&gt;sum_day&lt;/span&gt; = months[month - 1]
&lt;span style=&quot;color: #FF1493;&quot;&gt;else&lt;/span&gt;:
    &lt;span style=&quot;color: #FF1493;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;&amp;#36755;&amp;#20837;&amp;#30340;&amp;#26376;&amp;#20221;&amp;#26377;&amp;#35823;&quot;&lt;/span&gt;)

&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#21028;&amp;#26029;&amp;#26159;&amp;#21542;&amp;#20026;&amp;#38384;&amp;#24180;:&lt;/span&gt;
&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;1.&amp;#33021;&amp;#34987;400&amp;#25972;&amp;#38500; &amp;#25110;&amp;#32773;&amp;#26159; 2.&amp;#33021;&amp;#34987;4&amp;#25972;&amp;#38500;&amp;#24182;&amp;#19988;&amp;#19981;&amp;#33021;&amp;#34987;100&amp;#25972;&amp;#38500;&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;if&lt;/span&gt; year % 400 == 0 &lt;span style=&quot;color: #FF1493;&quot;&gt;or&lt;/span&gt; (year % 4 == 0 &lt;span style=&quot;color: #FF1493;&quot;&gt;and&lt;/span&gt; year % 100 != 0):
    &lt;span style=&quot;color: #FF8C00;&quot;&gt;leap_year&lt;/span&gt; = 1

&lt;span style=&quot;color: #8B8878;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #8B8878;&quot;&gt;&amp;#21028;&amp;#26029;&amp;#22914;&amp;#26524;&amp;#26159;&amp;#38384;&amp;#24180;&amp;#24182;&amp;#19988;&amp;#36755;&amp;#20837;&amp;#30340;&amp;#26376;&amp;#20221;&amp;#22823;&amp;#20110;2&amp;#21017;&amp;#22312;&amp;#24635;&amp;#30340;&amp;#22825;&amp;#25968;&amp;#19978;&amp;#21152;1&lt;/span&gt;
&lt;span style=&quot;color: #FF1493;&quot;&gt;if&lt;/span&gt; leap_year == 1 &lt;span style=&quot;color: #FF1493;&quot;&gt;and&lt;/span&gt; month &amp;gt; 2:
    &lt;span style=&quot;color: #FF8C00;&quot;&gt;sum_day&lt;/span&gt; += day + 1
&lt;span style=&quot;color: #FF1493;&quot;&gt;else&lt;/span&gt;:
    &lt;span style=&quot;color: #FF8C00;&quot;&gt;sum_day&lt;/span&gt; += day

&lt;span style=&quot;color: #FF1493;&quot;&gt;print&lt;/span&gt;(&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;It is the {sum_day}th day.&quot;&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd7e4f6c&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd7e4f6c&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.5&lt;/span&gt; &lt;b&gt;迭代器与生成器&lt;/b&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf5223c9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf5223c9&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.6&lt;/span&gt; 函数&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc121311&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgc121311&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.7&lt;/span&gt; Python 数据结构&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org63e9e3a&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org63e9e3a&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.8&lt;/span&gt; 输入输出&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5da1e6d&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org5da1e6d&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.9&lt;/span&gt; 文件操作&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6d6ccd8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org6d6ccd8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt; Python 错误和异常&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org21621fe&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org21621fe&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt; Python 面向对象&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5e655c0&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org5e655c0&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.5.1&lt;/span&gt; 什么是面向对象？&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4b6a975&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org4b6a975&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.5.2&lt;/span&gt; 类和对象&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc369e14&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgc369e14&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.5.3&lt;/span&gt; 方法重写&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgbc6a5a4&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgbc6a5a4&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.5.4&lt;/span&gt; 继承&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org81d2841&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org81d2841&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.5.5&lt;/span&gt; 命名空间/作用域&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5ceec47&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5ceec47&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.6&lt;/span&gt; Python 标准库&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org09acf8e&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org09acf8e&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.1&lt;/span&gt; OS 模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org10b6814&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org10b6814&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.2&lt;/span&gt; 文件通配符：glob 模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org778a9c6&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org778a9c6&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.3&lt;/span&gt; 命令行参数：以链表形式存储于 sys 模块的 argv 变量&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge899a3b&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge899a3b&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.4&lt;/span&gt; 正则匹配：re模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org055f22d&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org055f22d&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.5&lt;/span&gt; 数学：math 模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge3e9388&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge3e9388&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.6&lt;/span&gt; 网络通信模块：urllib&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-6-6&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc09d89e&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgc09d89e&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.6.6.1&lt;/span&gt; socket&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4a84383&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org4a84383&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.6.6.2&lt;/span&gt; smtplib&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf14a901&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf14a901&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.7&lt;/span&gt; 多线程：_thread 和 threading 模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc1b826c&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgc1b826c&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.8&lt;/span&gt; datetime 模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org22472f0&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org22472f0&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.9&lt;/span&gt; 数据压缩：zlib，gzip，bz2，zipfile，和 tarfile 等模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1aa99f9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org1aa99f9&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.10&lt;/span&gt; 性能度量：timeit&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org31368df&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org31368df&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.11&lt;/span&gt; 测试模块：doctest模块&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org191f8ff&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org191f8ff&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.12&lt;/span&gt; XML&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge176472&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge176472&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.6.13&lt;/span&gt; JSON&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org133c989&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org133c989&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.7&lt;/span&gt; Python CGI 编程&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0259ba0&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0259ba0&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.8&lt;/span&gt; Python 数据库操作&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0d97c16&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org0d97c16&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.8.1&lt;/span&gt; SQL 入门&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-8-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0c5cbea&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org0c5cbea&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.8.1.1&lt;/span&gt; 简介&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-8-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;SQL 是用于访问和处理数据库的标准的计算机语言。&lt;/li&gt;
&lt;li&gt;&lt;b&gt;什么是 SQL？&lt;/b&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;SQL 指结构化查询语言&lt;/li&gt;
&lt;li&gt;SQL 使我们有能力访问数据库&lt;/li&gt;
&lt;li&gt;SQL 是一种 ANSI(美国国家标准化组织) 的标准计算机语言&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;SQL 能做什么？&lt;/b&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;SQL 面向数据库执行查询&lt;/li&gt;
&lt;li&gt;SQL 可从数据库取回数据&lt;/li&gt;
&lt;li&gt;SQL 可在数据库中插入新的记录&lt;/li&gt;
&lt;li&gt;SQL 可更新数据库中的数据&lt;/li&gt;
&lt;li&gt;SQL 可从数据库删除记录&lt;/li&gt;
&lt;li&gt;SQL 可创建新数据库&lt;/li&gt;
&lt;li&gt;SQL 可在数据库中创建新表&lt;/li&gt;
&lt;li&gt;SQL 可在数据库中创建存储过程&lt;/li&gt;
&lt;li&gt;SQL 可在数据库中创建视图&lt;/li&gt;
&lt;li&gt;SQL 可以设置表、存储过程和视图的权限&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RDBMS
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;RDBMS 指的是关系型数据库管理系统。&lt;/li&gt;
&lt;li&gt;RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server, IBM DB2, Oracle, MySQL 以及 Microsoft Access。&lt;/li&gt;
&lt;li&gt;RDBMS 中的数据存储在被称为表（tables）的数据库对象中。表是相关的数据项的集合，它由列和行组成。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgbc1d607&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgbc1d607&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.8.1.2&lt;/span&gt; SQL 语法&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-8-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;数据库表
&lt;br /&gt;
一个数据库通常包含一个或多个表。每个表由一个名字标识（例如“客户”或者“订单”）。表包含带有数据的记录（行）。
&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
SQL 语句
&lt;br /&gt;
在数据库上执行的大部分工作都由 SQL 语句完成。示例：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-sql&quot;&gt;&lt;span style=&quot;color: #FF1493;&quot;&gt;SELECT&lt;/span&gt; LastName &lt;span style=&quot;color: #FF1493;&quot;&gt;FROM&lt;/span&gt; Persons
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;注意事项：&lt;/b&gt;
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;SQL 对大小写不敏感！&lt;/li&gt;
&lt;li&gt;SQL 语句后面的分号？分号是在数据库系统中分隔每条 SQL 语句的标准方法，这样就可以在对服务器的相同请求中执行一条以上的语句。某些数据库系统要求在每条 SQL 命令的末端使用分号。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
SQL DML 和 DDL
&lt;br /&gt;
可以把 SQL 分为两个部分：数据操作语言 (DML) 和 数据定义语言 (DDL)。
&lt;br /&gt;
SQL (结构化查询语言)是用于执行查询的语法。但是 SQL 语言也包含用于更新、插入和删除记录的语法。
&lt;br /&gt;
查询和更新指令构成了 SQL 的 DML 部分：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;SELECT - 从数据库表中获取数据&lt;/li&gt;
&lt;li&gt;UPDATE - 更新数据库表中的数据&lt;/li&gt;
&lt;li&gt;DELETE - 从数据库表中删除数据&lt;/li&gt;
&lt;li&gt;INSERT INTO - 向数据库表中插入数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;br /&gt;
SQL 的数据定义语言 (DDL) 部分使我们有能力创建或删除表格。我们也可以定义索引（键），规定表之间的链接，以及施加表间的约束。如下所示：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;CREATE DATABASE - 创建新数据库&lt;/li&gt;
&lt;li&gt;ALTER DATABASE - 修改数据库&lt;/li&gt;
&lt;li&gt;CREATE TABLE - 创建新表&lt;/li&gt;
&lt;li&gt;ALTER TABLE - 变更（改变）数据库表&lt;/li&gt;
&lt;li&gt;DROP TABLE - 删除表&lt;/li&gt;
&lt;li&gt;CREATE INDEX - 创建索引（搜索键）&lt;/li&gt;
&lt;li&gt;DROP INDEX - 删除索引&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge1d082b&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orge1d082b&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.8.1.3&lt;/span&gt; SQL 语句&lt;/h5&gt;
&lt;div class=&quot;outline-text-5&quot; id=&quot;text-2-8-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;SELECT 语句&lt;/li&gt;
&lt;li&gt;DISTINCT&lt;/li&gt;
&lt;li&gt;WHERE 子句&lt;/li&gt;
&lt;li&gt;AND &amp;amp; OR 运算符&lt;/li&gt;
&lt;li&gt;ORDER BY 子句&lt;/li&gt;
&lt;li&gt;INSERT INTO 语句&lt;/li&gt;
&lt;li&gt;UPDATE 语句&lt;/li&gt;
&lt;li&gt;DELETE 语句&lt;/li&gt;
&lt;li&gt;TOP 子句&lt;/li&gt;
&lt;li&gt;LIKE 操作符和通配符&lt;/li&gt;
&lt;li&gt;IN 操作符&lt;/li&gt;
&lt;li&gt;BETWEEN 操作符&lt;/li&gt;
&lt;li&gt;Alias（别名）&lt;/li&gt;
&lt;li&gt;JOIN &amp;amp; INNER JOIN &amp;amp; LEFT JOIN &amp;amp; RIGHT JOIN &amp;amp; FULL JOIN&lt;/li&gt;
&lt;li&gt;UNION &amp;amp; UNION ALL&lt;/li&gt;
&lt;li&gt;SELECT INTO&lt;/li&gt;
&lt;li&gt;CREATE DATABASE 语句&lt;/li&gt;
&lt;li&gt;CREATE TABLE 语句&lt;/li&gt;
&lt;li&gt;约束 (Constraints)
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;NOT NULL&lt;/li&gt;
&lt;li&gt;UNIQUE&lt;/li&gt;
&lt;li&gt;PRIMARY KEY&lt;/li&gt;
&lt;li&gt;FOREIGN KEY&lt;/li&gt;
&lt;li&gt;CHECK&lt;/li&gt;
&lt;li&gt;DEFAULT&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;CREATE INDEX 语句&lt;/li&gt;
&lt;li&gt;DROP Index/Table/DataBase&lt;/li&gt;
&lt;li&gt;ALTER TABLE 语句&lt;/li&gt;
&lt;li&gt;VIEW（视图）&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7616066&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org7616066&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.8.1.4&lt;/span&gt; SQL 数据类型&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd9626c1&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgd9626c1&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.8.1.5&lt;/span&gt; SQL 函数&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd565563&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd565563&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.8.2&lt;/span&gt; MySQL&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-8-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc32ae3d&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;orgc32ae3d&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.8.2.1&lt;/span&gt; mysql-connector 驱动&lt;/h5&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org546a2fc&quot; class=&quot;outline-5&quot;&gt;
&lt;h5 id=&quot;org546a2fc&quot;&gt;&lt;span class=&quot;section-number-5&quot;&gt;2.8.2.2&lt;/span&gt; PyMySQL 驱动&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4edf30b&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org4edf30b&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.8.3&lt;/span&gt; MongoDB&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org68c781c&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org68c781c&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.9&lt;/span&gt; Python 常见 Web 框架&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-9&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9abd25e&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org9abd25e&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.9.1&lt;/span&gt; uWSGI&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge781279&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge781279&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.9.2&lt;/span&gt; Django&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org80982c1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org80982c1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.9.3&lt;/span&gt; Flask&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgce990a5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgce990a5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 使用 Python 数据分析&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org83c32c4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org83c32c4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;data science community：&lt;a href=&quot;https://www.kaggle.com/&quot;&gt;https://www.kaggle.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg,cfn</name></author><category term="python" /><category term="Python" /><category term="Python3" /><category term="数据分析" /><summary type="html">1 学习准备 1.1 学习安排 Linux 基础学习（阅读书籍推荐《鸟哥的Linux私房菜：基础学习篇》，也可以参考我写的小册子：Debian GNU/Linux） Python 数据分析 实例 1.2 励志公式 1.01^365 = 37.78 0.99^365 = 0.03</summary></entry><entry><title type="html">代码</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-4/" rel="alternate" type="text/html" title="代码" /><published>2020-10-06T00:00:00+08:00</published><updated>2020-10-06T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-4</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-4/">&lt;blockquote&gt;
  &lt;p&gt;设计精良的模块和设计糟糕的模块的唯一最大区别，就是对其他模块隐藏本模块内部数据和其他实现细节的程度。——Joshua Bloch&lt;/p&gt;

  &lt;p&gt;The single most important factor that distinguishes a well-designed module from a poorly designed one is the degree to which the module hides its internal data and otherimplementationdetails from other modules. —Joshua Bloch&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="软件工程" /><category term="Thinking" /><summary type="html">设计精良的模块和设计糟糕的模块的唯一最大区别，就是对其他模块隐藏本模块内部数据和其他实现细节的程度。——Joshua Bloch The single most important factor that distinguishes a well-designed module from a poorly designed one is the degree to which the module hides its internal data and otherimplementationdetails from other modules. —Joshua Bloch</summary></entry><entry><title type="html">代码</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-5/" rel="alternate" type="text/html" title="代码" /><published>2020-10-06T00:00:00+08:00</published><updated>2020-10-06T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-5</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-5/">&lt;blockquote&gt;
  &lt;p&gt;If you give someone a program, you will frustrate them for a day; if you teach them how to program, you will frustrate them for a lifetime. （如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你讲折磨他一辈子。） – 摘自程杰《大话数据结构》&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="软件工程" /><category term="Thinking" /><summary type="html">If you give someone a program, you will frustrate them for a day; if you teach them how to program, you will frustrate them for a lifetime. （如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你讲折磨他一辈子。） – 摘自程杰《大话数据结构》</summary></entry><entry><title type="html">编程</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/09/10/code-3/" rel="alternate" type="text/html" title="编程" /><published>2020-09-10T00:00:00+08:00</published><updated>2020-09-10T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/09/10/code-3</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/09/10/code-3/">&lt;blockquote&gt;
  &lt;p&gt;每个人都应该学习一门编程语言。学习编程教你如何思考，就像学法律一样。学法律并不一定要为了做律师，但法律教你一种思考方式。学习编程也是一样，我把计算机科学看成是基础教育，每个人都应该花1年时间学习编程。——史蒂夫·乔布斯（Steven Paul Jobs）&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="软件工程" /><category term="Thinking" /><summary type="html">每个人都应该学习一门编程语言。学习编程教你如何思考，就像学法律一样。学法律并不一定要为了做律师，但法律教你一种思考方式。学习编程也是一样，我把计算机科学看成是基础教育，每个人都应该花1年时间学习编程。——史蒂夫·乔布斯（Steven Paul Jobs）</summary></entry><entry><title type="html">重构</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/25/code-2/" rel="alternate" type="text/html" title="重构" /><published>2020-08-25T00:00:00+08:00</published><updated>2020-08-25T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/25/code-2</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/25/code-2/">&lt;blockquote&gt;
  &lt;p&gt;Interestingly, if programmers work with a substantial portion of the code, rather than just a few lines, the chance of making acorrect modification improves.
Specifically, as the number of lines changed increases from one to five lines, the chance of making a bad change increases. After that, the chance of making a bad change decreases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/thinking-1.png&quot; alt=&quot;The number of code line&quot; /&gt;&lt;/p&gt;</content><author><name>zrg</name></author><category term="软件工程" /><category term="Thinking" /><summary type="html">Interestingly, if programmers work with a substantial portion of the code, rather than just a few lines, the chance of making acorrect modification improves. Specifically, as the number of lines changed increases from one to five lines, the chance of making a bad change increases. After that, the chance of making a bad change decreases.</summary></entry><entry><title type="html">Docker Notes</title><link href="http://localhost:4000/docker/2020/08/12/docker-notes/" rel="alternate" type="text/html" title="Docker Notes" /><published>2020-08-12T00:00:00+08:00</published><updated>2020-08-12T00:00:00+08:00</updated><id>http://localhost:4000/docker/2020/08/12/docker-notes</id><content type="html" xml:base="http://localhost:4000/docker/2020/08/12/docker-notes/">&lt;p&gt;
My email address: zrg1390556486@gmail.com
&lt;/p&gt;

&lt;div id=&quot;outline-container-org3e12039&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3e12039&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 简介 Introduction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdc71ad2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdc71ad2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 什么是 Docker？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！
无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdb422aa&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdb422aa&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 为什么要使用 Docker?&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;更高效的利用系统资源&lt;/li&gt;
&lt;li&gt;更快速的启动时间&lt;/li&gt;
&lt;li&gt;一致的运行环境&lt;/li&gt;
&lt;li&gt;持续交付和部署&lt;/li&gt;
&lt;li&gt;更轻松的迁移&lt;/li&gt;
&lt;li&gt;更轻松的维护和扩展&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
对比传统虚拟机总结
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;特性&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;容器&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;启动&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;秒级&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;硬盘使用&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 MB&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;性能&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;接近原生&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;弱于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;系统支持量&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org61fe82d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org61fe82d&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 基本概念&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
镜像(Image)
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Docker 镜像，就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。

Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
分层存储
Docker 利用了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
镜像构建时，会一层层构建，前一层是后一层的基础。在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
容器(Container)
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。

容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。

每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;仓库(Repository)
&lt;b&gt;Docker Registry&lt;/b&gt; &lt;br /&gt;
&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html&quot;&gt;Docker Registry&lt;/a&gt; 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。
&lt;br /&gt;
&lt;b&gt;Docker Registry 公开服&lt;/b&gt; &lt;br /&gt;
开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc879d25&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc879d25&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 常见操作&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5f955ac&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5f955ac&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; image&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;$ docker search ubuntu
$ docker pull ubuntu:18.04 // &amp;#33719;&amp;#21462;&amp;#38236;&amp;#20687;
$ docker images
$ docker image ls -a // &amp;#26174;&amp;#31034;&amp;#21253;&amp;#25324;&amp;#20013;&amp;#38388;&amp;#23618;&amp;#38236;&amp;#20687;&amp;#30340;&amp;#25152;&amp;#26377;&amp;#38236;&amp;#20687;
$ docker image rm xxx
$ docker history nginx:v2 // &amp;#26597;&amp;#30475;&amp;#38236;&amp;#20687;&amp;#20869;&amp;#30340;&amp;#21382;&amp;#21490;&amp;#35760;&amp;#24405;
$ docker system df // &amp;#26597;&amp;#30475;&amp;#38236;&amp;#20687;&amp;#12289;&amp;#23481;&amp;#22120;&amp;#12289;&amp;#25968;&amp;#25454;&amp;#21367;&amp;#25152;&amp;#21344;&amp;#29992;&amp;#30340;&amp;#31354;&amp;#38388;
$ docker image prune // &amp;#21024;&amp;#38500;&amp;#34394;&amp;#24748;&amp;#38236;&amp;#20687;(dangling image)&amp;#65288;&amp;#26082;&amp;#27809;&amp;#26377;&amp;#20179;&amp;#24211;&amp;#21517;&amp;#65292;&amp;#20063;&amp;#27809;&amp;#26377;&amp;#26631;&amp;#31614;&amp;#65292;&amp;#22343;&amp;#20026; &amp;lt;none&amp;gt;&amp;#65289;
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
// 修改、提交镜像（Modify and commit image）
$ docker run -t -i training/sinatra /bin/bash // 先使用下载的镜像启动容器。记下容器ID

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc7cdafb&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc7cdafb&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 参考资料 References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;Docker — 从入门到实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="docker" /><category term="Docker" /><summary type="html">My email address: zrg1390556486@gmail.com</summary></entry><entry><title type="html">重构</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/11/code-1/" rel="alternate" type="text/html" title="重构" /><published>2020-08-11T00:00:00+08:00</published><updated>2020-08-11T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/11/code-1</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/11/code-1/">&lt;blockquote&gt;
  &lt;p&gt;再庞大复杂的代码都可以通过重构❨refacting❩加以改善 ——Gerald Weinberg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注释不应当被用来为拙劣代码的存在而辩护。“不要为拙劣的代码编写文档–应当重写代码”（Kernighan and Plauger 1978）&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="软件工程" /><category term="Thinking" /><summary type="html">再庞大复杂的代码都可以通过重构❨refacting❩加以改善 ——Gerald Weinberg</summary></entry><entry><title type="html">使用 Shadowsocks + SwitchyOmega 科学上网实践</title><link href="http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn/" rel="alternate" type="text/html" title="使用 Shadowsocks + SwitchyOmega 科学上网实践" /><published>2019-06-23T00:00:00+08:00</published><updated>2019-06-23T00:00:00+08:00</updated><id>http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn</id><content type="html" xml:base="http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn/">&lt;p&gt;
本文内容仅作交流学习和查阅技术资料之用，请勿用于商业用途！如造成任何后果，本文作者概不负责。谢谢您的关注！
&lt;/p&gt;

&lt;div class=&quot;org-center&quot;&gt;
&lt;p&gt;
如果您有任何问题或建议，可以发送邮件到 zrg1390556487@gmail.com
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6cebaac&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6cebaac&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 服务端&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdae77d7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdae77d7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 服务部署第一步&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
首先，购买一台境外云服务器
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;搬瓦工&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vultr.com&quot;&gt;Vultr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd3325fa&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgd3325fa&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 安装和配置 Shadowsocks&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装 pip
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
// CentOS
# yum install python-pip
&lt;/pre&gt;

&lt;p&gt;
或者:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;
# python get-pip.py
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
安装及配置 shadowsocks
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
// 使用 pip 安装 shadowsocks
# pip install shadowsocks
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
// 也可以选择自动安装脚本
&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/zhaorengui/article/blob/master/network/install-shadowsocks.sh&quot;&gt;install-shadowsocks.sh&lt;/a&gt;
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
// 配置 shadowsocks
# vim /etc/shadowsocks.json
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;{
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;server&quot;&lt;/span&gt;: &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;123.123.123.123&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;server_port&quot;&lt;/span&gt;: 8388,
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;local_address&quot;&lt;/span&gt;:&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:1080,
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;port_password&quot;&lt;/span&gt;:{
          &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;9001&quot;&lt;/span&gt;:&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;password9001&quot;&lt;/span&gt;,
          &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;9002&quot;&lt;/span&gt;:&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;password9002&quot;&lt;/span&gt;,
          &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;9003&quot;&lt;/span&gt;:&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;password9003&quot;&lt;/span&gt;
     },
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;password&quot;&lt;/span&gt;: &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;password&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;method&quot;&lt;/span&gt;: &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:600
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-txt&quot;&gt;解释: 
- &quot;server&quot;: &quot;123.123.123.123&quot; :: 服务器 IP 地址
- &quot;server_port&quot;: 8388 :: 服务器端口号
- &quot;local_address&quot;:&quot;127.0.0.1&quot; :: 本地回环地址
- &quot;local_port&quot;:1080, :: 本地端口号
- &quot;port_password&quot; :: 映射端口和密码
- &quot;password&quot;: &quot;password&quot; :: 密码
- &quot;method&quot;: &quot;aes-256-cfb&quot; :: 加密方式，详细可参考 [[http://ucdok.com/project/generate_password.html][password tool]]
- &quot;timeout&quot;:600 :: 超时时间
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
配置自启动脚本
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# vim /etc/systemd/system/shadowsocks.service
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;[Unit]
&lt;span style=&quot;color: #FF8C00;&quot;&gt;Description&lt;/span&gt;=Shadowsocks

[Service]
&lt;span style=&quot;color: #FF8C00;&quot;&gt;TimeoutStartSec&lt;/span&gt;=0
&lt;span style=&quot;color: #FF8C00;&quot;&gt;ExecStart&lt;/span&gt;=/usr/bin/ssserver -c /etc/shadowsocks.json

[Install]
&lt;span style=&quot;color: #FF8C00;&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
设置 shadowsocks 自启动
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# systemctl enable shadowsocks
# systemctl start shadowsocks
# systemctl status shadowsocks -l
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge42c63b&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orge42c63b&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 使用 Docker 安装 Shadowsocks(推荐)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装 docker
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# yum install docker
# systemctl enable docker
# systemctl start docker
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
部署 Shadowsocks
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# docker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s &quot;-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open&quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7679133&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7679133&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 客户端&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
目前支持以下客户端进行连接：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Mac OS X&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;IOS(需要美区账号)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2cd4d24&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2cd4d24&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; Linux&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4897bb9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org4897bb9&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.1.1&lt;/span&gt; 安装、配置和使用 Linux Shadowsocks 客户端&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
Linux 系列
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Debian/Ubuntu:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo apt-get install python-pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Fedora/Centos:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo yum install python-setuptools
&lt;/pre&gt;

&lt;p&gt;
or
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo dnf install python-setuptools
$ sudo easy_install pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
OpenSUSE:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo zypper install python-pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Archlinux:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo pacman -S python-pip
sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
sslocal 是客户端软件，ssserver 是服务端软件，常见于 Linux 发行版，如 Ubuntu。sslocal 在 &lt;i&gt;usr/local/bin 目录下，也有其他发行版在 /usr/bin&lt;/i&gt; 目录下，可以使用 whereis 命令找到它的位置。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ whereis sslocal
&lt;/pre&gt;

&lt;p&gt;
sslocal: /usr/local/bin/sslocal
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
/etc/shadowsocks.json
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;{
&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;server-ip&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;server_port&quot;&lt;/span&gt;:8000,
&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;local_address&quot;&lt;/span&gt;: &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:1080,
&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;password&quot;&lt;/span&gt;:&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;your-password&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:600,
&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
// 启动
$ sudo sslocal -c /etc/shadowsocks.json
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
// 后台运行
$ sudo sslocal -c /etc/shadowsocks.json -d start
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
/etc/rc.local
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo vim /etc/rc.local
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;sudo sslocal -c /etc/shadowsocks.json -d start
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
// 检查是否正常工作
# sudo systemctl status rc-local.service
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8d0ac85&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8d0ac85&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.1.2&lt;/span&gt; 开启全局代理&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装及配置 polipo
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo apt install polipo
$ sudo vim /etc/polipo/config
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot; id=&quot;org4104971&quot;&gt;&lt;span style=&quot;color: #FF8C00;&quot;&gt;logSyslog&lt;/span&gt; = true
&lt;span style=&quot;color: #FF8C00;&quot;&gt;logFile&lt;/span&gt; = /var/log/polipo/polipo.log
&lt;span style=&quot;color: #FF8C00;&quot;&gt;proxyAddress&lt;/span&gt; = &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;
&lt;span style=&quot;color: #FF8C00;&quot;&gt;socksParentProxy&lt;/span&gt; = &lt;span style=&quot;color: #CDC673;&quot;&gt;&quot;127.0.0.1:1080&quot;&lt;/span&gt;
&lt;span style=&quot;color: #FF8C00;&quot;&gt;socksProxyType&lt;/span&gt; = socks5
&lt;span style=&quot;color: #FF8C00;&quot;&gt;chunkHighMark&lt;/span&gt; = 50331648
&lt;span style=&quot;color: #FF8C00;&quot;&gt;objectHighMark&lt;/span&gt; = 16384
&lt;span style=&quot;color: #FF8C00;&quot;&gt;serverMaxSlots&lt;/span&gt; = 64
&lt;span style=&quot;color: #FF8C00;&quot;&gt;serverSlots&lt;/span&gt; = 16
&lt;span style=&quot;color: #FF8C00;&quot;&gt;serverSlots1&lt;/span&gt; = 32
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
重启 polipo
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo systemctl restart polipo
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
设置全局变量 http_proxy and https_proxy
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ export http_proxy=&quot;http://127.0.0.1:8123/&quot;
$ export https_proxy=&quot;https://127.0.0.1:8123/&quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
测试
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ curl www.google.com
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfb11996&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgfb11996&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.1.3&lt;/span&gt; 问题解决&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
ShadowSocks start error: undefined symbol EVP_CIPHER_CTX_cleanup
[原因分析]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
openssl 1.1.0 &quot;EVP_CIPHER_CTX_cleanup&quot; is old.
&lt;/pre&gt;

&lt;p&gt;
[解决办法]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ vim /usr/local/lib/python3.5/dist-packages/shadowsocks/crypto/openssl.py
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot; id=&quot;org8170318&quot;&gt;VIM Command&amp;#65306;
:%s/cleanup/reset/
:x
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
not support &quot;chacha20&quot;
[解决办法]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ apt install m2crypto gcc -y
$ wget -N --no-check-certificate https://download.libsodium.org/libsodium/releases/libsodium-1.0.8.tar.gz
$ tar zxvf libsodium-1.0.8.tar.gz
$ cd libsodium-1.0.8
$ sudo ./configure
$ sudo make &amp;amp;&amp;amp; make install
$ sudo echo &quot;include ld.so.conf.d/*.conf&quot; &amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/usr/lib64&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/usr/local/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo ldconfig
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga1498ee&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orga1498ee&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; Windows&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga7b12ce&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orga7b12ce&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.2.1&lt;/span&gt; 下载&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-1&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Windows Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6305abb&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org6305abb&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.2.2&lt;/span&gt; 配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;解压
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111438.png&quot; alt=&quot;shadowsocks-20170123111438.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;运行
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111902.png&quot; alt=&quot;shadowsocks-20170123111902.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;配置
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111953.png&quot; alt=&quot;shadowsocks-20170123111953.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;设置代理
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123112126.png&quot; alt=&quot;shadowsocks-20170123112126.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgaaad34a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgaaad34a&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; Android&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd943297&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd943297&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.1&lt;/span&gt; 下载&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-1&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Android Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb86a1ce&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgb86a1ce&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.2&lt;/span&gt; 配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-2&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123141118.png&quot; alt=&quot;shadowsocks-20170123141118.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0c77f22&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0c77f22&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt; IOS&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;打开 Apple 应用市场, 搜索 &quot;shadowrocket&quot;。我记得不错的话，标价应该是：￥12&lt;/li&gt;
&lt;li&gt;配置
&lt;img src=&quot;http://localhost:4000/assets/images/ios-shadowrocket-01.jpeg&quot; alt=&quot;ios-shadowrocket-01.jpeg&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/ios-shadowrocket-02.jpeg&quot; alt=&quot;ios-shadowrocket-02.jpeg&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2d93777&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2d93777&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt; Mac OS X&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG&quot;&gt;https://github.com/shadowsocks/ShadowsocksX-NG&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgbcd70d5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbcd70d5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 浏览器插件：SwitchyOmega&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
该插件用于调节代理，方便快速切换代理上网模式。根据目前使用经验，Linux 必装，Windows 可选。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org6744523&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org6744523&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 下载&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org38d5146&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org38d5146&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; 配置&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;设置代理
&lt;img src=&quot;http://localhost:4000/assets/images/switchyomega-01.png&quot; alt=&quot;switchyomega-01.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
设定规则
&lt;img src=&quot;http://localhost:4000/assets/images/switchyomega-02.png&quot; alt=&quot;switchyomega-02.png&quot; /&gt;
&lt;b&gt;可选规则&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
rule:http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt
&lt;/pre&gt;

&lt;p&gt;
or
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdd59930&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdd59930&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/Shadowsocks&quot;&gt;https://zh.wikipedia.org/zh-hans/Shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://shadowsocks.com&quot;&gt;https://shadowsocks.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shadowsocks.org/&quot;&gt;http://shadowsocks.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html&quot;&gt;在 CentOS 7 下安装配置 shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client&quot;&gt;Install And Use Shadowsocks Command Line Client on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doub.io/ss-jc10/&quot;&gt;ShadowsocksR 客户端 小白使用教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kionf.com/2016/12/15/errornote-ss/&quot;&gt;ShadowSocks启动报错undefined symbol EVP_CIPHER_CTX_cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList&quot;&gt;SwitchyOmega&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doub.io/ss-jc25/&quot;&gt;IOS系统推荐几款支持Shadowsocks的代理软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jeyzhang.com/how-to-install-and-setup-shadowsocks-client-in-different-os.html&quot;&gt;各种系统下Shadowsocks客户端的安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/41378f4e14bc&quot;&gt;linux 配置shadowsocks代理全局代理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/guizaijianchic/article/details/78422811&quot;&gt;linux ubuntu下使用ss设置全局代理,命令行也走代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="network" /><category term="software" /><category term="Shadowsocks" /><category term="SwitchyOmega" /><summary type="html">本文内容仅作交流学习和查阅技术资料之用，请勿用于商业用途！如造成任何后果，本文作者概不负责。谢谢您的关注！ 如果您有任何问题或建议，可以发送邮件到 zrg1390556487@gmail.com 1 服务端 1.1 服务部署第一步 首先，购买一台境外云服务器 搬瓦工 DigitalOcean AWS Vultr 1.2 安装和配置 Shadowsocks 安装 pip // CentOS # yum install python-pip 或者: # curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot; # python get-pip.py 安装及配置 shadowsocks // 使用 pip 安装 shadowsocks # pip install shadowsocks // 也可以选择自动安装脚本 install-shadowsocks.sh // 配置 shadowsocks # vim /etc/shadowsocks.json { &quot;server&quot;: &quot;123.123.123.123&quot;, &quot;server_port&quot;: 8388, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:{ &quot;9001&quot;:&quot;password9001&quot;, &quot;9002&quot;:&quot;password9002&quot;, &quot;9003&quot;:&quot;password9003&quot; }, &quot;password&quot;: &quot;password&quot;, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;timeout&quot;:600 } 解释: - &quot;server&quot;: &quot;123.123.123.123&quot; :: 服务器 IP 地址 - &quot;server_port&quot;: 8388 :: 服务器端口号 - &quot;local_address&quot;:&quot;127.0.0.1&quot; :: 本地回环地址 - &quot;local_port&quot;:1080, :: 本地端口号 - &quot;port_password&quot; :: 映射端口和密码 - &quot;password&quot;: &quot;password&quot; :: 密码 - &quot;method&quot;: &quot;aes-256-cfb&quot; :: 加密方式，详细可参考 [[http://ucdok.com/project/generate_password.html][password tool]] - &quot;timeout&quot;:600 :: 超时时间 配置自启动脚本 # vim /etc/systemd/system/shadowsocks.service [Unit] Description=Shadowsocks [Service] TimeoutStartSec=0 ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json [Install] WantedBy=multi-user.target 设置 shadowsocks 自启动 # systemctl enable shadowsocks # systemctl start shadowsocks # systemctl status shadowsocks -l 1.3 使用 Docker 安装 Shadowsocks(推荐) 安装 docker # yum install docker # systemctl enable docker # systemctl start docker 部署 Shadowsocks # docker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s &quot;-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open&quot; 2 客户端 目前支持以下客户端进行连接： Linux Windows Mac OS X Android IOS(需要美区账号) 2.1 Linux 2.1.1 安装、配置和使用 Linux Shadowsocks 客户端 Linux 系列 Debian/Ubuntu: $ sudo apt-get install python-pip $ sudo pip install shadowsocks Fedora/Centos: $ sudo yum install python-setuptools or $ sudo dnf install python-setuptools $ sudo easy_install pip $ sudo pip install shadowsocks OpenSUSE: $ sudo zypper install python-pip $ sudo pip install shadowsocks Archlinux: $ sudo pacman -S python-pip sudo pip install shadowsocks sslocal 是客户端软件，ssserver 是服务端软件，常见于 Linux 发行版，如 Ubuntu。sslocal 在 usr/local/bin 目录下，也有其他发行版在 /usr/bin 目录下，可以使用 whereis 命令找到它的位置。 $ whereis sslocal sslocal: /usr/local/bin/sslocal /etc/shadowsocks.json { &quot;server&quot;:&quot;server-ip&quot;, &quot;server_port&quot;:8000, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;your-password&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot; } // 启动 $ sudo sslocal -c /etc/shadowsocks.json // 后台运行 $ sudo sslocal -c /etc/shadowsocks.json -d start /etc/rc.local $ sudo vim /etc/rc.local sudo sslocal -c /etc/shadowsocks.json -d start // 检查是否正常工作 # sudo systemctl status rc-local.service 2.1.2 开启全局代理 安装及配置 polipo $ sudo apt install polipo $ sudo vim /etc/polipo/config logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &quot;0.0.0.0&quot; socksParentProxy = &quot;127.0.0.1:1080&quot; socksProxyType = socks5 chunkHighMark = 50331648 objectHighMark = 16384 serverMaxSlots = 64 serverSlots = 16 serverSlots1 = 32 重启 polipo $ sudo systemctl restart polipo 设置全局变量 http_proxy and https_proxy $ export http_proxy=&quot;http://127.0.0.1:8123/&quot; $ export https_proxy=&quot;https://127.0.0.1:8123/&quot; 测试 $ curl www.google.com 2.1.3 问题解决 ShadowSocks start error: undefined symbol EVP_CIPHER_CTX_cleanup [原因分析] openssl 1.1.0 &quot;EVP_CIPHER_CTX_cleanup&quot; is old. [解决办法] $ vim /usr/local/lib/python3.5/dist-packages/shadowsocks/crypto/openssl.py VIM Command&amp;#65306; :%s/cleanup/reset/ :x not support &quot;chacha20&quot; [解决办法] $ apt install m2crypto gcc -y $ wget -N --no-check-certificate https://download.libsodium.org/libsodium/releases/libsodium-1.0.8.tar.gz $ tar zxvf libsodium-1.0.8.tar.gz $ cd libsodium-1.0.8 $ sudo ./configure $ sudo make &amp;amp;&amp;amp; make install $ sudo echo &quot;include ld.so.conf.d/*.conf&quot; &amp;gt; /etc/ld.so.conf $ sudo echo &quot;/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo echo &quot;/usr/lib64&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo echo &quot;/usr/local/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo ldconfig 2.2 Windows 2.2.1 下载 发送邮件至 zrg1390556487@gmail.com，索取 Windows Shadowsocks 客户端。 2.2.2 配置 解压 运行 配置 设置代理 2.3 Android 2.3.1 下载 发送邮件至 zrg1390556487@gmail.com，索取 Android Shadowsocks 客户端。 2.3.2 配置 2.4 IOS 打开 Apple 应用市场, 搜索 &quot;shadowrocket&quot;。我记得不错的话，标价应该是：￥12 配置 2.5 Mac OS X https://github.com/shadowsocks/ShadowsocksX-NG 3 浏览器插件：SwitchyOmega 该插件用于调节代理，方便快速切换代理上网模式。根据目前使用经验，Linux 必装，Windows 可选。 3.1 下载 发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。 3.2 配置 设置代理 设定规则 可选规则 rule:http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt or https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 4 参考资料 https://zh.wikipedia.org/zh-hans/Shadowsocks https://shadowsocks.com http://shadowsocks.org/ 在 CentOS 7 下安装配置 shadowsocks Install And Use Shadowsocks Command Line Client on Linux ShadowsocksR 客户端 小白使用教程 ShadowSocks启动报错undefined symbol EVP_CIPHER_CTX_cleanup SwitchyOmega IOS系统推荐几款支持Shadowsocks的代理软件 各种系统下Shadowsocks客户端的安装与配置 linux 配置shadowsocks代理全局代理 linux ubuntu下使用ss设置全局代理,命令行也走代理</summary></entry></feed>