<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/atom.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-01-24T23:16:01+08:00</updated><id>http://localhost:4000/atom.xml</id><title type="html">Knowledge Has No Limit</title><subtitle>Life doesn't just happen to you; you receive everything in your life based on what you've given. 生命中的一切都不是巧合，你得到什么，是源于你付出了什么。</subtitle><author><name>Zhao Rengui</name></author><entry><title type="html">代码</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-5/" rel="alternate" type="text/html" title="代码" /><published>2020-10-06T00:00:00+08:00</published><updated>2020-10-06T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-5</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-5/">&lt;blockquote&gt;
  &lt;p&gt;If you give someone a program, you will frustrate them for a day; if you teach them how to program, you will frustrate them for a lifetime. （如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你讲折磨他一辈子。） – 摘自程杰《大话数据结构》&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="Thinking" /><summary type="html">If you give someone a program, you will frustrate them for a day; if you teach them how to program, you will frustrate them for a lifetime. （如果你交给某人一个程序，你将折磨他一整天；如果你教某人如何编写程序，你讲折磨他一辈子。） – 摘自程杰《大话数据结构》</summary></entry><entry><title type="html">代码</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-4/" rel="alternate" type="text/html" title="代码" /><published>2020-10-06T00:00:00+08:00</published><updated>2020-10-06T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-4</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/10/06/code-4/">&lt;blockquote&gt;
  &lt;p&gt;设计精良的模块和设计糟糕的模块的唯一最大区别，就是对其他模块隐藏本模块内部数据和其他实现细节的程度。——Joshua Bloch&lt;/p&gt;

  &lt;p&gt;The single most important factor that distinguishes a well-designed module from a poorly designed one is the degree to which the module hides its internal data and otherimplementationdetails from other modules. —Joshua Bloch&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="Thinking" /><summary type="html">设计精良的模块和设计糟糕的模块的唯一最大区别，就是对其他模块隐藏本模块内部数据和其他实现细节的程度。——Joshua Bloch The single most important factor that distinguishes a well-designed module from a poorly designed one is the degree to which the module hides its internal data and otherimplementationdetails from other modules. —Joshua Bloch</summary></entry><entry><title type="html">编程</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/09/10/code-3/" rel="alternate" type="text/html" title="编程" /><published>2020-09-10T00:00:00+08:00</published><updated>2020-09-10T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/09/10/code-3</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/09/10/code-3/">&lt;blockquote&gt;
  &lt;p&gt;每个人都应该学习一门编程语言。学习编程教你如何思考，就像学法律一样。学法律并不一定要为了做律师，但法律教你一种思考方式。学习编程也是一样，我把计算机科学看成是基础教育，每个人都应该花1年时间学习编程。——史蒂夫·乔布斯（Steven Paul Jobs）&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="Thinking" /><summary type="html">每个人都应该学习一门编程语言。学习编程教你如何思考，就像学法律一样。学法律并不一定要为了做律师，但法律教你一种思考方式。学习编程也是一样，我把计算机科学看成是基础教育，每个人都应该花1年时间学习编程。——史蒂夫·乔布斯（Steven Paul Jobs）</summary></entry><entry><title type="html">重构</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/25/code-2/" rel="alternate" type="text/html" title="重构" /><published>2020-08-25T00:00:00+08:00</published><updated>2020-08-25T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/25/code-2</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/25/code-2/">&lt;blockquote&gt;
  &lt;p&gt;Interestingly, if programmers work with a substantial portion of the code, rather than just a few lines, the chance of making acorrect modification improves.
Specifically, as the number of lines changed increases from one to five lines, the chance of making a bad change increases. After that, the chance of making a bad change decreases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/thinking-1.png&quot; alt=&quot;The number of code line&quot; /&gt;&lt;/p&gt;</content><author><name>zrg</name></author><category term="Thinking" /><summary type="html">Interestingly, if programmers work with a substantial portion of the code, rather than just a few lines, the chance of making acorrect modification improves. Specifically, as the number of lines changed increases from one to five lines, the chance of making a bad change increases. After that, the chance of making a bad change decreases.</summary></entry><entry><title type="html">Docker Notes</title><link href="http://localhost:4000/docker/2020/08/12/docker-notes/" rel="alternate" type="text/html" title="Docker Notes" /><published>2020-08-12T00:00:00+08:00</published><updated>2020-08-12T00:00:00+08:00</updated><id>http://localhost:4000/docker/2020/08/12/docker-notes</id><content type="html" xml:base="http://localhost:4000/docker/2020/08/12/docker-notes/">&lt;p&gt;
My email address: zrg1390556486@gmail.com
&lt;/p&gt;

&lt;div id=&quot;outline-container-org3e12039&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org3e12039&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 简介 Introduction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdc71ad2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdc71ad2&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 什么是 Docker？&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！
无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdb422aa&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdb422aa&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 为什么要使用 Docker?&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;更高效的利用系统资源&lt;/li&gt;
&lt;li&gt;更快速的启动时间&lt;/li&gt;
&lt;li&gt;一致的运行环境&lt;/li&gt;
&lt;li&gt;持续交付和部署&lt;/li&gt;
&lt;li&gt;更轻松的迁移&lt;/li&gt;
&lt;li&gt;更轻松的维护和扩展&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
对比传统虚拟机总结
&lt;/p&gt;
&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;特性&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;容器&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;虚拟机&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;启动&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;秒级&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;分钟级&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;硬盘使用&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 MB&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般为 GB&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;性能&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;接近原生&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;弱于&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;系统支持量&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;单机支持上千个容器&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;一般几十个&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org61fe82d&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org61fe82d&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 基本概念&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
镜像(Image)
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Docker 镜像，就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。

Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
分层存储
Docker 利用了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt; 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
镜像构建时，会一层层构建，前一层是后一层的基础。在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
容器(Container)
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。

容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。

每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;仓库(Repository)
&lt;b&gt;Docker Registry&lt;/b&gt; &lt;br /&gt;
&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html&quot;&gt;Docker Registry&lt;/a&gt; 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。
&lt;br /&gt;
&lt;b&gt;Docker Registry 公开服&lt;/b&gt; &lt;br /&gt;
开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc879d25&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc879d25&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 常见操作&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5f955ac&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5f955ac&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; image&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;$ docker search ubuntu
$ docker pull ubuntu:18.04 // &amp;#33719;&amp;#21462;&amp;#38236;&amp;#20687;
$ docker images
$ docker image ls -a // &amp;#26174;&amp;#31034;&amp;#21253;&amp;#25324;&amp;#20013;&amp;#38388;&amp;#23618;&amp;#38236;&amp;#20687;&amp;#30340;&amp;#25152;&amp;#26377;&amp;#38236;&amp;#20687;
$ docker image rm xxx
$ docker history nginx:v2 // &amp;#26597;&amp;#30475;&amp;#38236;&amp;#20687;&amp;#20869;&amp;#30340;&amp;#21382;&amp;#21490;&amp;#35760;&amp;#24405;
$ docker system df // &amp;#26597;&amp;#30475;&amp;#38236;&amp;#20687;&amp;#12289;&amp;#23481;&amp;#22120;&amp;#12289;&amp;#25968;&amp;#25454;&amp;#21367;&amp;#25152;&amp;#21344;&amp;#29992;&amp;#30340;&amp;#31354;&amp;#38388;
$ docker image prune // &amp;#21024;&amp;#38500;&amp;#34394;&amp;#24748;&amp;#38236;&amp;#20687;(dangling image)&amp;#65288;&amp;#26082;&amp;#27809;&amp;#26377;&amp;#20179;&amp;#24211;&amp;#21517;&amp;#65292;&amp;#20063;&amp;#27809;&amp;#26377;&amp;#26631;&amp;#31614;&amp;#65292;&amp;#22343;&amp;#20026; &amp;lt;none&amp;gt;&amp;#65289;
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
// 修改、提交镜像（Modify and commit image）
$ docker run -t -i training/sinatra /bin/bash // 先使用下载的镜像启动容器。记下容器ID

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgc7cdafb&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc7cdafb&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 参考资料 References&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://yeasy.gitbooks.io/docker_practice/content/&quot;&gt;Docker — 从入门到实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Union_mount&quot;&gt;Union FS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Docker" /><summary type="html">My email address: zrg1390556486@gmail.com</summary></entry><entry><title type="html">重构</title><link href="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/11/code-1/" rel="alternate" type="text/html" title="重构" /><published>2020-08-11T00:00:00+08:00</published><updated>2020-08-11T00:00:00+08:00</updated><id>http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/11/code-1</id><content type="html" xml:base="http://localhost:4000/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/2020/08/11/code-1/">&lt;blockquote&gt;
  &lt;p&gt;再庞大复杂的代码都可以通过重构❨refacting❩加以改善 ——Gerald Weinberg&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;注释不应当被用来为拙劣代码的存在而辩护。“不要为拙劣的代码编写文档–应当重写代码”（Kernighan and Plauger 1978）&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>zrg</name></author><category term="Thinking" /><summary type="html">再庞大复杂的代码都可以通过重构❨refacting❩加以改善 ——Gerald Weinberg</summary></entry><entry><title type="html">使用 Shadowsocks + SwitchyOmega 科学上网</title><link href="http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn/" rel="alternate" type="text/html" title="使用 Shadowsocks + SwitchyOmega 科学上网" /><published>2019-06-23T00:00:00+08:00</published><updated>2019-06-23T00:00:00+08:00</updated><id>http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn</id><content type="html" xml:base="http://localhost:4000/network/software/2019/06/23/shadowsocks-switchyOmega-cn/">&lt;p&gt;
本文内容仅作交流学习和查阅技术资料之用，请勿用于商业用途！如造成任何后果，本文作者概不负责。谢谢您的关注！
&lt;/p&gt;

&lt;div class=&quot;org-center&quot;&gt;
&lt;p&gt;
如果您有任何问题或建议，可以发送邮件到 zrg1390556487@gmail.com
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-org6cebaac&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6cebaac&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 服务端&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdae77d7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgdae77d7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.1&lt;/span&gt; 服务部署第一步&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
首先，购买一台境外云服务器
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;搬瓦工&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com&quot;&gt;DigitalOcean&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.vultr.com&quot;&gt;Vultr&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd3325fa&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgd3325fa&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.2&lt;/span&gt; 安装和配置 Shadowsocks&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装 pip
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
// CentOS
# yum install python-pip
&lt;/pre&gt;

&lt;p&gt;
或者:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot;
# python get-pip.py
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
安装及配置 shadowsocks
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
// 使用 pip 安装 shadowsocks
# pip install shadowsocks
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
// 也可以选择自动安装脚本
&lt;/pre&gt;

&lt;p&gt;
&lt;a href=&quot;https://github.com/zhaorengui/article/blob/master/network/install-shadowsocks.sh&quot;&gt;install-shadowsocks.sh&lt;/a&gt;
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
// 配置 shadowsocks
# vim /etc/shadowsocks.json
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;{
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;server&quot;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;123.123.123.123&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;server_port&quot;&lt;/span&gt;: 8388,
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;local_address&quot;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:1080,
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;port_password&quot;&lt;/span&gt;:{
          &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;9001&quot;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password9001&quot;&lt;/span&gt;,
          &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;9002&quot;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password9002&quot;&lt;/span&gt;,
          &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;9003&quot;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password9003&quot;&lt;/span&gt;
     },
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password&quot;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;method&quot;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,
  &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:600
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-txt&quot;&gt;解释: 
- &quot;server&quot;: &quot;123.123.123.123&quot; :: 服务器 IP 地址
- &quot;server_port&quot;: 8388 :: 服务器端口号
- &quot;local_address&quot;:&quot;127.0.0.1&quot; :: 本地回环地址
- &quot;local_port&quot;:1080, :: 本地端口号
- &quot;port_password&quot; :: 映射端口和密码
- &quot;password&quot;: &quot;password&quot; :: 密码
- &quot;method&quot;: &quot;aes-256-cfb&quot; :: 加密方式，详细可参考 [[http://ucdok.com/project/generate_password.html][password tool]]
- &quot;timeout&quot;:600 :: 超时时间
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;
配置自启动脚本
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# vim /etc/systemd/system/shadowsocks.service
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;[Unit]
&lt;span style=&quot;color: #FD971F;&quot;&gt;Description&lt;/span&gt;=Shadowsocks

[Service]
&lt;span style=&quot;color: #FD971F;&quot;&gt;TimeoutStartSec&lt;/span&gt;=0
&lt;span style=&quot;color: #FD971F;&quot;&gt;ExecStart&lt;/span&gt;=/usr/bin/ssserver -c /etc/shadowsocks.json

[Install]
&lt;span style=&quot;color: #FD971F;&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
设置 shadowsocks 自启动
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# systemctl enable shadowsocks
# systemctl start shadowsocks
# systemctl status shadowsocks -l
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org5bb723e&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org5bb723e&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;1.3&lt;/span&gt; 使用 Docker 安装 Shadowsocks&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装 docker
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# yum install docker
# systemctl enable docker
# systemctl start docker
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
部署 Shadowsocks
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
# docker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s &quot;-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open&quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org7679133&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org7679133&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 客户端&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
目前支持以下客户端进行连接：
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Windows&lt;/li&gt;
&lt;li&gt;Mac OS X&lt;/li&gt;
&lt;li&gt;Android&lt;/li&gt;
&lt;li&gt;IOS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2cd4d24&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2cd4d24&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.1&lt;/span&gt; Linux&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org4897bb9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org4897bb9&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.1.1&lt;/span&gt; 安装、配置和使用 Linux Shadowsocks 客户端&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-1&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
Linux 系列
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Debian/Ubuntu:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo apt-get install python-pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Fedora/Centos:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo yum install python-setuptools
&lt;/pre&gt;

&lt;p&gt;
or
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo dnf install python-setuptools
$ sudo easy_install pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
OpenSUSE:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo zypper install python-pip
$ sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Archlinux:
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo pacman -S python-pip
sudo pip install shadowsocks
&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
sslocal 是客户端软件，ssserver 是服务端软件，常见于 Linux 发行版，如 Ubuntu。sslocal 在 &lt;i&gt;usr/local/bin 目录下，也有其他发行版在 /usr/bin&lt;/i&gt; 目录下，可以使用 whereis 命令找到它的位置。
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ whereis sslocal
&lt;/pre&gt;

&lt;p&gt;
sslocal: /usr/local/bin/sslocal
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
/etc/shadowsocks.json
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;{
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;server&quot;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;server-ip&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;server_port&quot;&lt;/span&gt;:8000,
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;local_address&quot;&lt;/span&gt;: &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:1080,
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;password&quot;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;your-password&quot;&lt;/span&gt;,
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:600,
&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;pre class=&quot;example&quot;&gt;
// 启动
$ sudo sslocal -c /etc/shadowsocks.json
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
// 后台运行
$ sudo sslocal -c /etc/shadowsocks.json -d start
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
/etc/rc.local
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo vim /etc/rc.local
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;sudo sslocal -c /etc/shadowsocks.json -d start
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
// 检查是否正常工作
# sudo systemctl status rc-local.service
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8d0ac85&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8d0ac85&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.1.2&lt;/span&gt; 开启全局代理&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
安装及配置 polipo
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo apt install polipo
$ sudo vim /etc/polipo/config
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot; id=&quot;org4104971&quot;&gt;&lt;span style=&quot;color: #FD971F;&quot;&gt;logSyslog&lt;/span&gt; = true
&lt;span style=&quot;color: #FD971F;&quot;&gt;logFile&lt;/span&gt; = /var/log/polipo/polipo.log
&lt;span style=&quot;color: #FD971F;&quot;&gt;proxyAddress&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;0.0.0.0&quot;&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;socksParentProxy&lt;/span&gt; = &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;127.0.0.1:1080&quot;&lt;/span&gt;
&lt;span style=&quot;color: #FD971F;&quot;&gt;socksProxyType&lt;/span&gt; = socks5
&lt;span style=&quot;color: #FD971F;&quot;&gt;chunkHighMark&lt;/span&gt; = 50331648
&lt;span style=&quot;color: #FD971F;&quot;&gt;objectHighMark&lt;/span&gt; = 16384
&lt;span style=&quot;color: #FD971F;&quot;&gt;serverMaxSlots&lt;/span&gt; = 64
&lt;span style=&quot;color: #FD971F;&quot;&gt;serverSlots&lt;/span&gt; = 16
&lt;span style=&quot;color: #FD971F;&quot;&gt;serverSlots1&lt;/span&gt; = 32
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
重启 polipo
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ sudo systemctl restart polipo
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
设置全局变量 http_proxy and https_proxy
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ export http_proxy=&quot;http://127.0.0.1:8123/&quot;
$ export https_proxy=&quot;https://127.0.0.1:8123/&quot;
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
测试
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ curl www.google.com
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgfb11996&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgfb11996&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.1.3&lt;/span&gt; 问题解决&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-1-3&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;&lt;p&gt;
ShadowSocks start error: undefined symbol EVP_CIPHER_CTX_cleanup
[原因分析]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
openssl 1.1.0 &quot;EVP_CIPHER_CTX_cleanup&quot; is old.
&lt;/pre&gt;

&lt;p&gt;
[解决办法]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ vim /usr/local/lib/python3.5/dist-packages/shadowsocks/crypto/openssl.py
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot; id=&quot;org8170318&quot;&gt;VIM Command&amp;#65306;
:%s/cleanup/reset/
:x
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
not support &quot;chacha20&quot;
[解决办法]
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
$ apt install m2crypto gcc -y
$ wget -N --no-check-certificate https://download.libsodium.org/libsodium/releases/libsodium-1.0.8.tar.gz
$ tar zxvf libsodium-1.0.8.tar.gz
$ cd libsodium-1.0.8
$ sudo ./configure
$ sudo make &amp;amp;&amp;amp; make install
$ sudo echo &quot;include ld.so.conf.d/*.conf&quot; &amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/usr/lib64&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo echo &quot;/usr/local/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf
$ sudo ldconfig
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga1498ee&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orga1498ee&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.2&lt;/span&gt; Windows&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org69002ed&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org69002ed&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.2.1&lt;/span&gt; 下载&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-1&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Windows Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org43dc3fe&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org43dc3fe&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.2.2&lt;/span&gt; 配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-2-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;解压
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111438.png&quot; alt=&quot;shadowsocks-20170123111438.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;运行
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111902.png&quot; alt=&quot;shadowsocks-20170123111902.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;配置
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123111953.png&quot; alt=&quot;shadowsocks-20170123111953.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;设置代理
&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123112126.png&quot; alt=&quot;shadowsocks-20170123112126.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgaaad34a&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgaaad34a&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.3&lt;/span&gt; Android&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org11292db&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org11292db&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.1&lt;/span&gt; 下载&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-1&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Android Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgca18096&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgca18096&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;2.3.2&lt;/span&gt; 配置&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-2-3-2&quot;&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;http://localhost:4000/assets/images/shadowsocks-20170123141118.png&quot; alt=&quot;shadowsocks-20170123141118.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0c77f22&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org0c77f22&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.4&lt;/span&gt; IOS&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;打开 Apple 应用市场, 搜索 &quot;shadowrocket&quot;。我记得不错的话，标价应该是：￥12&lt;/li&gt;
&lt;li&gt;配置
&lt;img src=&quot;http://localhost:4000/assets/images/ios-shadowrocket-01.jpeg&quot; alt=&quot;ios-shadowrocket-01.jpeg&quot; /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/ios-shadowrocket-02.jpeg&quot; alt=&quot;ios-shadowrocket-02.jpeg&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2d93777&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2d93777&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;2.5&lt;/span&gt; Mac OS X&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p&gt;
&lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG&quot;&gt;https://github.com/shadowsocks/ShadowsocksX-NG&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgbcd70d5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgbcd70d5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 浏览器插件：SwitchyOmega&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
该插件用于调节代理，方便快速切换代理上网模式。根据目前使用经验，Linux 必装，Windows 可选。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2898ff8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2898ff8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 下载&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;p&gt;
发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org81c1aa7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org81c1aa7&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; 配置&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;设置代理
&lt;img src=&quot;http://localhost:4000/assets/images/switchyomega-01.png&quot; alt=&quot;switchyomega-01.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
设定规则
&lt;img src=&quot;http://localhost:4000/assets/images/switchyomega-02.png&quot; alt=&quot;switchyomega-02.png&quot; /&gt;
&lt;b&gt;可选规则&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
rule:http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt
&lt;/pre&gt;

&lt;p&gt;
or
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt
&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgdd59930&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgdd59930&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/Shadowsocks&quot;&gt;https://zh.wikipedia.org/zh-hans/Shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://shadowsocks.com&quot;&gt;https://shadowsocks.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shadowsocks.org/&quot;&gt;http://shadowsocks.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://morning.work/page/2015-12/install-shadowsocks-on-centos-7.html&quot;&gt;在 CentOS 7 下安装配置 shadowsocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.linuxbabe.com/desktop-linux/how-to-install-and-use-shadowsocks-command-line-client&quot;&gt;Install And Use Shadowsocks Command Line Client on Linux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doub.io/ss-jc10/&quot;&gt;ShadowsocksR 客户端 小白使用教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kionf.com/2016/12/15/errornote-ss/&quot;&gt;ShadowSocks启动报错undefined symbol EVP_CIPHER_CTX_cleanup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList&quot;&gt;SwitchyOmega&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://doub.io/ss-jc25/&quot;&gt;IOS系统推荐几款支持Shadowsocks的代理软件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.jeyzhang.com/how-to-install-and-setup-shadowsocks-client-in-different-os.html&quot;&gt;各种系统下Shadowsocks客户端的安装与配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/41378f4e14bc&quot;&gt;linux 配置shadowsocks代理全局代理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/guizaijianchic/article/details/78422811&quot;&gt;linux ubuntu下使用ss设置全局代理,命令行也走代理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Shadowsocks" /><category term="SwitchyOmega" /><summary type="html">本文内容仅作交流学习和查阅技术资料之用，请勿用于商业用途！如造成任何后果，本文作者概不负责。谢谢您的关注！ 如果您有任何问题或建议，可以发送邮件到 zrg1390556487@gmail.com 1 服务端 1.1 服务部署第一步 首先，购买一台境外云服务器 搬瓦工 DigitalOcean AWS Vultr 1.2 安装和配置 Shadowsocks 安装 pip // CentOS # yum install python-pip 或者: # curl &quot;https://bootstrap.pypa.io/get-pip.py&quot; -o &quot;get-pip.py&quot; # python get-pip.py 安装及配置 shadowsocks // 使用 pip 安装 shadowsocks # pip install shadowsocks // 也可以选择自动安装脚本 install-shadowsocks.sh // 配置 shadowsocks # vim /etc/shadowsocks.json { &quot;server&quot;: &quot;123.123.123.123&quot;, &quot;server_port&quot;: 8388, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;port_password&quot;:{ &quot;9001&quot;:&quot;password9001&quot;, &quot;9002&quot;:&quot;password9002&quot;, &quot;9003&quot;:&quot;password9003&quot; }, &quot;password&quot;: &quot;password&quot;, &quot;method&quot;: &quot;aes-256-cfb&quot;, &quot;timeout&quot;:600 } 解释: - &quot;server&quot;: &quot;123.123.123.123&quot; :: 服务器 IP 地址 - &quot;server_port&quot;: 8388 :: 服务器端口号 - &quot;local_address&quot;:&quot;127.0.0.1&quot; :: 本地回环地址 - &quot;local_port&quot;:1080, :: 本地端口号 - &quot;port_password&quot; :: 映射端口和密码 - &quot;password&quot;: &quot;password&quot; :: 密码 - &quot;method&quot;: &quot;aes-256-cfb&quot; :: 加密方式，详细可参考 [[http://ucdok.com/project/generate_password.html][password tool]] - &quot;timeout&quot;:600 :: 超时时间 配置自启动脚本 # vim /etc/systemd/system/shadowsocks.service [Unit] Description=Shadowsocks [Service] TimeoutStartSec=0 ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json [Install] WantedBy=multi-user.target 设置 shadowsocks 自启动 # systemctl enable shadowsocks # systemctl start shadowsocks # systemctl status shadowsocks -l 1.3 使用 Docker 安装 Shadowsocks 安装 docker # yum install docker # systemctl enable docker # systemctl start docker 部署 Shadowsocks # docker run -dt --name ss -p 6443:6443 mritd/shadowsocks -s &quot;-s 0.0.0.0 -p 6443 -m aes-256-cfb -k test123 --fast-open&quot; 2 客户端 目前支持以下客户端进行连接： Linux Windows Mac OS X Android IOS 2.1 Linux 2.1.1 安装、配置和使用 Linux Shadowsocks 客户端 Linux 系列 Debian/Ubuntu: $ sudo apt-get install python-pip $ sudo pip install shadowsocks Fedora/Centos: $ sudo yum install python-setuptools or $ sudo dnf install python-setuptools $ sudo easy_install pip $ sudo pip install shadowsocks OpenSUSE: $ sudo zypper install python-pip $ sudo pip install shadowsocks Archlinux: $ sudo pacman -S python-pip sudo pip install shadowsocks sslocal 是客户端软件，ssserver 是服务端软件，常见于 Linux 发行版，如 Ubuntu。sslocal 在 usr/local/bin 目录下，也有其他发行版在 /usr/bin 目录下，可以使用 whereis 命令找到它的位置。 $ whereis sslocal sslocal: /usr/local/bin/sslocal /etc/shadowsocks.json { &quot;server&quot;:&quot;server-ip&quot;, &quot;server_port&quot;:8000, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;your-password&quot;, &quot;timeout&quot;:600, &quot;method&quot;:&quot;aes-256-cfb&quot; } // 启动 $ sudo sslocal -c /etc/shadowsocks.json // 后台运行 $ sudo sslocal -c /etc/shadowsocks.json -d start /etc/rc.local $ sudo vim /etc/rc.local sudo sslocal -c /etc/shadowsocks.json -d start // 检查是否正常工作 # sudo systemctl status rc-local.service 2.1.2 开启全局代理 安装及配置 polipo $ sudo apt install polipo $ sudo vim /etc/polipo/config logSyslog = true logFile = /var/log/polipo/polipo.log proxyAddress = &quot;0.0.0.0&quot; socksParentProxy = &quot;127.0.0.1:1080&quot; socksProxyType = socks5 chunkHighMark = 50331648 objectHighMark = 16384 serverMaxSlots = 64 serverSlots = 16 serverSlots1 = 32 重启 polipo $ sudo systemctl restart polipo 设置全局变量 http_proxy and https_proxy $ export http_proxy=&quot;http://127.0.0.1:8123/&quot; $ export https_proxy=&quot;https://127.0.0.1:8123/&quot; 测试 $ curl www.google.com 2.1.3 问题解决 ShadowSocks start error: undefined symbol EVP_CIPHER_CTX_cleanup [原因分析] openssl 1.1.0 &quot;EVP_CIPHER_CTX_cleanup&quot; is old. [解决办法] $ vim /usr/local/lib/python3.5/dist-packages/shadowsocks/crypto/openssl.py VIM Command&amp;#65306; :%s/cleanup/reset/ :x not support &quot;chacha20&quot; [解决办法] $ apt install m2crypto gcc -y $ wget -N --no-check-certificate https://download.libsodium.org/libsodium/releases/libsodium-1.0.8.tar.gz $ tar zxvf libsodium-1.0.8.tar.gz $ cd libsodium-1.0.8 $ sudo ./configure $ sudo make &amp;amp;&amp;amp; make install $ sudo echo &quot;include ld.so.conf.d/*.conf&quot; &amp;gt; /etc/ld.so.conf $ sudo echo &quot;/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo echo &quot;/usr/lib64&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo echo &quot;/usr/local/lib&quot; &amp;gt;&amp;gt; /etc/ld.so.conf $ sudo ldconfig 2.2 Windows 2.2.1 下载 发送邮件至 zrg1390556487@gmail.com，索取 Windows Shadowsocks 客户端。 2.2.2 配置 解压 运行 配置 设置代理 2.3 Android 2.3.1 下载 发送邮件至 zrg1390556487@gmail.com，索取 Android Shadowsocks 客户端。 2.3.2 配置 2.4 IOS 打开 Apple 应用市场, 搜索 &quot;shadowrocket&quot;。我记得不错的话，标价应该是：￥12 配置 2.5 Mac OS X https://github.com/shadowsocks/ShadowsocksX-NG 3 浏览器插件：SwitchyOmega 该插件用于调节代理，方便快速切换代理上网模式。根据目前使用经验，Linux 必装，Windows 可选。 3.1 下载 发送邮件至 zrg1390556487@gmail.com，索取 Mac OS X Shadowsocks 客户端。 3.2 配置 设置代理 设定规则 可选规则 rule:http://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt or https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt 4 参考资料 https://zh.wikipedia.org/zh-hans/Shadowsocks https://shadowsocks.com http://shadowsocks.org/ 在 CentOS 7 下安装配置 shadowsocks Install And Use Shadowsocks Command Line Client on Linux ShadowsocksR 客户端 小白使用教程 ShadowSocks启动报错undefined symbol EVP_CIPHER_CTX_cleanup SwitchyOmega IOS系统推荐几款支持Shadowsocks的代理软件 各种系统下Shadowsocks客户端的安装与配置 linux 配置shadowsocks代理全局代理 linux ubuntu下使用ss设置全局代理,命令行也走代理</summary></entry><entry><title type="html">Learning Markdown</title><link href="http://localhost:4000/software/2019/06/05/markdown/" rel="alternate" type="text/html" title="Learning Markdown" /><published>2019-06-05T00:00:00+08:00</published><updated>2019-06-05T00:00:00+08:00</updated><id>http://localhost:4000/software/2019/06/05/markdown</id><content type="html" xml:base="http://localhost:4000/software/2019/06/05/markdown/">&lt;h2 id=&quot;标题&quot;&gt;标题&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#,一级标题 
##,二级标题
###,三级标题 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;列表&quot;&gt;列表&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 有序列表 
2. 有序列表 
3. 无序列表
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;引用&quot;&gt;引用&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 有的人活着，他已经死了；有的人死了，他还活着
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;有的人活着，他已经死了；有的人死了，他还活着&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;图片&quot;&gt;图片&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![Google Logo](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot; alt=&quot;Google Logo&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;链接&quot;&gt;链接&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Google](https://www.google.com/)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://www.google.com/&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;分割线&quot;&gt;分割线&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;***
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;粗体斜体&quot;&gt;粗体/斜体&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;**作者**
*张三*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;
&lt;em&gt;张三&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;代码&quot;&gt;代码&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```sh
#/bin/sh
echo &quot;hello world&quot;
```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;区块标识&quot;&gt;区块标识&lt;/h2&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;这是一个区块
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;数学公式&quot;&gt;数学公式&lt;/h2&gt;
&lt;h3 id=&quot;上标下标与组合&quot;&gt;上标、下标与组合&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;上标符号，符号：^&lt;/li&gt;
  &lt;li&gt;下标符号，符号：_&lt;/li&gt;
  &lt;li&gt;组合符号，符号：{}
\(x^4\)&lt;/li&gt;
&lt;/ul&gt;

\[x_1\]

\[{16}_{8}O{2+}_{2}\]

&lt;h3 id=&quot;汉字字体与格式&quot;&gt;汉字、字体与格式&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;汉字形式，符号：\mbox{}&lt;/li&gt;
  &lt;li&gt;字体控制，符号：\displaystyle&lt;/li&gt;
  &lt;li&gt;下划线符号，符号：\underline&lt;/li&gt;
  &lt;li&gt;标签，符号\tag{数字}&lt;/li&gt;
  &lt;li&gt;上大括号，符号：\overbrace{算式}&lt;/li&gt;
  &lt;li&gt;下大括号，符号：\underbrace{算式}&lt;/li&gt;
  &lt;li&gt;上位符号，符号：\stacrel{上位符号}{基位符号}
\(V_{\mbox{初始}}\)&lt;/li&gt;
&lt;/ul&gt;

\[\displaystyle \frac{x+y}{y+z}\]

\[\underline{x+y}\]

\[\tag{11}\]

\[\overbrace{a+b+c+d}^{2.0}\]

\[a+\underbrace{b+c}_{1.0}+d\]

\[\vec{x}\stackrel{\mathrm{def}}{=}{x_1,\dots,x_n}\]

&lt;h3 id=&quot;占位符&quot;&gt;占位符&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;两个quad空格，符号：\qquad&lt;/li&gt;
  &lt;li&gt;quad空格，符号：\quad&lt;/li&gt;
  &lt;li&gt;大空格，符号\&lt;/li&gt;
  &lt;li&gt;中空格，符号:&lt;/li&gt;
  &lt;li&gt;小空格，符号\,&lt;/li&gt;
  &lt;li&gt;没有空格，符号``&lt;/li&gt;
  &lt;li&gt;紧贴，符号!
\(x \qquad y\)&lt;/li&gt;
&lt;/ul&gt;

\[x \quad y\]

\[x \ y\]

\[x : y\]

\[x , y\]

\[xy\]

\[x ! y\]

&lt;h3 id=&quot;定界符与组合&quot;&gt;定界符与组合&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;括号，符号：（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)&lt;/li&gt;
  &lt;li&gt;中括号，符号：[]&lt;/li&gt;
  &lt;li&gt;大括号，符号：{ }&lt;/li&gt;
  &lt;li&gt;自适应括号，符号：\left \right&lt;/li&gt;
  &lt;li&gt;组合公式，符号：{上位公式 \choose 下位公式}&lt;/li&gt;
  &lt;li&gt;组合公式，符号：{上位公式 \atop 下位公式}
\(（）\big(\big) \Big(\Big) \bigg(\bigg) \Bigg(\Bigg)\)&lt;/li&gt;
&lt;/ul&gt;

\[[x+y]\]

\[{x+y}\]

\[\left(x\right)$，$\left(x{yz}\right)\]

\[{n+1 \choose k}={n \choose k}+{n \choose k-1}\]

\[\sum_{k_0,k_1,\ldots&amp;gt;0 \atop k_0+k_1+\cdots=n}A_{k_0}A_{k_1}\cdots\]

&lt;h3 id=&quot;四则运算&quot;&gt;四则运算&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;加法运算，符号：+&lt;/li&gt;
  &lt;li&gt;减法运算，符号：-&lt;/li&gt;
  &lt;li&gt;加减运算，符号：\pm&lt;/li&gt;
  &lt;li&gt;减甲运算，符号：\mp&lt;/li&gt;
  &lt;li&gt;乘法运算，符号：\times&lt;/li&gt;
  &lt;li&gt;点乘运算，符号：\cdot&lt;/li&gt;
  &lt;li&gt;星乘运算，符号：\ast&lt;/li&gt;
  &lt;li&gt;除法运算，符号：\div&lt;/li&gt;
  &lt;li&gt;斜法运算，符号：/&lt;/li&gt;
  &lt;li&gt;分式表示，符号：\frac{分子}{分母}&lt;/li&gt;
  &lt;li&gt;分式表示，符号：{分子} \voer {分母}&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;绝对值表示，符号：&lt;/td&gt;
          &lt;td&gt; &lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

\[x+y=z\]

\[x-y=z\]

\[x \pm y=z\]

\[x \mp y=z\]

\[x \times y=z\]

\[x \cdot y=z\]

\[x \ast y=z\]

\[x \div y=z\]

\[x/y=z\]

\[\frac{x+y}{y+z}\]

\[{x+y} \over {y+z}\]

\[|x+y|\]

\[\overline{xyz}\]

&lt;h3 id=&quot;高级运算&quot;&gt;高级运算&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;平均数运算，符号：\overline{算式}&lt;/li&gt;
  &lt;li&gt;开二次方运算，符号：\sqrt&lt;/li&gt;
  &lt;li&gt;开方运算，符号：\sqrt[开方数]{被开方数}&lt;/li&gt;
  &lt;li&gt;对数运算，符号：\log&lt;/li&gt;
  &lt;li&gt;极限运算，符号：\lim&lt;/li&gt;
  &lt;li&gt;极限运算，符号：\displaystyle \lim&lt;/li&gt;
  &lt;li&gt;求和运算，符号：\sum&lt;/li&gt;
  &lt;li&gt;求和运算，符号：\displaystyle \sum&lt;/li&gt;
  &lt;li&gt;积分运算，符号：\int&lt;/li&gt;
  &lt;li&gt;积分运算，符号：\displaystyle \int&lt;/li&gt;
  &lt;li&gt;微分运算，符号：\partial&lt;/li&gt;
  &lt;li&gt;矩阵表示，符号：\begin{matrix} \end{matrix}
\(\overline{xyz}\)&lt;/li&gt;
&lt;/ul&gt;

\[\sqrt x\]

\[\sqrt[3]{x+y}\]

\[\log(x)\]

\[\lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}\]

\[\displaystyle \lim^{x \to \infty}_{y \to 0}{\frac{x}{y}}\]

\[\sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}\]

\[\displaystyle \sum^{x \to \infty}_{y \to 0}{\frac{x}{y}}\]

\[\int^{\infty}_{0}{xdx}\]

\[\displaystyle \int^{\infty}_{0}{xdx}\]

\[\frac{\partial x}{\partial y}\]

\[\left[ \begin{matrix} 1 &amp;amp;2 &amp;amp;\cdots &amp;amp;4\5 &amp;amp;6 &amp;amp;\cdots &amp;amp;8\\vdots &amp;amp;\vdots &amp;amp;\ddots &amp;amp;\vdots\13 &amp;amp;14 &amp;amp;\cdots &amp;amp;16\end{matrix} \right]\]

&lt;h3 id=&quot;逻辑运算&quot;&gt;逻辑运算&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;等于运算，符号：=&lt;/li&gt;
  &lt;li&gt;大于运算，符号：&amp;gt;&lt;/li&gt;
  &lt;li&gt;小于运算，符号：&amp;lt;&lt;/li&gt;
  &lt;li&gt;大于等于运算，符号：\geq&lt;/li&gt;
  &lt;li&gt;小于等于运算，符号：\leq&lt;/li&gt;
  &lt;li&gt;不等于运算，符号：\neq&lt;/li&gt;
  &lt;li&gt;不大于等于运算，符号：\ngeq&lt;/li&gt;
  &lt;li&gt;不大于等于运算，符号：\not\geq&lt;/li&gt;
  &lt;li&gt;不小于等于运算，符号：\nleq&lt;/li&gt;
  &lt;li&gt;不小于等于运算，符号：\not\leq&lt;/li&gt;
  &lt;li&gt;约等于运算，符号：\approx&lt;/li&gt;
  &lt;li&gt;恒定等于运算，符号：\equiv&lt;/li&gt;
&lt;/ul&gt;

\[x+y=z\]

\[x+y&amp;gt;z\]

\[x+y&amp;lt;z\]

\[x+y \geq z\]

\[x+y \leq z\]

\[x+y \neq z\]

\[x+y \ngeq z\]

\[x+y \not\geq z\]

\[x+y \nleq z\]

\[x+y \not\leq z\]

\[x+y \approx z\]

\[x+y \equiv z\]

&lt;h3 id=&quot;集合运算&quot;&gt;集合运算&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;属于运算，符号：\in&lt;/li&gt;
  &lt;li&gt;不属于运算，符号：\notin&lt;/li&gt;
  &lt;li&gt;不属于运算，符号：\not\in&lt;/li&gt;
  &lt;li&gt;子集运算，符号：\subset&lt;/li&gt;
  &lt;li&gt;子集运算，符号：\supset&lt;/li&gt;
  &lt;li&gt;真子集运算，符号：\subseteq&lt;/li&gt;
  &lt;li&gt;非真子集运算，符号：\subsetneq&lt;/li&gt;
  &lt;li&gt;真子集运算，符号：\supseteq&lt;/li&gt;
  &lt;li&gt;非真子集运算，符号：\supsetneq&lt;/li&gt;
  &lt;li&gt;非子集运算，符号：\not\subset&lt;/li&gt;
  &lt;li&gt;非子集运算，符号：\not\supset&lt;/li&gt;
  &lt;li&gt;并集运算，符号：\cup&lt;/li&gt;
  &lt;li&gt;交集运算，符号：\cap&lt;/li&gt;
  &lt;li&gt;差集运算，符号：\setminus&lt;/li&gt;
  &lt;li&gt;同或运算，符号：\bigodot&lt;/li&gt;
  &lt;li&gt;同与运算，符号：\bigotimes&lt;/li&gt;
  &lt;li&gt;实数集合，符号：\mathbb{R}&lt;/li&gt;
  &lt;li&gt;自然数集合，符号：\mathbb{Z}&lt;/li&gt;
  &lt;li&gt;空集，符号：\emptyset
\(x \in y\)&lt;/li&gt;
&lt;/ul&gt;

\[x \notin y\]

\[x \not\in y\]

\[x \subset y\]

\[x \supset y\]

\[x \subseteq y\]

\[x \subsetneq y\]

\[x \supseteq y\]

\[x \supsetneq y\]

\[x \not\subset y\]

\[x \not\supset y\]

\[x \cup y\]

\[x \cap y\]

\[x \setminus y\]

\[x \bigodot y\]

\[x \bigotimes y\]

\[\mathbb{R}\]

\[\mathbb{Z}\]

\[\emptyset\]

&lt;h3 id=&quot;数学符号&quot;&gt;数学符号&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;无穷，符号：\infty&lt;/li&gt;
  &lt;li&gt;虚数，符号：\imath&lt;/li&gt;
  &lt;li&gt;虚数，符号：\jmath&lt;/li&gt;
  &lt;li&gt;数学符号，符号\hat{a}&lt;/li&gt;
  &lt;li&gt;数学符号，符号\check{a}&lt;/li&gt;
  &lt;li&gt;数学符号，符号\breve{a}&lt;/li&gt;
  &lt;li&gt;数学符号，符号\tilde{a}&lt;/li&gt;
  &lt;li&gt;数学符号，符号\bar{a}&lt;/li&gt;
  &lt;li&gt;矢量符号，符号\vec{a}&lt;/li&gt;
  &lt;li&gt;数学符号，符号\acute{a}&lt;/li&gt;
  &lt;li&gt;数学符号，符号\grave{a}&lt;/li&gt;
  &lt;li&gt;数学符号，符号\mathring{a}&lt;/li&gt;
  &lt;li&gt;一阶导数符号，符号\dot{a}&lt;/li&gt;
  &lt;li&gt;二阶导数符号，符号\ddot{a}&lt;/li&gt;
  &lt;li&gt;上箭头，符号：\uparrow&lt;/li&gt;
  &lt;li&gt;上箭头，符号：\Uparrow&lt;/li&gt;
  &lt;li&gt;下箭头，符号：\downarrow&lt;/li&gt;
  &lt;li&gt;下箭头，符号：\Downarrow&lt;/li&gt;
  &lt;li&gt;左箭头，符号：\leftarrow&lt;/li&gt;
  &lt;li&gt;左箭头，符号：\Leftarrow&lt;/li&gt;
  &lt;li&gt;右箭头，符号：\rightarrow&lt;/li&gt;
  &lt;li&gt;右箭头，符号：\Rightarrow&lt;/li&gt;
  &lt;li&gt;底端对齐的省略号，符号：\ldots&lt;/li&gt;
  &lt;li&gt;中线对齐的省略号，符号：\cdots&lt;/li&gt;
  &lt;li&gt;竖直对齐的省略号，符号：\vdots&lt;/li&gt;
  &lt;li&gt;斜对齐的省略号，符号：\ddots
\(\infty\)&lt;/li&gt;
&lt;/ul&gt;

\[\imath\]

\[\jmath\]

\[\hat{a}\]

\[\check{a}\]

\[\breve{a}\]

\[\tilde{a}\]

\[\bar{a}\]

\[\vec{a}\]

\[\acute{a}\]

\[\grave{a}\]

\[\mathring{a}\]

\[\dot{a}\]

\[\ddot{a}\]

\[\uparrow\]

\[\Uparrow\]

\[\downarrow\]

\[\Downarrow\]

\[\leftarrow\]

\[\Leftarrow\]

\[\rightarrow\]

\[\Rightarrow\]

\[1,2,\ldots,n\]

\[x_1^2 + x_2^2 + \cdots + x_n^2\]

\[\vdots\]

\[\ddots\]

&lt;h3 id=&quot;希腊字母&quot;&gt;希腊字母&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;字母&lt;/th&gt;
      &lt;th&gt;实现&lt;/th&gt;
      &lt;th&gt;字母&lt;/th&gt;
      &lt;th&gt;实现&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;α&lt;/td&gt;
      &lt;td&gt;\alhpa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;β&lt;/td&gt;
      &lt;td&gt;\beta&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Γ&lt;/td&gt;
      &lt;td&gt;\Gamma&lt;/td&gt;
      &lt;td&gt;γ&lt;/td&gt;
      &lt;td&gt;\gamma&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Δ&lt;/td&gt;
      &lt;td&gt;\Delta&lt;/td&gt;
      &lt;td&gt;δ&lt;/td&gt;
      &lt;td&gt;\delta&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;E&lt;/td&gt;
      &lt;td&gt;E&lt;/td&gt;
      &lt;td&gt;ϵ&lt;/td&gt;
      &lt;td&gt;\epsilon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Z&lt;/td&gt;
      &lt;td&gt;Z&lt;/td&gt;
      &lt;td&gt;ζ&lt;/td&gt;
      &lt;td&gt;\zeta&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;H&lt;/td&gt;
      &lt;td&gt;H&lt;/td&gt;
      &lt;td&gt;η&lt;/td&gt;
      &lt;td&gt;\eta&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Θ&lt;/td&gt;
      &lt;td&gt;\Theta&lt;/td&gt;
      &lt;td&gt;θ&lt;/td&gt;
      &lt;td&gt;\theta&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;I&lt;/td&gt;
      &lt;td&gt;I&lt;/td&gt;
      &lt;td&gt;ι&lt;/td&gt;
      &lt;td&gt;\iota&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;K&lt;/td&gt;
      &lt;td&gt;K&lt;/td&gt;
      &lt;td&gt;κ&lt;/td&gt;
      &lt;td&gt;\kappa&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Λ&lt;/td&gt;
      &lt;td&gt;\Lambda&lt;/td&gt;
      &lt;td&gt;λ&lt;/td&gt;
      &lt;td&gt;\lambda&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;M&lt;/td&gt;
      &lt;td&gt;μ&lt;/td&gt;
      &lt;td&gt;\mu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;N&lt;/td&gt;
      &lt;td&gt;ν&lt;/td&gt;
      &lt;td&gt;\nu&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ξ&lt;/td&gt;
      &lt;td&gt;\Xi&lt;/td&gt;
      &lt;td&gt;ξ&lt;/td&gt;
      &lt;td&gt;\xi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;O&lt;/td&gt;
      &lt;td&gt;ο&lt;/td&gt;
      &lt;td&gt;\omicron&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Π&lt;/td&gt;
      &lt;td&gt;\Pi&lt;/td&gt;
      &lt;td&gt;π&lt;/td&gt;
      &lt;td&gt;\pi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;P&lt;/td&gt;
      &lt;td&gt;ρ&lt;/td&gt;
      &lt;td&gt;\rho&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Σ&lt;/td&gt;
      &lt;td&gt;\Sigma&lt;/td&gt;
      &lt;td&gt;σ&lt;/td&gt;
      &lt;td&gt;\sigma&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;T&lt;/td&gt;
      &lt;td&gt;τ&lt;/td&gt;
      &lt;td&gt;\tau&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Υ&lt;/td&gt;
      &lt;td&gt;\Upsilon&lt;/td&gt;
      &lt;td&gt;υ&lt;/td&gt;
      &lt;td&gt;\upsilon&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Φ&lt;/td&gt;
      &lt;td&gt;\Phi&lt;/td&gt;
      &lt;td&gt;ϕ&lt;/td&gt;
      &lt;td&gt;\phi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;X&lt;/td&gt;
      &lt;td&gt;χ&lt;/td&gt;
      &lt;td&gt;\chi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ψ&lt;/td&gt;
      &lt;td&gt;\Psi&lt;/td&gt;
      &lt;td&gt;ψ&lt;/td&gt;
      &lt;td&gt;\psi&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Ω&lt;/td&gt;
      &lt;td&gt;\v&lt;/td&gt;
      &lt;td&gt;ω&lt;/td&gt;
      &lt;td&gt;\omega&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;表格&quot;&gt;表格&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;姓名&lt;/th&gt;
      &lt;th&gt;性别&lt;/th&gt;
      &lt;th&gt;毕业学校&lt;/th&gt;
      &lt;th&gt;工资&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;张三&lt;/td&gt;
      &lt;td&gt;男&lt;/td&gt;
      &lt;td&gt;重庆交通大学&lt;/td&gt;
      &lt;td&gt;3200&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;李四&lt;/td&gt;
      &lt;td&gt;男&lt;/td&gt;
      &lt;td&gt;贵州大学&lt;/td&gt;
      &lt;td&gt;5000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;王五&lt;/td&gt;
      &lt;td&gt;女&lt;/td&gt;
      &lt;td&gt;北京大学&lt;/td&gt;
      &lt;td&gt;2000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;:---&lt;/td&gt;
      &lt;td&gt;左对齐&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;---:&lt;/td&gt;
      &lt;td&gt;右对齐&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;---&lt;/td&gt;
      &lt;td&gt;居中&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;使用-sequence-画时序图&quot;&gt;使用 sequence 画时序图&lt;/h2&gt;
&lt;p&gt;注意: GitHub 暂不支持，或者说作者没有找到可用的第三方组件提供支持，所以在这你是看不到效果啦！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-sequence&quot;&gt;title: 时序图例子
A-&amp;gt;B: 实线实箭头 
B--&amp;gt;C: 虚线实箭头 
C-&amp;gt;&amp;gt;C: 实线虚箭头 
note right of C: 自通知 
note over B,C:横跨通知 
C-&amp;gt;A:长通知 
note left of A:左通知
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;使用-flow-画流程图&quot;&gt;使用 flow 画流程图&lt;/h2&gt;
&lt;p&gt;注意: GitHub 暂不支持，或者说作者没有找到可用的第三方组件提供支持，所以在这你是看不到效果啦！&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-flow&quot;&gt;start=&amp;gt;start: 开始
isLogin=&amp;gt;condition: 是否登录
login=&amp;gt;operation: 登录
check=&amp;gt;subroutine: 校验用户信息
view=&amp;gt;operation: 浏览
end=&amp;gt;end: 结束
start-&amp;gt;isLogin
isLogin(no)-&amp;gt;login(right)-&amp;gt;check-&amp;gt;view
isLogin(yes)-&amp;gt;view
view-&amp;gt;end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;使用-mermaid-画图&quot;&gt;使用 mermaid 画图&lt;/h2&gt;
&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;
&lt;p&gt;Mermaid 是一个用于画流程图、状态图、时序图、甘特图的库，使用 JS 进行本地渲染，广泛集成于许多 Markdown 编辑器中。
Mermaid 作为一个使用 JS 渲染的库，生成的不是一个“图片”，而是一段 HTML 代码
详细参考：https://mermaid-js.github.io/mermaid/&lt;/p&gt;
&lt;h3 id=&quot;图表方向&quot;&gt;图表方向&lt;/h3&gt;

&lt;p&gt;| name | description |
|——|————-|
| TB   | 从上到下    |
| BT   | 从下到上    |
| RL   | 从右到左    |
| LR   | 从左到右    |&lt;/p&gt;
&lt;h3 id=&quot;节点定义&quot;&gt;节点定义&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;id[文字]&lt;/td&gt;
      &lt;td&gt;矩形节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id(文字)&lt;/td&gt;
      &lt;td&gt;圆角矩形节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id((文字))&lt;/td&gt;
      &lt;td&gt;圆形节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id&amp;gt;文字]&lt;/td&gt;
      &lt;td&gt;右向旗帜状节点&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;id{文字}&lt;/td&gt;
      &lt;td&gt;菱形节点&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;节点之间的连接线&quot;&gt;节点之间的连接线&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;添加尾部箭头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&lt;/td&gt;
      &lt;td&gt;不添加尾部箭头&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–&lt;/td&gt;
      &lt;td&gt;单线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–text–&lt;/td&gt;
      &lt;td&gt;单线上加文字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;==&lt;/td&gt;
      &lt;td&gt;粗线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;==text==&lt;/td&gt;
      &lt;td&gt;粗线加文字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-.-&lt;/td&gt;
      &lt;td&gt;虚线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-.text.-&lt;/td&gt;
      &lt;td&gt;虚线加文字&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&amp;gt;&lt;/td&gt;
      &lt;td&gt;无箭头的实线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–&amp;gt;&lt;/td&gt;
      &lt;td&gt;无箭头的虚线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-&amp;gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;有箭头的实线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–&amp;gt;&amp;gt;&lt;/td&gt;
      &lt;td&gt;有箭头的虚线&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;-x&lt;/td&gt;
      &lt;td&gt;末端为叉的实线（表示异步）&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;–x&lt;/td&gt;
      &lt;td&gt;末端为叉的虚线（表示异步）&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;mermaid-流程图&quot;&gt;mermaid: 流程图&lt;/h3&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;graph TB
A&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;开始&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; B[Round edge]
B &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; C&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Decision&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
C &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;|Y| D[Result one]
C &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;|N| E[Result two]
E &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;F
subgraph 子图表名称
F &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; This is the text &lt;span class=&quot;nt&quot;&gt;---&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; H
H &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; I&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;H-I&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
I &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; J&amp;gt;I-J]
end
H &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Z&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;结束&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
D &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Z
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;graph TB;
A(开始) --&amp;gt;B[Round edge]
B --&amp;gt; C{Decision}
C --&amp;gt;|Y| D[Result one]
C --&amp;gt;|N| E[Result two]
E --&amp;gt;F
subgraph 子图表名称
	F --&amp;gt; H
	H --&amp;gt; I((H-I))
	I --&amp;gt; J&amp;gt;I-J]
end
H --&amp;gt; Z(结束)
D --&amp;gt; Z
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;mermaid-序列图&quot;&gt;mermaid: 序列图&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sequenceDiagram
    participant Alice
    participant Bob
    Alice-&amp;gt;John: Hello John, how are you?
    loop Healthcheck
        John-&amp;gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail...
    John--&amp;gt;Alice: Great!
    John-&amp;gt;Bob: How about you?
    Bob--&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;sequenceDiagram
    participant Alice
    participant Bob
    Alice-&amp;gt;John: Hello John, how are you?
    loop Healthcheck
        John-&amp;gt;John: Fight against hypochondria
    end
    Note right of John: Rational thoughts &amp;lt;br/&amp;gt;prevail...
    John--&amp;gt;Alice: Great!
    John-&amp;gt;Bob: How about you?
    Bob--&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;mermaid-甘特图&quot;&gt;mermaid: 甘特图&lt;/h3&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gantt
        dateFormat  YYYY-MM-DD
        title Adding GANTT diagram functionality to mermaid
        section A section
        Completed task            :done,    des1, 2014-01-06,2014-01-08
        Active task               :active,  des2, 2014-01-09, 3d
        Future task               :         des3, after des2, 5d
        Future task2               :         des4, after des3, 5d
        section Critical tasks
        Completed task in the critical line :crit, done, 2014-01-06,24h
        Implement parser and jison          :crit, done, after des1, 2d
        Create tests for parser             :crit, active, 3d
        Future task in critical line        :crit, 5d
        Create tests for renderer           :2d
        Add to mermaid                      :1d
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;pre&gt;&lt;code class=&quot;language-mermaid&quot;&gt;gantt
	dateFormat  YYYY-MM-DD
	title Adding GANTT diagram functionality to mermaid
	section A section
	Completed task            :done,    des1, 2014-01-06,2014-01-08
	Active task               :active,  des2, 2014-01-09, 3d
	Future task               :         des3, after des2, 5d
	Future task2               :         des4, after des3, 5d
	section Critical tasks
	Completed task in the critical line :crit, done, 2014-01-06,24h
	Implement parser and jison          :crit, done, after des1, 2d
	Create tests for parser             :crit, active, 3d
	Future task in critical line        :crit, 5d
	Create tests for renderer           :2d
	Add to mermaid                      :1d
&lt;/code&gt;&lt;/pre&gt;</content><author><name>zrg</name></author><category term="Markdown" /><summary type="html">标题 #,一级标题 ##,二级标题 ###,三级标题 列表 1. 有序列表 2. 有序列表 3. 无序列表</summary></entry><entry><title type="html">数据结构与算法</title><link href="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/" rel="alternate" type="text/html" title="数据结构与算法" /><published>2019-02-13T00:00:00+08:00</published><updated>2019-02-13T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/13/data-structure-algorithms/">&lt;div id=&quot;outline-container-org9d01dc5&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9d01dc5&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;1&lt;/span&gt; 数据结构和算法目录&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
首先明确一点：程序=数据结构+算法
&lt;/pre&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;
&lt;caption class=&quot;t-above&quot;&gt;&lt;span class=&quot;table-number&quot;&gt;Table 1:&lt;/span&gt; 数据结构和算法表&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;

&lt;col  class=&quot;org-left&quot; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;线性结构&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;树&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;堆&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;图&lt;/th&gt;
&lt;th scope=&quot;col&quot; class=&quot;org-left&quot;&gt;排序算法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;数组、单链表和双链表&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉查找树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二叉堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;图的理论基础&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;冒泡排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Linux内核中双向链表的经典实现&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;AVL树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;左倾堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;无向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;快速排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;栈&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;伸展树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斜堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;有向图&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;插入排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;队列&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;红黑树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;二项堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;深度优先搜索和广度优先搜索&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;希尔排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;哈夫曼树&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;斐波那契堆&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;拓扑排序&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;选择排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Kruskal算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;堆排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Prim算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;归并排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Dijkstra算法&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;桶排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;基数排序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;&amp;#x2026;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org66f1579&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org66f1579&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;2&lt;/span&gt; 线性结构&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
常用的线性结构有：线性表，栈，队列，循环队列，数组。
&lt;/pre&gt;

&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;线性表：是一种线性结构，它是具有相同类型的n(n≥0)个数据元素组成的有限序列。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;顺序表：是在计算机内存中以数组的形式保存的线性表，是指用一组地址连续的存储单元依次存储数据元素的线性结构。&lt;/li&gt;
&lt;li&gt;链表（Linked list）
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表：它由节点组成，每个节点都包含下一个节点的指针。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单链表分为：
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;动态单链表&lt;/li&gt;
&lt;li&gt;静态单链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
单链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-01.jpg&quot; alt=&quot;linked-list-01.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点是&quot;节点10&quot;，&quot;节点10&quot;的后继节点是&quot;节点20&quot;。
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-02.jpg&quot; alt=&quot;linked-list-02.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-03.jpg&quot; alt=&quot;linked-list-03.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;单链表的特点是：节点的链接方向是单向的；相对于数组来说，单链表的的随机访问速度较慢，但是单链表删除/添加数据的效率很高。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;双链表：它也是由节点组成，它的每个数据结点中都有两个指针，分别指向直接后继和直接前驱。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
双链表操作图示
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-04.jpg&quot; alt=&quot;linked-list-04.jpg&quot; /&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
表头为空，表头的后继节点为&quot;节点10&quot;(数据为10的节点)；&quot;节点10&quot;的后继节点是&quot;节点20&quot;(数据为10的节点)，&quot;节点20&quot;的前继节点是&quot;节点10&quot;；&quot;节点20&quot;的后继节点是&quot;节点30&quot;，&quot;节点30&quot;的前继节点是&quot;节点20&quot;；...；末尾节点的后继节点是表头。
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;删除节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-05.jpg&quot; alt=&quot;linked-list-05.jpg&quot; /&gt;
&lt;b&gt;添加节点&lt;/b&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/linked-list-06.jpg&quot; alt=&quot;linked-list-06.jpg&quot; /&gt;
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;代码实现
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
Java
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;org0ad7128&quot;&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt; * Java &amp;#23454;&amp;#29616;&amp;#30340;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#12290; &lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt; * &amp;#27880;&amp;#65306;java&amp;#33258;&amp;#24102;&amp;#30340;&amp;#38598;&amp;#21512;&amp;#21253;&amp;#20013;&amp;#26377;&amp;#23454;&amp;#29616;&amp;#21452;&amp;#21521;&amp;#38142;&amp;#34920;&amp;#65292;&amp;#36335;&amp;#24452;&amp;#26159;:java.util.LinkedList&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt; */&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;DoubleLink&lt;/span&gt;&amp;lt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;T&lt;/span&gt;&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;循环链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;单循环链表&lt;/li&gt;
&lt;li&gt;双循环链表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;栈（stack）：是计算机科学中一种特殊的串列形式的抽象数据类型，按照后进先出（LIFO, Last In First Out）的原理运作。其特殊之处在于只能允许在链表或数组的一端（称为堆栈顶端指针，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。&lt;/li&gt;
&lt;li&gt;队列：又称为伫列（queue），是先进先出（FIFO, First-In-First-Out）的线性表。队列只允许在后端（称为rear）进行插入操作，在前端（称为front）进行删除操作。&lt;/li&gt;
&lt;li&gt;数组：在计算机科学中，数组数据结构（英语：array data structure），简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块连续的内存来存储。
&lt;img src=&quot;http://localhost:4000/assets/images/array-data-structure-01.jpg&quot; alt=&quot;array-data-structure-01.jpg&quot; /&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;数组的特点是：数据的元素在上下界内是连续的；随机访问速度快。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9620dcf&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org9620dcf&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;3&lt;/span&gt; 树&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9bfac9f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org9bfac9f&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.1&lt;/span&gt; 二叉树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgbe67ab6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgbe67ab6&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.2&lt;/span&gt; AVL 树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1a4cf54&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1a4cf54&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.3&lt;/span&gt; 伸展树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd4681b8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgd4681b8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.4&lt;/span&gt; 红黑树&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org63a9384&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org63a9384&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;3.5&lt;/span&gt; 哈夫曼树&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org01377f4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org01377f4&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;4&lt;/span&gt; 堆&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2cca4d3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org2cca4d3&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;5&lt;/span&gt; 图&lt;/h2&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8f3daef&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8f3daef&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;6&lt;/span&gt; 排序算法&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-6&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org68f7db8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org68f7db8&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.1&lt;/span&gt; 冒泡排序(BubbleSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org628c76b&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org628c76b&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.1&lt;/span&gt; 介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;en&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
Bubblesort is a popular,but inefficient,sorting algorithm. It works by repeatedly swapping adjacent elements that are out of order.
&lt;/pre&gt;

&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序是一种较简单的排序算法。它会遍历若干次要排序的数列，每次遍历时，它都会从前往后依次的比较相邻两个数的大小；如果前者比后者大，
则交换它们的位置。这样，一次遍历之后，最大的元素就在数列的末尾！ 采用相同的方法再次遍历时，第二大的元素就被排列在最大元素之前。重复
此操作，直到整个数列都有序为止！
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org01098cf&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org01098cf&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 1: &lt;/span&gt;pseudo code&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for i = 1 to A.length - 1
    for j = A:length downto i + 1
        if A[j] &amp;lt; A[j-1]   
            exchange A[j] with A[j - 1]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga44b371&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orga44b371&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.3&lt;/span&gt; 时间复杂度和稳定性&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
冒泡排序的时间复杂度是O(N2)。
假设被排序的数列中有N个数。遍历一趟的时间复杂度是O(N)，需要遍历多少次呢？N-1次！因此，冒泡排序的时间复杂度是O(N2)。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
冒泡排序是稳定的算法，它满足稳定算法的定义。
算法稳定性 -- 假设在数列中存在a[i]=a[j]，若在排序之前，a[i]在a[j]前面；并且排序之后，a[i]仍然在a[j]前面。则这个排序算法是稳定的！
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8124771&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8124771&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.1.4&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-1-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 2: &lt;/span&gt;C&lt;/label&gt;&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;flag&lt;/span&gt;; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;#26631;&amp;#35760;&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; (i=n-1; i&amp;gt;0; i--)
{
    flag = 0; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;#21021;&amp;#22987;&amp;#21270;&amp;#26631;&amp;#35760;&amp;#20026;0&lt;/span&gt;
    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;#23558;a[0...i]&amp;#20013;&amp;#26368;&amp;#22823;&amp;#30340;&amp;#25968;&amp;#25454;&amp;#25918;&amp;#22312;&amp;#26411;&amp;#23614;&lt;/span&gt;
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; (j=0; j&amp;lt;i; j++)
    {
        &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; (a[j] &amp;gt; a[j+1])
        {
            swap(a[j], a[j+1]);
            flag = 1;    &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;#33509;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35774;&amp;#26631;&amp;#35760;&amp;#20026;1&lt;/span&gt;
        }
    }
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; (flag==0)
        &lt;span style=&quot;color: #F92672;&quot;&gt;break&lt;/span&gt;;&lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;#33509;&amp;#27809;&amp;#21457;&amp;#29983;&amp;#20132;&amp;#25442;&amp;#65292;&amp;#21017;&amp;#35828;&amp;#26126;&amp;#25968;&amp;#21015;&amp;#24050;&amp;#26377;&amp;#24207;&amp;#12290;&lt;/span&gt;
} 
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;C#&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 3: &lt;/span&gt;C#&lt;/label&gt;&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;//Core code.
for (int i = 0&lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;i &amp;lt; arrInt.Length - 1; i++)&lt;/span&gt;
{
    for (int j = 1&lt;span style=&quot;color: #75715E;&quot;&gt;; &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;j &amp;lt; arrInt.Length - i; j++)&lt;/span&gt;
    {
        if (arrInt[j] &amp;lt; arrInt[j - 1])
        {
            //&amp;#20132;&amp;#25442;&amp;#20540;
            int temp = arrInt[j]&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
            arrInt[j] = arrInt[j - 1]&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
            arrInt[j - 1] = temp&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        }
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 4: &lt;/span&gt;Java&lt;/label&gt;&lt;pre class=&quot;src src-java&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;BubbleSort&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt;[] &lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;,&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;num&lt;/span&gt;) {
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt; = 0; i &amp;lt; arr.&lt;span style=&quot;color: #66D9EF;&quot;&gt;length&lt;/span&gt;; i++) {
            &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt; = num-1; j &amp;gt;i; j--) {
                    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; (arr[i]&amp;gt;arr[j]) {
                            &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;temp&lt;/span&gt;=arr[i];
                            arr[i]=arr[j];
                            arr[j]=temp;
                    }
            }
    }
    &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;k&lt;/span&gt;=0;k&amp;lt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;num&lt;/span&gt;;k++){
            System.out.print(arr[k]+&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; &quot;&lt;/span&gt;);
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;label class=&quot;org-src-name&quot;&gt;&lt;span class=&quot;listing-number&quot;&gt;Listing 5: &lt;/span&gt;PHP&lt;/label&gt;&lt;pre class=&quot;src src-shell&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;function&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;BubbleSort&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;){
        &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;=0;$&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;&amp;lt;count($&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;);$&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;++){
                &lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;=0;$&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;&amp;lt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;;$&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;++){
                        &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;]&amp;gt;$&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;]){
                                $&lt;span style=&quot;color: #FD971F;&quot;&gt;temp&lt;/span&gt; = $&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;];
                                $&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;] = $&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;];
                                $&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;[$&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;] = $&lt;span style=&quot;color: #FD971F;&quot;&gt;temp&lt;/span&gt;;
                        }
                }
        }
        &lt;span style=&quot;color: #F92672;&quot;&gt;foreach&lt;/span&gt;($&lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt; as $&lt;span style=&quot;color: #FD971F;&quot;&gt;value&lt;/span&gt;){
                &lt;span style=&quot;color: #F92672;&quot;&gt;echo&lt;/span&gt; $&lt;span style=&quot;color: #FD971F;&quot;&gt;value&lt;/span&gt;.&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot; &quot;&lt;/span&gt;;
        }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org331cef0&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org331cef0&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.2&lt;/span&gt; 快速排序(QuickSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-2&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgd9adacf&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgd9adacf&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.1&lt;/span&gt; 介绍(Introduction)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-1&quot;&gt;
&lt;p&gt;
&lt;b&gt;cn&lt;/b&gt;
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序(Quick Sort)使用分治法策略。
基本思想是：选择一个基准数，通过一趟排序将要排序的数据分割成独立的两部分；其中一部分的所有数据都比另外
一部分的所有数据都要小。然后，再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此
达到整个数据变成有序序列。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
快速排序流程：
(1) 从数列中挑出一个基准值。
(2) 将所有比基准值小的摆放在基准前面，所有比基准值大的摆在基准的后面(相同的数可以到任一边)；在这个分区退出之后，该基准就处于数列的中间位置。
(3) 递归地把&quot;基准值前面的子数列&quot;和&quot;基准值后面的子数列&quot;进行排序。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf89ab99&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf89ab99&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8937cf9&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org8937cf9&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.3&lt;/span&gt; 时间复杂度和稳定&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
快速排序的时间复杂度在最坏情况下是O(N2)，平均的时间复杂度是O(N*lgN)。 
这句话很好理解：假设被排序的数列中有N个数。遍历一次的时间复杂度是O(N)，需要遍历多少次呢？至少lg(N+1)次，最多N次。
(01) 为什么最少是lg(N+1)次？快速排序是采用的分治法进行遍历的，我们将它看作一棵二叉树，它需要遍历的次数就是二叉树的深度，而根据完全二叉树的定义，它的深度至少是lg(N+1)。因此，快速排序的遍历次数最少是lg(N+1)次。
(02) 为什么最多是N次？这个应该非常简单，还是将快速排序看作一棵二叉树，它的深度最大是N。因此，快读排序的遍历次数最多是N次。
&lt;/pre&gt;


&lt;pre class=&quot;example&quot;&gt;
快速排序是不稳定的算法，它不满足稳定算法的定义。
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org99fa50a&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org99fa50a&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.2.4&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-2-4&quot;&gt;
&lt;p&gt;
&lt;b&gt;C&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #E6DB74;&quot;&gt;/**&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;* arr -- &amp;#24453;&amp;#25490;&amp;#24207;&amp;#30340;&amp;#25968;&amp;#32452;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;* left -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#24038;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;* right -- &amp;#25968;&amp;#32452;&amp;#30340;&amp;#21491;&amp;#36793;&amp;#30028;&lt;/span&gt;
&lt;span style=&quot;color: #E6DB74;&quot;&gt;*/&lt;/span&gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;quick_sort&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;arr&lt;/span&gt;[],&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;left&lt;/span&gt;,&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;right&lt;/span&gt;){
    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;(left &amp;lt; right){
            &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;,&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;,&lt;span style=&quot;color: #FD971F;&quot;&gt;k&lt;/span&gt;;
            i = left;
            j = right;
            k = arr[i];
            &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j){
                    &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt;(i &amp;lt; j &amp;amp;&amp;amp; arr[j] &amp;gt; k){
                            j--; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;#20174;&amp;#21491;&amp;#24448;&amp;#24038;&amp;#25214;&amp;#19968;&amp;#20010;&amp;#23567;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
                    &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;(i &amp;lt; j){
                            arr[i++] = arr[j];
                    }
                    &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt;(i&amp;lt;j &amp;amp;&amp;amp; arr[i] &amp;lt; k){
                            i++; &lt;span style=&quot;color: #75715E;&quot;&gt;// &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;&amp;#20174;&amp;#24038;&amp;#24448;&amp;#21491;&amp;#25214;&amp;#31532;&amp;#19968;&amp;#20010;&amp;#22823;&amp;#20110; k &amp;#30340;&amp;#25968;&lt;/span&gt;
                    }
            }
            arr[i] = k;
            quick_sort(arr,left,i-1);
            quick_sort(arr,i+1,right);
    }
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;Java&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;PHP&lt;/b&gt;
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-shell&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc1d4b77&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgc1d4b77&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.3&lt;/span&gt; 插入排序(InsertSort)&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-6-3&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org9bbd847&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org9bbd847&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.1&lt;/span&gt; 介绍(Instoduction)&lt;/h4&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga471978&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orga471978&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.2&lt;/span&gt; 伪代码(pseudo code)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-2&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;for j=2 to A.length
    key=A[j]&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    //Insert A[j] into the sorted sequence A[1..j-1]
    i=j-1
    while i&amp;gt;0 and A[i]&amp;gt;key
         A[i+1]=A[i]
         i=i-1
    A[i+1]=key
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org89fcfcd&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org89fcfcd&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.3&lt;/span&gt; 实现(realization)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-3&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1095f23&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org1095f23&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;6.3.4&lt;/span&gt; 分而治之(divideand-conquer)&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-6-3-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf65ca3f&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf65ca3f&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.4&lt;/span&gt; 选择排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org2e73800&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org2e73800&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.5&lt;/span&gt; 希尔排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf7a5b53&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgf7a5b53&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.6&lt;/span&gt; 归并排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga1e3922&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orga1e3922&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.7&lt;/span&gt; 基数排序&lt;/h3&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1340b5e&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1340b5e&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;6.8&lt;/span&gt; 堆排序&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org789b68b&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org789b68b&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;7&lt;/span&gt; 参考资料&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-7&quot;&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BA%BF%E6%80%A7%E8%A1%A8&quot;&gt;线性表-维基百科&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/skywang12345/p/3603935.html&quot;&gt;数据结构与算法系列 目录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org8e7ca84&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org8e7ca84&quot;&gt;&lt;span class=&quot;section-number-2&quot;&gt;8&lt;/span&gt; 附录A 伪代码&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-8&quot;&gt;
&lt;p&gt;
伪代码(Pseudocode)是一种算法描述语言。使用伪代码的目的是为了使被描述的算法可以容易地以任何一种编程语言(C, Java, Pascal)实现。
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb263588&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;orgb263588&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.1&lt;/span&gt; 语法规则&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-1&quot;&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgbe92042&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgbe92042&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.1&lt;/span&gt; 变量的声明&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-1&quot;&gt;
&lt;p&gt;
算法中出现的数组、变量可以是以下类型：整数、实数、字符、字符串或指针。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orge21a674&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orge21a674&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.2&lt;/span&gt; 指令的表示&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-2&quot;&gt;
&lt;p&gt;
在算法中的某些指令或子任务可以用文字来叙述，例如，”设x是A中的最大项”，这里A是一个数组；或者”将x插入L中”，这里L是一个链表。这样做的目的是为了避免因那些与主要问题无关的细节使算法本身杂乱无章。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgf0e31e8&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgf0e31e8&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.3&lt;/span&gt; 表达式&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-3&quot;&gt;
&lt;p&gt;
算术表达式可以使用通常的算术运算符（+，-，*，/，以及表示幂的^）。逻辑表达式可以使用关系运算符 = 、≠、&amp;lt;、&amp;gt;、≤ 和 ≥，以及逻辑运算符与(and)、或（or）、非（not）。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org254cfbc&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org254cfbc&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.4&lt;/span&gt; 赋值语句&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-4&quot;&gt;
&lt;p&gt;
赋值语句是如下形式的语句：a←b。这里a是变量、数组项，b是算术表达式、逻辑表达式或指针表达式。语句的含义是将b的值赋给a。
&lt;br /&gt;
变量交换：若a和b都是变量、数组项，那么记号a&amp;lt;-&amp;gt;b 表示a和b的内容进行交换。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org60928a1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org60928a1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.5&lt;/span&gt; goto语句&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-5&quot;&gt;
&lt;pre class=&quot;example&quot;&gt;
goto label（goto标号）
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org44cb63e&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org44cb63e&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.6&lt;/span&gt; 分支结构&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-6&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;if i=10
    then xxxx
    else xxxx //else &amp;#21644; then &amp;#35201;&amp;#23545;&amp;#40784;

//&amp;#25110;&amp;#32773;
if i=10
    then xxxx //if &amp;#21518;&amp;#38754;&amp;#24517;&amp;#23450;&amp;#36319;&amp;#19978;then&amp;#65292;else&amp;#21518;&amp;#38754;&amp;#19981;&amp;#29992;&amp;#36319;then
    elseif i=9 //elseif &amp;#35201;&amp;#36830;&amp;#22312;&amp;#19968;&amp;#36215;&amp;#20889;
        then xxxx
        yyyy
    else  xxxx //else &amp;#36319;&amp;#22312; elseif &amp;#30340; then &amp;#23545;&amp;#40784;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgb8d2ffe&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orgb8d2ffe&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.7&lt;/span&gt; 循环结构&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;// while
while time&amp;lt;10
    do  xxxxx //while&amp;#21518;&amp;#38754;&amp;#24517;&amp;#23450;&amp;#35201;&amp;#32039;&amp;#36319;&amp;#32553;&amp;#36827;&amp;#30340;do
    xxxxx
end

// for
for var init to limit by incr 
        do s
end
// &amp;#36825;&amp;#37324;var&amp;#26159;&amp;#21464;&amp;#37327;&amp;#65292;init&amp;#12289;limit&amp;#21644;incr&amp;#37117;&amp;#26159;&amp;#31639;&amp;#26415;&amp;#34920;&amp;#36798;&amp;#24335;&amp;#65292;&amp;#32780;s&amp;#26159;&amp;#30001;&amp;#19968;&amp;#20010;&amp;#25110;&amp;#22810;&amp;#20010;&amp;#35821;&amp;#21477;&amp;#32452;&amp;#25104;&amp;#30340;&amp;#35821;&amp;#21477;&amp;#20018;&amp;#12290;&amp;#21021;&amp;#22987;&amp;#26102;&amp;#65292;var&amp;#34987;&amp;#36171;&amp;#20104;init&amp;#30340;&amp;#20540;&amp;#12290;&amp;#20551;&amp;#33509;incr&amp;#8805;0&amp;#65292;&amp;#21017;&amp;#21482;&amp;#35201;var&amp;#8804;limit&amp;#65292;&amp;#23601;&amp;#25191;&amp;#34892;s&amp;#24182;&amp;#19988;&amp;#23558;incr&amp;#21152;&amp;#21040;var&amp;#19978;&amp;#12290;&amp;#65288;&amp;#20551;&amp;#33509;incr&amp;lt;0&amp;#65292;&amp;#21017;&amp;#21482;&amp;#35201;var&amp;#8805;limit&amp;#65292;&amp;#23601;&amp;#25191;&amp;#34892;s&amp;#24182;&amp;#19988;&amp;#23558;incr&amp;#21152;&amp;#21040;var&amp;#19978;&amp;#65289;&amp;#12290;incr&amp;#30340;&amp;#31526;&amp;#21495;&amp;#19981;&amp;#33021;&amp;#30001;s&amp;#26469;&amp;#35813;&amp;#25913;&amp;#21464;&amp;#12290;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orga635eda&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;orga635eda&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.8&lt;/span&gt; 程序的结束&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-8&quot;&gt;
&lt;p&gt;
exit语句可以在通常的结束条件满足之前，被用来结束while循环或者for循环的执行。
&lt;br /&gt;
return用来指出一个算法执行的终点
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org0d3caf1&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org0d3caf1&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.9&lt;/span&gt; 注释风格&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-9&quot;&gt;
&lt;p&gt;
算法中的注释被括在 &lt;i&gt;* *&lt;/i&gt; 之中。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org69f513f&quot; class=&quot;outline-4&quot;&gt;
&lt;h4 id=&quot;org69f513f&quot;&gt;&lt;span class=&quot;section-number-4&quot;&gt;8.1.10&lt;/span&gt; 函数的编写&lt;/h4&gt;
&lt;div class=&quot;outline-text-4&quot; id=&quot;text-8-1-10&quot;&gt;
&lt;p&gt;
函数的伪代码格式例子为：search（A，name）， 参数类型可以不给出，但必须在注释中说明。
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org1013c40&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;org1013c40&quot;&gt;&lt;span class=&quot;section-number-3&quot;&gt;8.2&lt;/span&gt; 实例&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-8-2&quot;&gt;
&lt;p&gt;
伪代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-lisp&quot;&gt;x &amp;#8592; 0
y &amp;#8592; 0
z &amp;#8592; 0

while x &amp;lt; N
do x &amp;#8592; x + 1
y &amp;#8592; x + y
for t &amp;#8592; 0 to 10
do z &amp;#8592; ( z + x * y ) / 100
repeat
y &amp;#8592; y + 1
z &amp;#8592; z - y
until z &amp;lt; 0
z &amp;#8592; x * y

y &amp;#8592; y / 2
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
C 语言代码：
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C&quot;&gt;&lt;span style=&quot;color: #F92672;&quot;&gt;#inlude&lt;/span&gt; &amp;lt;stdio.h&amp;gt;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;x&lt;/span&gt;, &lt;span style=&quot;color: #FD971F;&quot;&gt;y&lt;/span&gt;, &lt;span style=&quot;color: #FD971F;&quot;&gt;z&lt;/span&gt; = 0;
&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;N&lt;/span&gt;=10;

&lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt;( z &amp;lt; N )
{
    x++;
    y += x;
  &amp;#12288;&lt;span style=&quot;color: #F92672;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;t&lt;/span&gt; = 0; t &amp;lt; 10; t++ )
    {
        z = ( z + x * y ) / 100;
        &lt;span style=&quot;color: #F92672;&quot;&gt;do&lt;/span&gt; 
        {
          y ++;
          z -= y;
        } &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt;( z &amp;gt;= 0 );
    }
    z = x * y;
}

y /= 2;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="Data-Structure" /><category term="Algorithms" /><summary type="html">1 数据结构和算法目录 首先明确一点：程序=数据结构+算法</summary></entry><entry><title type="html">剑指 Offer</title><link href="http://localhost:4000/algorithms/2019/02/12/offer/" rel="alternate" type="text/html" title="剑指 Offer" /><published>2019-02-12T00:00:00+08:00</published><updated>2019-02-12T00:00:00+08:00</updated><id>http://localhost:4000/algorithms/2019/02/12/offer</id><content type="html" xml:base="http://localhost:4000/algorithms/2019/02/12/offer/">&lt;div id=&quot;outline-container-org6bd423d&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org6bd423d&quot;&gt;前言&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org6bd423d&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。&lt;/li&gt;
&lt;li&gt;文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。&lt;/li&gt;
&lt;li&gt;引用别人的一句话“我们不生产代码，我们是代码的搬运工”。&lt;/li&gt;
&lt;li&gt;文章内容仅供参考。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-orgc91e03a&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgc91e03a&quot;&gt;1~10&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgc91e03a&quot;&gt;
&lt;ol class=&quot;org-ol&quot;&gt;
&lt;li&gt;二维数组的查找
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-C++&quot; id=&quot;org45170b8&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org7b30a49&quot;&gt;   &amp;lt;?php

function Find($target, $array)
{
    foreach($array as $key=&amp;gt;$val){
        if(in_array($target,$val)){
            return &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        }
    }
    return &lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
}
while(fscanf(STDIN,&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;%d,%s&quot;&lt;/span&gt;,$a,$b) == 2){
    $target = $a&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    eval('$array='.$b.'&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;');&lt;/span&gt;
    try{
        echo Find($target,$array).&lt;span style=&quot;color: #E6DB74;&quot;&gt;&quot;\n&quot;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    }catch(Exception $e){
        die&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-java&quot; id=&quot;orga3e2849&quot;&gt;   &lt;span style=&quot;color: #F92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Solution&lt;/span&gt; {
    &lt;span style=&quot;color: #F92672;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;boolean&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;target&lt;/span&gt;, &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; [][] &lt;span style=&quot;color: #FD971F;&quot;&gt;array&lt;/span&gt;) {
        &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;rows&lt;/span&gt; = array.length;
        &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;cols&lt;/span&gt; = array[0].length;
        &lt;span style=&quot;color: #66D9EF;&quot;&gt;int&lt;/span&gt; &lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;=rows-1,&lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;=0;
        &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt;(i&amp;gt;=0 &amp;amp;&amp;amp; j&amp;lt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;cols&lt;/span&gt;){
            &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;(target&amp;lt;&lt;span style=&quot;color: #66D9EF;&quot;&gt;array&lt;/span&gt;[i][j])
                i--;
            &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt;(target&amp;gt;array[i][j])
                j++;
            &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;
                &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;false&lt;/span&gt;;
    }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-python&quot; id=&quot;org6c8ef40&quot;&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;-*- coding:utf-8 -*-&lt;/span&gt;
&lt;span style=&quot;color: #F92672;&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #66D9EF;&quot;&gt;Solution&lt;/span&gt;:
 &lt;span style=&quot;color: #75715E;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;array &amp;#20108;&amp;#32500;&amp;#21015;&amp;#34920;&lt;/span&gt;
 &lt;span style=&quot;color: #F92672;&quot;&gt;def&lt;/span&gt; &lt;span style=&quot;color: #A6E22E;&quot;&gt;Find&lt;/span&gt;(&lt;span style=&quot;color: #F92672;&quot;&gt;self&lt;/span&gt;, target, array):
     &lt;span style=&quot;color: #FD971F;&quot;&gt;rows&lt;/span&gt;=&lt;span style=&quot;color: #F92672;&quot;&gt;len&lt;/span&gt;(array)
     &lt;span style=&quot;color: #FD971F;&quot;&gt;cols&lt;/span&gt;=&lt;span style=&quot;color: #F92672;&quot;&gt;len&lt;/span&gt;(array[0])
     &lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt;=rows-1
     &lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt;=0
     &lt;span style=&quot;color: #F92672;&quot;&gt;while&lt;/span&gt; i&amp;gt;=0 &lt;span style=&quot;color: #F92672;&quot;&gt;and&lt;/span&gt; j&amp;lt;cols:
         &lt;span style=&quot;color: #F92672;&quot;&gt;if&lt;/span&gt; target&amp;lt;array[i][j]:
             &lt;span style=&quot;color: #FD971F;&quot;&gt;i&lt;/span&gt; -= 1
         &lt;span style=&quot;color: #F92672;&quot;&gt;elif&lt;/span&gt; target&amp;gt;array[i][j]:
             &lt;span style=&quot;color: #FD971F;&quot;&gt;j&lt;/span&gt; += 1
         &lt;span style=&quot;color: #F92672;&quot;&gt;else&lt;/span&gt;:
             &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;True&lt;/span&gt;
     &lt;span style=&quot;color: #F92672;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #AE81FF;&quot;&gt;False&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org3bbac4f&quot;&gt;   class Solution
{
    public bool Find(int target, int[][] array)
    {
        int row=0&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        int col=array[0].Length-1&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        while(row&amp;lt;=array.Length-1&amp;amp;&amp;amp;col&amp;gt;=0){
            if(target==array[row][col])
                return true&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
            else if(target&amp;gt;array[row][col])
                row++&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
            else
                col--&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        }
        return false&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;

    }
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
矩阵是有序的，从左下角来看，向上数字递减，向右数字递增，因此从左下角开始查找，当要查找数字比左下角数字大时。右移要查找数字比左下角数字小时，上移。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;替换空格
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org367b6d6&quot;&gt;   &amp;lt;?php
// &amp;#30452;&amp;#25509;&amp;#20351;&amp;#29992;&amp;#20989;&amp;#25968;
function replaceSpace($str)
{
    return str_replace(' ','%20',$str)&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
}
// &amp;#19981;&amp;#20801;&amp;#35768;&amp;#30452;&amp;#25509;&amp;#35843;&amp;#29992;&amp;#20869;&amp;#32622;&amp;#20989;&amp;#25968;
&amp;lt;?php
function replaceSpace($str)
{
    $res = ''&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    $strLength = strlen($str)&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    for($i=0&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #75715E;&quot;&gt;$i&amp;lt;$len;$i++){&lt;/span&gt;
        if($str[$i]==' '){
                $res .='%20'&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        }else{
                $res .=$str[$i]&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        }
    }
    return $res&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;问题1：替换字符串，是在原来的字符串上做替换，还是新开辟一个字符串做替换！&lt;/li&gt;
&lt;li&gt;问题2：在当前字符串替换，怎么替换才更有效率（不考虑内置的replace方法）。
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;从前往后替换，后面的字符要不断往后移动，要多次移动，所以效率低下&lt;/li&gt;
&lt;li&gt;从后往前，先计算需要多少空间，然后从后往前移动，则每个字符只为移动一次，这样效率更高一点。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;从尾到头打印链表
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;orgb94d688&quot;&gt;     &amp;lt;?php

/*class ListNode{
    var $val&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    var $next = NULL&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    function __construct($x){
        $this-&amp;gt;val = $x&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    }
}*/
function printListFromTailToHead($head)
{
    $arrayList = []&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    while($head !== null){
        $arrayList[]=$head-&amp;gt;val&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
        $head=$head-&amp;gt;next&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
    }
    return array_reverse($arrayList)&lt;span style=&quot;color: #75715E;&quot;&gt;;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;
有三种思路，
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;第一就是利用栈先入后出的特性完成；&lt;/li&gt;
&lt;li&gt;第二就是存下来然后进行数组翻转；&lt;/li&gt;
&lt;li&gt;第三是利用递归。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;重建二叉树
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;
&lt;pre class=&quot;src src-emacs-lisp&quot; id=&quot;org68ecd45&quot;&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-org92e8ade&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;org92e8ade&quot;&gt;11~20&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-org92e8ade&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-orgabbcdf9&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;orgabbcdf9&quot;&gt;21~30&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-orgabbcdf9&quot;&gt;
&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;题目描述&lt;/b&gt;
&lt;b&gt;解题思路&lt;/b&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>zrg</name></author><category term="剑指-Offer" /><summary type="html">前言 本文内容是《剑指 Offer》的问题求解整理，使其文档化，主要包括问题的代码编写（主流语言）和思路分析。 文章结构按照10小题为一章节来划分，每一小题的编程语言的实现一般按照【低级语言》脚本语言》高级语言】的格式来展示。 引用别人的一句话“我们不生产代码，我们是代码的搬运工”。 文章内容仅供参考。 1~10 二维数组的查找 题目描述 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</summary></entry></feed>