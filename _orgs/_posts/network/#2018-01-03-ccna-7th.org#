#+TITLE:    CCNA
#+AUTHOR:   Rengui Zhao
#+EMAIL:    zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:nil toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD_EXTRA: <style>body {font-size:16pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

#+BEGIN_EXPORT HTML
---
layout: post
title: CCNA
author: zrg
comments: false
description: CCNA 7th
categories:
- network
tags:
- CCNA
photos:
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
# (setq org-export-html-style nil)

* 前言
  : 
* 网络互连基础
1. 网络分段(network segmentation)
   + 问题：为什么要使用网络分段？ :: 答：随着网络的增大，用户响应非常缓慢，而LAN数据流将发生严重阻塞。
   + 问题：导致LAN阻塞的常见原因？ :: 答：统一广播域或冲突域中的主机太多; 广播风暴； 组播数据流太多；带宽太低；使用集线器扩展网络。
2. 广播域(broadcast domain)
   : 指同一个网段中所有设备组成的集合，这些设备侦听该网段中发送的所有广播。
3. 冲突域(collision domain)
   : 指一种网络情形，即网段上的一台设备发送分组时，该物理网段上的其他所有设备都必须侦听它。
4. MAC 地址
5. IP 地址
6. 集线器
7. 路由器
   : 第3层交换机，用以组建互联网络。默认对广播域进行分割。与第2层交换机转发或过滤帧不同，路由器使用逻辑地址，并提供分组交换功能。路由器使用访问
   : 列表进行分组过滤。
   : 路由器每个接口都提供不同的广播域。
8. 交换机
   : 用途是让LAN更好地运行——优化其性能，向LAN用户提供更高的带宽。默认情况下，对冲突域进行分割。
   : 交换机每个端口都是一个独立的冲突域。
9. 网桥
* 网络互联模型
** 基本概念
   1. ARP
      : Address Resolution Protocol，地址解析协议。
   2. ISO
      : Intelnational Organization for Standardzation，国际标准化组织。
   3. OSI
      : Open Systems Intelconnection，开放系统互联模型。通常有7层模型和5层模型。
      : 由于 OSI 参考模型过于庞大、复杂招致了许多批评，由技术人员自己设计了TCP/IP协议栈。
   4. TCP
      : Transmission Control Protocol，传输控制协议。面向连接的、可靠的、基于字节流的传输层通信协议；
      + 将应用层的数据流分割成报文段并发送给目标节点的TCP层；
      + 数据包都有序号，对方收到则发送ACK确认，未收到则重传。
      + 处理数据头部：先自上而下，后自下而上
	[[file:{{site.url}}/assets/images/tcp-ip-001.png]]
   5. UDP
      : User Datagram Protocol，用户数据报协议。
      + udp 特点
	- 面向非连接
	- 不维护连接状态，支持同时向多个客户端传输相同的消息
	- 数据包报头只有 8个字节，额外开销较小
	- 吞吐量只受限于数据生成速率、传输速率以及机器性能
	- 尽最大努力交付，不保证可靠交付，不需要维护复杂的连接状态表
	- 面向报文，不对应用程序提交的报文信息进行拆分或者合并
   6. HTTP
      : 超文本传输协议(Hypertext Transfer Protocol)
      + 特点
	- 支持客户端/服务器模式
	- 简单快速
	- 灵活
	- 无连接
	- 无状态
   7. Cookie
      : 是由服务器发送给客户端的特殊信息，以文本的形式存放在客户端，客户端再次请求时，会把 Cookie 回发，服务器收到后，会解析 Cookie，生成与客户端相对
      : 应的内容
      + Cookie 的设置及发送过程
	[[file:{{site.url}}/assets/images/cookie-001.png]]
   8. Session
      : 服务端的机制，在服务器上保存信息。解析客户端请求并操作 session id，按需保存状态信息。
      + Session 的实现方式
	- 使用 Cookie 实现
	- 使用 URL 回写实现
	  [[file:{{site.url}}/assets/images/session-001.png]]
   9. HTTPS
      : Hypertext Transfer Protocol Secure，超文本传输安全协议。
      + SSL
	: Security Sockets Layer，安全套接层。为网络通信提供安全及数据完整性的一种安全协议，是操作系统对外的 API，SSL 3.0 后更名为 TLS。采用身份认证和
	: 数据加密保证网络通信的安全和数据的完整性。
      + 加密方式
	- 对称加密
	- 非对称加密
	- 哈希算法
	- 数字签名：证明某个消息或文件是某人发出/认同的
      + HTTPS 数据传输流程
	1) 浏览器将支持的加密算法信息发送给服务器
	2) 服务器选择一套浏览器支持的加密算法，以证书的形式回发浏览器
	3) 浏览器验证证书合法性，并结合证书公钥加密信息发送给服务器
	4) 服务器使用私钥解密信息，验证哈希，加密响应消息回发浏览器
	5) 浏览器解密响应信息，并对消息进行验证，之后进行加密交互数据
   10. Socket
       : Socket 是对 TCP/IP 协议的抽象，是操作系统对外开放的接口。
       [[file:{{site.url}}/assets/images/socket-001.png]]
** 各层协议对照
   #+CAPTION:各层协议对照
   #+ATTR_HTML: 
   | 层次 | OSI 七层模型 | OSI 五层模型 | TCP/IP 四层参考模型    | 功能描述| TCP/IP协议族                                                                                                                                                                    |
   |------+--------------+--------------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   |  <5> | <10>         | <10>         | <15>                   || <20>                                                                                                                                                                            |
   |    7 | 应用层       | 应用层       | 应用层                 | 文件、打印、消息、数据库和应用程序服务。规定发送方和接受方必须使用固定长度的消息头，消息头必须使用某种固定的组成，而且消息头里必须记录消息体的长度等信息，以便接受方能 够正确解析信息。                                                                                                                                                                                                                                                                                                                                                                                                                                                                  | DHCP（v6）、DNS、FTP、Gopher、HTTP（SPDY、HTTP/2）、IMAP4、IRC、NNTP、XMPP、POP3、SIP、SMTP、SNMP、SSH、TELNET、RPC、RTCP、RTP、RTSP、SDP、SOAP、GTP、STUN、NTP、SSDP           |
   ||
   |    6 | 表示层       |              |                        | 信息的语法语义以及他们的关联，如数据加密、压缩和转换服务。用于解决不同操作系统之间的通信语法问题。| 没有协议                                                                                                                                                                        |
   ||
   |    5 | 会话层       |              |                        | 对话控制。不同机器上的用户之间建立及管理会话。要建立一个自动收发包，自动寻址的功能，就是会话层。| 没有协议                                                                                                                                                                        |
   ||
   |    4 | 传输层       | 传输层       | 传输层                 | 端到端连接。接受上一层的数据，在必要的时候把数据进行分割，并将这些数据交给网络层，且保证这些数据段有效到达对端。随着网络通信需求的进一步扩大，通信过程中需要发送大量的数据，如海量文件传输的，需要进行传输切分发送，切分为多个段落，其中一段落丢失如何处理？要不要重新传输？每个段落需要按照顺序到达吗？这就是传输从层需要解决的问题。传输层解决了主机间的数据传输及传输质量的问题，传输协议同时进行流量控制，或是基于接受方可接受数据的快慢程度，规定适当的发送速率。除此之外，传输层按照网络处理的最大尺寸，将较强的数据包进行强制分割，对每一个数据片分配序列号，便于接受方重组，例如以太网无法接受大于1500字节的数据包。传输层主要关注TCP、UDP协议。 | TCP（T/TCP · Fast Open）、UDP、DCCP、SCTP、RSVP、PPTP、TLS/SSL                                                                                                                  |
   ||
   |    3 | 网络层       | 网络层       | 网络层（网络互联层）   | 控制子网的运行，如逻辑编址，分组传输，路由选择。随着网络节点的增加，点对点通信需要经过多个节点，此时就出现了路径最优选择问题，便有了网络层。该层主要功能是将网络地址翻译为对应的物理地址，并决定如何将数据从发送发方路由到接受方。网络层通过综合考虑发送优先权，网络拥塞程度，服务质量，以及可选路由的花费，从而来决定一个网络中节点A到另一个网络中节点B的最佳路径。网络层主要关注TCP/IP协议中的IP协议。                                                                                                                                                                                                                                                 | IP（v4·v6）、ICMP（v6）、IGMP、IS-IS、IPsec、BGP、RIP、OSPF、RARP                                                                                                               |
   ||
   |    2 | 数据链路层   | 数据链路层   | 主机到网络层（链路层） | 物理寻址，同时将原始byte流转变为逻辑传输线路，成帧。物理从层在传输byte流的过程中，会出现错传、传输不完整的可能，因此有了数据链路层。数据链路层定义了如何格式化数据进行传输，以及如何让控制对物理介质的访问。另外，还提供错误检测和纠正，以确保数据传输的可靠性。该层将byte数据组成帧，交换机工作在这一层，对帧解码，并根据帧中包含的信息把数据发送到正确的接受方。                                                                                                                                                                                                                                                                                       | Wi-Fi（IEEE 802.11）、ARP、WiMAX（IEEE 802.16）、ATM、DTM、令牌环、以太网、FDDI、帧中继、GPRS、EV-DO、HSPA、HDLC、PPP、PPPoE、L2TP、ISDN、SPB、STP、SLIP、CSLIP、PPP、RARP、MTU |
   |------+--------------+--------------+------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   |    1 | 物理层       | 物理层       |                        | 物理拓扑，机械、电子、定时接口通信信道上的原始比特流传输，IEEE 802.2，Ethernet v.2，……；物理层主要定义了物理设备的标准，网线的类型，光纤的接口类型，各种传输介质的传输速率等，主要传输byte流，即01011……。                                                                                                                                                                                                                                                                                                                                                                                                                                                | 以太网、 调制解调器、电力线通信、同步光网络、G.709、光导纤维、同轴电缆、双绞线、ISO2110、IEEE802、IEEE802.2                                                                     |
** TCP/IP协议栈
*** TCP & UDP
    1. TCP "三次握手"
       1) TCP 报文头
          - [[file:{{site.url}}/assets/images/tcp-header-001.png]]
	  - [[file:{{site.url}}/assets/images/tcp-header-002.png]]
       2) TCP Flags
	  - URG：urgent，紧急
	  - ACK：acknowledgement，确认
	  - PSH：push，传送
	  - RST：reset，重置
	  - SYN：synchronous，同步序号，用于建立连接过程
	  - FIN：finish，结束，用于释放连接
	  - Sequence number：顺序序号
	  - Acknowledge number：确认序号
       3) 三次握手示意图及描述
	  [[file:{{site.url}}/assets/images/tcp-3-001.png]]
	  - 第一次握手：建立连接 :: 客户端发送连接请求报文段，将 SYN 置为 1，Sequence number 置为 x，然后客户端进入 SYN_SEND 状态，等待服务器确认。
	  - 第二次握手：服务器收到 SYN 报文段 :: 服务器收到 SYN 报文段并进行确认，设置 Acknowledge number 为 x+1（Sequence number+1）；同时，自己也发送一个 SYN 包，将 SYN 置为 1，Sequence number 置为 y，服务器端将上述所有信息放到一个报文段，即 SYN+ACK 包，一并发送给客户端，此时服务器进入 SYN_RECV 状态。
	  - 第三次握手：客户端收到服务器的 SYN+ACK 包 :: 将 Acknowledge number 置为 y+1，向服务器发送 ACK 报文段，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成 TCP 三次握手。
       4) 常见问题
	  + 问题1：为什么要进行三次握手？
	      : 答：为了初始化 Sequence Number 值，通信时需要互相通知对方 Sequence Number，它将作为后期数据通信的序号，保证应用层接收到的数据不会因
	      : 为网络传输问题而乱序。即 TCP 将会用它拼接数据。
	  + 问题2：SYN Flood（超时） 攻击？
	    : 答：原因分析——Server 收到 Client 的 SYN，回复 SYN-ACK 的时候未收到 ACK 确认，接着 Server 不断重试直至超时，Linux 默认等待 63秒才断开
	    : 连接；
	    : 解决办法（防护措施）：SYN 队列满后，通过 tcp_syncookies 参数回发 SYN Cookie（当 SYN 队列满后，TCP 会通过原地址端口、目标地址端口和时
	    : 间戳创建一个特别的 Sequence Number 回发，简称 SYN Cookie），若为正常连接则 Client 会 回发 SYN Cookie，直接建立连接。
	  + 问题3：建立 TCP 连接后，Client 出现故障怎么办？
	    : 答：TCP 设有保活机制，在一段时间内，连接处于非活动状态，向对方发送保活探测报文，如果未收到响应则继续发送，尝试次数达到保活探测数仍未
	    : 收到响应则中断连接。
    2. TCP "四次挥手"
       1) 四次挥手示意图及描述
	  [[file:{{site.url}}/assets/images/tcp-4-001.png]]
	  - 第一次挥手 :: （发起可以是客户端，也可以是服务端）设置 Sequence Number 和 Acknowledgment Number，Client 发送一个 FIN 报文段，用来关闭 Client 到 Server 的数据传送，Client 进入 FIN_WAIT_1 状态。
	  - 第二次挥手 :: Server 收到 FIN 报文段后，发送一个 ACK 报文段给 Client，Acknowledgment Number 为 Sequence Number+1，Server 进入 CLOSE_WAIT 状态。
	  - 第三次挥手 :: Sever 发送一个 FIN 报文段，用来关闭 Server 到 Client 的数据传送，Server 进入 LAST_ACK 状态。
	  - 第四次挥手 :: Client 收到 FIN 报文段后，Client 进入 TIME_WAIT 状态，接着发送一个 ACK 报文段给 Server，Acknowledgment Number 为 Sequence Number+1，Server 进入 CLOSED 状态，此时，Client 等待 2MSL后依然没有收到回复，则证明 Server 端已正常关闭，Client 进入 CLOSED 状态。
	  *2MSL*
	  : MSL(Maximum Segment Lifetime)，也就是报文最大生存时间，引用《TCP/IP详解》中的话：“它(MSL)是任何报文段被丢弃前在网络内的最长时间。”
	  : 2MSL也就是这个时间的 2 倍。RFC 1122建议 MSL 的值为 2 分钟，不过源自Berkeley的实现传统上改用30秒这个值。也就是说TIME_WAIT状态的持续时间在
	  : 1-4分钟之间。
	  *TTL*
	  : 为了防止数据包在网络中无限循环，而设定的网络数据包在网络传输中的最大的转发次数，因为每转发一次在路由器，就会转向下一跳，通常称为最大跳
	  : 数。具体含义即就是：我们本地机器发出一个数据包，数据包经一定数量路由器后传送到目的主机，但由于多种原因，一些数据包不能正常传送到目的主
	  : 机，那如果不给这些数据包一个生存时间的话，这些数据包就会在网络上不断的传送，导致网络开销的增大。当数据包传送到一个路由器之后，TTL就自动
	  : 减 1，如果减到 0 了还没有传送到目的主机，那么数据就会自动消失，发送数据的一方则请求超时。	  
	  [[http://subinsb.com/default-device-ttl-values/][TTL默认值]]
       2) 三次握手和四次挥手示意图
	  [[file:{{site.url}}/assets/images/tcp-3-002.jpeg]]
       3) 常见问题
	  - 问题1：为什么会有 TIME_WAIT 状态？ :: 答：确保有足够的时间让对方收到ACK包；避免新旧连接混淆。
	  - 问题2：为什么要进行"四次挥手"？ :: 答：当关闭连接时，服务器端收到了客户端的 FIN 报文通知，这仅仅表示客户端没有数据发送给服务器端了，我们知道 TCP 是全双工通信，所以未必服务器端的全部数据发送给了客户端，所以服务器端未必会马上关闭 socket ，也许服务器端还需要发送一些数据给客户端之后，再发送FIN报文给客户端，表示同意现在关闭连接，所以服务器端的 ACK 报文和 FIN 报文大多数情况下都是分开发送的。
	  - 问题3：服务器出现大量 CLOSE_WAIT 状态的原因？ :: 答：对方关闭 Socket 连接，我方忙于读或写，没有及时关闭连接。解决方式——检查代码，特别是释放资源的代码；检查配置，特别是处理请求的线程配置。如：$ netstat -n | awk '/^tcp/{++S[$NF]}END{for(a in S) print a,S[a]}'
    3. TCP 滑动窗口
       *RTT 和 RTO*
       : RTT：发送一个数据包到收到对应的ACK所花费的时间
       : RTO：重传时间间隔
       
       : TCP 使用滑动窗口做流量控制与乱序重排，这样保证TCP的可靠性、流控特性。
    4. TCP 和 UDP 的区别
       + 面向连接 VS 无连接
       + 可靠性
       + 有序性
       + 速度
       + 量级，从报头来看，TCP 属于重量级，UDP 属于轻量级。
*** HTTP & HTTPS
    1. HTTP 请求结构
       [[file:{{site.url}}/assets/images/http-request-001.png]]
    2. HTTP 响应结构
       [[file:{{site.url}}/assets/images/http-response-001.png]]
    3. HTTP 请求/响应步骤
       1) 客户端连接到 Web 服务器
       2) 发送 HTTP 请求
       3) 服务器接受请求并返回 HTTP 响应
       4) 释放 TCP 连接
       5) 客户端浏览器解析 HTML 内容
    4. 常见问题
       1) 浏览器键入 URL 经历的流程
	  1. DNS 解析
	  2. TCP 连接
	  3. 发送 HTTP 请求
       2. 服务器处理请求并返回 HTTP 响应报文
       3. 浏览器解析渲染页面
       4. 连接结束
    5. HTTP 状态码
       : 详见文章《HTTP Error 代码释义表》
       + 常见状态码
	 - 200：OK，正常返回信息
	 - 400：Bad Request，客户端请求有语法错误
	 - 401：Unauthorized，请求未经授权
	 - 403：Forbidden，服务器收到请求，但是拒绝提供服务
	 - 404：Not Found，请求资源未找到
	 - 500：Internal Server Error，服务器发生了未知错误
	 - 503：Server Unavailable，服务器当前不能处理客户端的请求，一段时间后可能恢复正常
    6. GET 和 POST 的区别
       1) HTTP 报文层面：GET 将请求信息放在 URL 中，POST 放在报文体中；
       2) 数据库层面：GET 符合幂等性和安全性，POST 不符合；
	  : 幂等的意味着对同一URL的多个请求应该返回同样的结果。这里解释一下幂等这个概念：
	  : 幂等（idempotent、idempotence）是一个数学或计算机学概念，常见于抽象代数中。幂等有一下几种定义：
	  : >对于单目运算，如果一个运算对于在范围内的所有的一个数多次进行该运算所得的结果和进行一次该运算所得的结果是一样的，那么我们就称该运算是
	  : 幂等的。比如绝对值运算就是一个例子，在实数集中，有abs(a)=abs(abs(a))。
	  : >对于双目运算，则要求当参与运算的两个值是等值的情况下，如果满足运算结果与参与运算的两个值相等，则称该运算幂等，如求两个数的最大值的函
	  : 数，有在在实数集中幂等，即max(x,x) = x。
	  
	  : 安全的含义仅仅是指是非修改信息。
       3) 其他层面：GET 可以被缓存、被存储，而 POST 不可以；GET 方式提交的数据最多只能是 1024字节，理论上 POST 没有限制，可传较大量的数据。
       4) POST的安全性要比GET的安全性高。
	  : 注意：这里所说的安全性和上面GET提到的“安全”不是同个概念。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因登录页面有可能被浏
	  : 览器缓存，其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成
	  : Cross-site request forgery攻击。
    7. Cookie 和 Session 的区别
       1) Cookie 数据存放在客户端，Session 数据存放在服务器上；
       2) Session 相对于 Cookie 更安全；
       3) 若考虑减轻服务器负担，应当使用 Cookie。
    8. HTTP 和 HTTPS 的区别
       1) HTTPS 需要用到 CA 证书，HTTP 不需要；
       2) HTTPS 密文传输，HTTP 明文传输；
       3) 连接方式不同，HTTPS 默认使用 443 端口，HTTP 使用 80 端口；
       4) HTTPS = HTTP+加密+认证+完整性保护，较 HTTP 安全
    9. HTTPS 真的很安全吗？如何预防？
       : 答：未必。浏览器默认填充 http://，请求需要进行跳转，此时有被劫持的风险；可以使用 HSTS(HTTP Strict Transport Security)优化。
*** Socket
    1. Socket 通信流程
       [[file:{{site.url}}/assets/images/socket-002.png]]
    2. 面试题
       : 问题描述：编写一个网络应用程序，有客户端和服务器端，客户端向服务器发送一个字符串，服务器收到该字符串后将其打印到命令行，然后向客户端返回该
       : 字符串的长度，最后，客户端输出服务器返回的该字符串的长度，分别用 TCP 和 UDP 两种方式去实现。
       #+NAME: Java 实现
       #+BEGIN_SRC java
       
       #+END_SRC
* 以太网
  1. 以太网
     : 以太网是一种竞用的介质访问方法，可让一个网络中的所有主机共享链接带宽。
  2. CSMA/CD
     : Carrier Sense Multiple Access With Collision Detection，载波侦听多路访问/冲突检测。
* References
  + [[https://en.wikipedia.org/wiki/Transmission_Control_Protocol][Transmission Control Protocol Wiki]]
  + [[https://www.ccnahub.com/ip-fundamentals/understanding-tcp-and-udp-protocols/][Understanding TCP and UDP Protocols]]
  + [[https://blog.csdn.net/xingerr/article/details/72834303][TCP三次握手详解]]
  + [[https://blog.csdn.net/xingerr/article/details/72845941][TCP四次挥手详解]]
  + [[https://blog.csdn.net/c_kite/article/details/79836930][TCP三次握手和四次挥手以及SSL四次握手]]
  + [[https://blog.51cto.com/12038281/1975041][HTTP请求报文]]
  + [[https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html][浅谈HTTP中Get与Post的区别]]
