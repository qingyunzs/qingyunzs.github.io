#+TITLE:     JavaScript 公共文件 
#+AUTHOR:    Rengui Zhao
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD_EXTRA: <style>body {font-size:14pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+BEGIN_EXPORT html
---
layout: post
title: JavaScript 公共文件
author: zrg
comments: false
description: JS 公共方法
categories:
- javascript
tags:
- JavaScript
photos:
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
# (setq org-export-html-style nil)

* 写在前面
: 这是关于web开发可能会用到的javascript代码片段，也许能够帮助到你。
*** JavaScript没有块级作用域
: 在其他类C的语言中，由{}封闭的代码块都有自己的作用域（如果用ECMAScript的话来讲，就是它们自己的执行环境）。                                           
#+BEGIN_SRC emacs-lisp                                                                                                                                
if(true){                                                                                                                                             
    var color="blue";                                                                                                                                 
}                                                                                                                                                     
alert(color); //"blue"                                                                                                                                
#+END_SRC
: 内容源于：《JavaScript高级程序设计》第3版 [美] Nicholas C.Zakas，p76.
* 日期/时间
*** 转换UTC时间
#+BEGIN_SRC js
function ConvertUtcTime(utctime, style) {
    if (utctime == null || utctime == "") {
    	return "";
    }else {
        var d = utctime.substring(6, utctime.length - 1);
        var newdate = new Date(parseInt(d));
        if (style == null || style == "") style = "yyyy-MM-dd hh:mm:ss";
        return newdate.format(style);
    }
}
#+END_SRC
*** 将日期转换为yyyymmddhhssmm格式
#+BEGIN_SRC js
function getDate(date) {
    var year = date.getFullYear();

    var month = date.getMonth() + 1;
    var date1 = date.getDate();
    var day = date.getDay();

    var hours = date.getHours();

    var minutes = date.getMinutes();
    var seconds = date.getSeconds();
    var ms = date.getMilliseconds();
    var curDateTime = year;
    if (month > 9) {
        curDateTime = curDateTime + month;
    } else {
        curDateTime = curDateTime + "0" + month;
    }
    if (day > 9) {
        curDateTime = curDateTime + day;
    } else {
        curDateTime = curDateTime + "0" + day;
    }
    if (hours > 9) {
        curDateTime = curDateTime + "" + hours;
    } else {
        curDateTime = curDateTime + "0" + hours;
    }
    if (minutes > 9) {
        curDateTime = curDateTime + minutes;
    } else {
        curDateTime = curDateTime + "0" + minutes;
    }
    if (seconds > 9) {
        curDateTime = curDateTime + seconds;
    } else {
        curDateTime = curDateTime + "0" + seconds;
    }
    return curDateTime;
}
#+END_SRC
*** 格式化日期
#+BEGIN_SRC js
Date.prototype.format = function (format) {
    var o =
    {
        "M+": this.getMonth() + 1, //month
        "d+": this.getDate(),    //day
        "h+": this.getHours(),   //hour
        "m+": this.getMinutes(), //minute
        "s+": this.getSeconds(), //second
        "q+": Math.floor((this.getMonth() + 3) / 3),  //quarter
        "S": this.getMilliseconds() //millisecond
    }
    if (/(y+)/.test(format))
        format = format.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(format))
            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    return format;
}
#+END_SRC
*** 日期加减
#+BEGIN_SRC js
function DateAdd(dateObj, days) {
    var tempDate = dateObj.valueOf();
    tempDate = tempDate + days * 24 * 60 * 60 * 1000
    tempDate = new Date(tempDate)
    return tempDate;
}
#+END_SRC
*** 获取指定日期
#+BEGIN_SRC js
//获取指定日期开始时间（00：00：00）
function getTodayStart(date) {
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    var d = date.getDate();
    var time = y + '-' + (m < 10 ? ('0' + m) : m) + '-' + (d < 10 ? ('0' + d) : d) + " 00:00:00";
    return time;
}

//获取指定日期结束时间（00：00：00）
function getTodayEnd(date) {
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    var d = date.getDate();
    var time = y + '-' + (m < 10 ? ('0' + m) : m) + '-' + (d < 10 ? ('0' + d) : d) + " 23:59:59";
    return time;
}

//获取指定当月第一天日期
function getMonthStart(date) {
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    //var d = date.getDate();
    var time = y + '-' + (m < 10 ? ('0' + m) : m) + '-' + 1;
    return time;
}

//获取指定当天日期
function getMonthEnd(date) {
    var y = date.getFullYear();
    var m = date.getMonth() + 1;
    var d = date.getDate();
    var time = y + '-' + (m < 10 ? ('0' + m) : m) + '-' + (d < 10 ? ('0' + d) : d);
    return time;
}

//获取月份最后一天
function getCurrentMonthLast(date) {
    var currentMonth = date.getMonth();
    var nextMonth = ++currentMonth;
    var nextMonthFirstDay = new Date(date.getFullYear(), nextMonth, 1);
    var oneDay = 1000 * 60 * 60 * 24;
    return new Date(nextMonthFirstDay - oneDay);
}
#+END_SRC
*** 计算日期差
#+BEGIN_SRC js
function getDateDiff(date1, date2) {
    var times = date2 - date1;
    var days = Math.floor(times / (1000 * 60 * 60 * 24));
    times = times - days * 1000 * 60 * 60 * 24;
    var hours = Math.floor(times / (1000 * 60 * 60));
    times = times - hours * 1000 * 60 * 60;
    var minus = Math.floor(times / 60000);
    times = times - minus * 60000;
    var secs = Math.floor(times / 6000);

    var ret = "";
    if (days > 0) {
        ret = days + "天" + hours + "时" + minus + "分" + secs + "秒";
    }
    else {
        if (hours > 0) ret = hours + "时";
        ret = ret + minus + "分" + secs + "秒";
    }
    return ret;
}
#+END_SRC
*** 倒计时
#+BEGIN_HTML emacs-lisp
<strong>剩余时间：</strong><span id="timer"></span>
#+END_HTML
#+BEGIN_SRC js
//倒计时 start
var time_end,time_now_server,time_now_client,time_end,time_server_client,timerID;
//截止时间
time_end = new Date('{$appraisal_points.stop_time|date="Y-m-d H:i:s",###}');
time_end=time_end.getTime();
//当前时间
time_now_server=new Date();
time_now_server=time_now_server.getTime();
time_now_client=new Date();
time_now_client=time_now_client.getTime();
time_server_client=time_now_server-time_now_client;
setTimeout("show_time()",1000);
//显示时间函数
function show_time()
{
    Var timer = document.getElementById("timer");
    if(!timer){
        return ;
    }
    timer.innerHTML =time_server_client;

    var time_now,time_distance,str_time;
    var int_day,int_hour,int_minute,int_second;
    var time_now=new Date();
    time_now=time_now.getTime()+time_server_client;
    time_distance=time_end-time_now;
    if(time_distance>0)
    {
        int_day=Math.floor(time_distance/86400000);
        time_distance-=int_day*86400000;
        int_hour=Math.floor(time_distance/3600000);
        time_distance-=int_hour*3600000;
        int_minute=Math.floor(time_distance/60000);
        time_distance-=int_minute*60000;
        int_second=Math.floor(time_distance/1000);

        if(int_hour<10){
            int_hour="0"+int_hour;
        }
        if(int_minute<10){
            int_minute="0"+int_minute;
        }
        if(int_second<10){
            int_second="0"+int_second;
        }
        if (int_day>0) {
            str_time="<b style='color:#46be8a;'>"+int_day+"</b style='color:#46be8a;'>天<b style='color:#46be8a;'>"+int_hour+"</b style='color:#46be8a;'>小时<b style='color:#46be8a;'>"+int_minute+"</b style='color:#46be8a;'>分钟<b style='color:#46be8a;'>"+int_second+"</b style='color:#46be8a;'>秒";
        }else if(int_day == 0 && int_hour>=12){
            str_time="<b style='color:#f5a751;'>"+int_day+"</b style='color:#f5a751;'>天<b style='color:#f5a751;'>"+int_hour+"</b style='color:#f5a751;'>小时<b style='color:#f5a751;'>"+int_minute+"</b style='color:#f5a751;'>分钟<b style='color:#f5a751;'>"+int_second+"</b style='color:#f5a751;'>秒";
        }else if(int_day == 0 && int_hour<=5){
            str_time="<b style='color:#fc6167;'>"+int_day+"</b style='color:#fc6167;'>天<b style='color:#fc6167;'>"+int_hour+"</b style='color:#fc6167;'>小时<b style='color:#fc6167;'>"+int_minute+"</b style='color:#fc6167;'>分钟<b style='color:#fc6167;'>"+int_second+"</b style='color:#fc6167;'>秒";
        }
        timer.innerHTML=str_time;
        setTimeout("show_time()",1000);
    }
    else
    {
        timer.innerHTML =timer.innerHTML;
        clearTimeout(timerID);
        // window.location.href="http://www.baidu.com";
    }
}
//倒计时 end
#+END_SRC
*** 指定睡眠时间
#+BEGIN_SRC js
/**
 * js指定睡眠时长
 * @param  {[type]} numberMillis [description]
 * @return {[type]}              [description]
 */
 function sleep(numberMillis) {
 	var now = new Date();
	var exitTime = now.getTime() + numberMillis;
 	while (true) {
		now = new Date();
	 	if (now.getTime() > exitTime)
 			return;
	}
}
#+END_SRC
* 字符串
** 生成随机验证码
#+BEGIN_SRC js
function CreateCode() {
    var code = '';
    var codeLength = 6;//验证码的长度
    var selectChar = new Array('1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z');

    for (var i = 0; i < codeLength; i++) {
        var charIndex = Math.floor(Math.random() * 32);
        code += selectChar[charIndex];
    }
    return code;
}
#+END_SRC
** 截取字符串包含中文处理
#+BEGIN_SRC js
//(串,长度,增加...) 
function subString(str, len, hasDot) {
    var newLength = 0;
    var newStr = "";
    var chineseRegex = /[^\x00-\xff]/g;
    var singleChar = "";
    var strLength = str.replace(chineseRegex, "**").length;
    for (var i = 0; i < strLength; i++) {
        singleChar = str.charAt(i).toString();
        if (singleChar.match(chineseRegex) != null) {
            newLength += 2;
        }
        else {
            newLength++;
        }
        if (newLength > len) {
            break;
        }
        newStr += singleChar;
    }

    if (hasDot && strLength > len) {
        newStr += "...";
    }
    return newStr;
}
#+END_SRC
** 获取url参数
#+BEGIN_SRC js
function GetRequest() {
    var url = location.search; //获取url中"?"符后的字串
    var theRequest = new Object();
    if (url.indexOf("?") != -1) {
        var str = url.substr(1);
        strs = str.split("&");
        for (var i = 0; i < strs.length; i++) {
            theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]);
        }
    }
    return theRequest;
}
#+END_SRC
* 数组
* 对象
** 对象(Object) ⇋ 字符串(String)
#+BEGIN_SRC javascript
// Object to String
var str=JSON.stringify(obj);
// JSON String to Object
var obj = JSON.parse(str);
#+END_SRC
** 判断对象/数组中key是否存在
#+BEGIN_SRC javascript
if(obj.hasOwnProperty(key)){...}
#+END_SRC
* 校验
** 检查对象是否为空对象
#+BEGIN_SRC js
/* 
 * 检测对象是否是空对象(不包含任何可读属性)。 //如你上面的那个对象就是不含任何可读属性
 * 方法只既检测对象本身的属性，不检测从原型继承的属性。 
 */
function isOwnEmpty(obj) {
    for (var name in obj) {
        if (obj.hasOwnProperty(name)) {
            return false;
        }
    }
    return true;
}
/* 
 * 检测对象是否是空对象(不包含任何可读属性)。 
 * 方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使hasOwnProperty)。 
 */
function isEmpty(obj) {
    for (var name in obj) {
        return false;
    }
    return true;
}
#+END_SRC
** 身份证号校验
//检验身份证号码
#+BEGIN_SRC js
function checkIdcard(idcard) {
    var Msgs = new Array(
        "验证通过",
        "校验身份证号码位数不对，请正确输入身份证号码。",
        "校验出生日期无效，请正确输入真实的身份证号码。",
        "检验身份证号码错误，请输入真实的身份证号码。",
        "校验身份证省份错误，请输入真实的身份证号码。",
"身份证号码不允许为空，请输入真实的身份证号码。"
    );

    idcard = idcard.toUpperCase();
    var area = { 11: "北京", 12: "天津", 13: "河北", 14: "山西", 15: "内蒙古", 21: "辽宁", 22: "吉林", 23: "黑龙江", 31: "上海", 32: "江苏", 33: "浙江", 34: "安徽", 35: "福建", 36: "江西", 37: "山东", 41: "河南", 42: "湖北", 43: "湖南", 44: "广东", 45: "广西", 46: "海南", 50: "重庆", 51: "四川", 52: "贵州", 53: "云南", 54: "西藏", 61: "陕西", 62: "甘肃", 63: "青海", 64: "宁夏", 65: "新疆", 71: "台湾", 81: "香港", 82: "澳门", 91: "国外" }
    var idcard, Y, JYM;
    var S, M;
    var idcard_array = new Array();
    idcard_array = idcard.split("");

    //验证是否为空
    if (idcard.length <= 0) {
        return Msgs[5];
    }

    //验证号码位数
    if (idcard.length != 15 && idcard.length != 18) {
        return Msgs[1];
    }

    //地区检验
    if (area[parseInt(idcard.substr(0, 2))] == null) {
        return Msgs[4];
    }


    //身份号码位数及格式检验
    switch (idcard.length) {
        case 15:
            if ((parseInt(idcard.substr(6, 2)) + 1900) % 4 == 0 || ((parseInt(idcard.substr(6, 2)) + 1900) % 100 == 0 && (parseInt(idcard.substr(6, 2)) + 1900) % 4 == 0)) {
                ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/;//测试出生日期的合法性
            } else {
                ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/;//测试出生日期的合法性
            }
            if (ereg.test(idcard))
                return Msgs[0];
            else {
                return Msgs[3];
            }
            break;
        case 18:
            //18位身份号码检测
            //出生日期的合法性检查 
            //闰年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))
            //平年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))
            if (parseInt(idcard.substr(6, 4)) % 4 == 0 || (parseInt(idcard.substr(6, 4)) % 100 == 0 && parseInt(idcard.substr(6, 4)) % 4 == 0)) {
                ereg = /^[1-9][0-9]{5}(19|20)[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/;//闰年出生日期的合法性正则表达式
            } else {
                ereg = /^[1-9][0-9]{5}(19|20)[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/;//平年出生日期的合法性正则表达式
            }
            if (ereg.test(idcard)) {//测试出生日期的合法性
                //计算校验位
                S = (parseInt(idcard_array[0]) + parseInt(idcard_array[10])) * 7
+ (parseInt(idcard_array[1]) + parseInt(idcard_array[11])) * 9
+ (parseInt(idcard_array[2]) + parseInt(idcard_array[12])) * 10
+ (parseInt(idcard_array[3]) + parseInt(idcard_array[13])) * 5
+ (parseInt(idcard_array[4]) + parseInt(idcard_array[14])) * 8
+ (parseInt(idcard_array[5]) + parseInt(idcard_array[15])) * 4
+ (parseInt(idcard_array[6]) + parseInt(idcard_array[16])) * 2
+ parseInt(idcard_array[7]) * 1
+ parseInt(idcard_array[8]) * 6
+ parseInt(idcard_array[9]) * 3;
                Y = S % 11;
                M = "F";
                JYM = "10X98765432";
                M = JYM.substr(Y, 1);//判断校验位
                if (M == idcard_array[17])
                    return Msgs[0];
                else {
                    return Msgs[3];
                }
            }
            else {
                return Msgs[2];
            }
            break;
        default:
            return Msgs[1];
            break;
    }
}
#+END_SRC
//身份证号码验证算法
#+BEGIN_SRC js
//--根据17位数字本体码获取最后一位校验码程序
public class Id18 {
    int[] weight={7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2};    //十七位数字本体码权重
    char[] validate={ '1','0','X','9','8','7','6','5','4','3','2'};    //mod11,对应校验码字符值    
    
    public char getValidateCode(String id17){
        int sum = 0;
        int mode = 0;
        for(int i = 0; i < id17.length(); i++){
            sum=sum+Integer.parseInt(String.valueOf(id17.charAt(i)))*weight[i];
        }
        mode = sum % 11;
        return validate[mode];
    }
    
    public static void main(String[] args){
        Id18 tes t= new Id18();
        System.out.println("该身份证验证码："+test.getValidateCode("14230219700101101"));    //该身份证校验码：3
    }
}
--公民身份号码是特征组合码，由十七位数字本体码和一位校验码组成。
排列顺序从左至右依次为：六位数字地址码，八位数字出生日期码，三位数字顺序码和一位校验码。
1、地址码
表示编码对象常住户口所在县(市、旗、区)的行政区域划分代码，按GB/T2260的规定执行。

2、出生日期码
表示编码对象出生的年、月、日，按GB/T7408的规定执行，年、月、日代码之间不用分隔符。

3、顺序码
表示在同一地址码所标识的区域范围内，对同年、同月、同日出生的人编定的顺序号，顺序码的奇数分配给男性，偶数分配给女性。

4、校验码计算步骤
(1)十七位数字本体码加权求和公式
S = Sum(Ai * Wi), i = 0, … , 16 ，先对前 17 位数字的权求和
Ai：表示第i位置上的身份证号码数字值(0~9)
Wi：7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2 （表示第 i 位置上的加权因子）
(2)计算模
Y = mod(S, 11)
(3)根据模，查找得到对应的校验码
Y: 0 1 2 3 4 5 6 7 8 9 10
校验码: 1 0 X 9 8 7 6 5 4 3 2
--说明：
1.程序可以根据已有的17位数字本体码，获取对应的验证码。
2.该程序可以剔除验证码不正确的身份证号码。
3.15位的身份证出生年份采用年份后2位，没有最后1位校验码。
4.完整的身份证18位，最后一位校验位可能是非数字。我们的一个项目，数据库保存前17位数字，这样对应一些SQL语句（比如inner join）有加速作用的！！！
#+END_SRC
** 电话号码校验
#+BEGIN_SRC js

#+END_SRC
** Email校验
#+BEGIN_SRC js

#+END_SRC
** IP地址校验
#+BEGIN_SRC js

#+END_SRC
** 其他校验
*** 检查QQ号码                                                                                                                                         
#+BEGIN_SRC emacs-lisp                                                                                                                                
function checkqq()  //检查QQ号码                                                                                                                      
{                                                                                                                                                     
        var qq=document.getElementById("qq").value;                                                                                                   
        var divqq=document.getElementById("qq");                                                                                                      
        if(qq!="")                                                                                                                                    
        {                                                                                                                                             
                if(qq.match(/\D/)!=null)                                                                                                              
                {                                                                                                                                     
                        divqq.innerHTML="<font color='red'>QQ号码只能输入数字！</font>";                                                              
                        return false;                                                                                                                 
                }                                                                                                                                     
                else                                                                                                                                  
                {                                                                                                                                    
                        divqq.innerHTML="<font color='red'>√</font>";                                                                                
                        return true;                                                                                                                  
                }                                                                                                                                     
        }                                                                                                                                             
        else                                                                                                                                          
        {                                                                                                                                            
                divqq.innerHTML="<font color='green'>√</font>";                                                                                      
                return true;                                                                                                                          
        }                                                                                                                                             
}                                                                                                                                                     
#END_SRC
*** 
* 其他
*** 滚动到页面顶部
#+BEGIN_SRC js
function goTopEx() {
    var obj = document.getElementById("goTopBtn");
    function getScrollTop() {
        return document.documentElement.scrollTop;
    }
    function setScrollTop(value) {
        document.documentElement.scrollTop = value;
    }
    window.onscroll = function () { getScrollTop() > 0 ? obj.style.display = "" : obj.style.display = "none"; }
    obj.onclick = function () {
        var goTop = setInterval(scrollMove, 10);
        function scrollMove() {
            setScrollTop(getScrollTop() / 1.1);
            if (getScrollTop() < 1) clearInterval(goTop);
        }
    }
}
#+END_SRC
* 页面操作
** 根据网页实际大小来设置iframe显示区域大小
#+BEGIN_SRC emacs-lisp                                                                                                                                
 $('#iframe_i').load(function () {                                                                                                                    
  // “ref_page”为引用页面DIV的ID，获取DIV的外部宽度、外部高度。                                                                                     
  var width = $(this).contents().find('#ref_page').outerWidth();                                                                                      
  var height = $(this).contents().find('#ref_page').outerHeight();                                                                                    
  // 设置iframe的宽度、高度。                                                                                                                         
  $(this).width(width);                                                                                                                               
  $(this).height(height);                                                                                                                             
 )};                                                                                                                                                  
#+END_SRC
** 动态显示收缩列表
Method 1:
#+BEGIN_SRC emacs-lisp                                                                                                                                
 $(document).ready(function(){                                                                                                                        
  //当点击某一列表项时，滑出下级菜单并收起其他列表项                                                                                                  
  $("#user_manage").click(function(){                                                                                                                 
   // $("#user_about").fadeToggle();                                                                                                                  
   $("#user_manage").addClass("active");                                                                                                              
   $("#node_manage").removeClass("active");                                                                                                           
   $("#role_manage").removeClass("active");                                                                                                           
   $("#setting").removeClass("active");                                                                                                               
                                                                                                                                                      
   $("#user_about").slideToggle();                                                                                                                    
   $("#node_about").slideUp();                                                                                                                        
   $("#role_about").slideUp();                                                                                                                        
      /*$("#div2").fadeToggle("slow");                                                                                                                
          $("#div3").fadeToggle(3000);*/                                                                                                              
  });                                                                                                                                                 
 });                                                                                                                                                  
#+END_SRC                                                                                                                                             

Method 2:
#+BEGIN_SRC emacs-lisp                                                                                                                                
http://jqueryui.com/accordion/                                                                                                                        
#+END_SRC
