#+TITLE:     jQuery 权威指南
#+AUTHOR:    zrg
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD_EXTRA: <style>body {font-size:16pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

#+BEGIN_EXPORT html
---
layout: post
title: jQuery 权威指南
author: zrg
comments: false
description: jQuery 权威指南
categories:
- javascript
tags:
- jQuery
photos:
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
# (setq org-export-html-style nil)

* jQuery 选择器
** 实例：隔行变色
*** 通过 JavaScript 实现：
style:
#+BEGIN_SRC emacs-lisp
<style type="text/css">
body{
font-size: 12px;
text-align: center;
}
#tbStu{
width: 260px;
border: solid 1px #666;
background-color: #eee;
}
#tbStu tr{
line-height: 23px;
}
#tbStu tr th{
background-color: #ccc;
color: #fff;
}
#tbStu .trOdd{
background-color: #fff;
}
</style>
#+END_SRC
html:
#+BEGIN_SRC emacs-lisp
<table id="tbStu" cellpadding="0" cellspacing="0">
<tbody>
<tr>
<th>StudNo</th>
<th>Name</th>
<th>Sex</th>
<th>Score</th>
</tr>
<tr>
<td>2016001</td>
<td>Wang San</td>
<td>Man</td>
<td>480</td>
</tr>
<tr>
<td>2016002</td>
<td>Zhang Si</td>
<td>Woman</td>
<td>510</td>
</tr>
<tr>
<td>2016003</td>
<td>Zhang Wu</td>
<td>Woman</td>
<td>398</td>
</tr>
</tbody>
</table>
#+END_SRC
js:
#+BEGIN_SRC emacs-lisp
<script type="text/javascript">
window.onload=function(){
var oTb=document.getElementById('tbStu');
for (var i = 0; i<oTb.rows.length; i++) {
if (i%2) {
oTb.rows[i].className="trOdd";
}
}
}
</script>
#+END_SRC

*** 通过 jQuery 实现（样式、html省略）
jQuery：
#+BEGIN_SRC emacs-lisp
<script type="text/javascript">
$(function(){
$("#tbStu tr:nth-child(even)").addClass("trOdd");
});
</script>
#+END_SRC
** 基本选择器
: #id,element,.class,*,selectorN
** 层次选择器
: ancestor descendent，匹配后代元素
: parent>child，匹配所有子元素
: prev+next(可以使用.next()代替)，匹配后面紧接的元素
: prev~sibling(可以使用nextAll()代替)，匹配后面所有元素
: 
: .siblings()方法与prev~siblings()区别在于，前者获取全部的相邻元素，不分前后。而后者仅获取标记后面全部相邻元素，不能获取前面部分。
** 简单过滤选择器
: first() or :first
: last() or :last
: :not(selector)
: :even，获取所有索引值为偶数的元素。
: :odd，奇数
: :eq(index)
: :gt(index)
: :lt(index)
: :header，获取所有标题类型的元素。
: :animated，获取正在执行动画效果的元素
** 内容过滤选择器
: :contains(text)，获取包含给定文本的元素，如果是查找字母，则有大小写的区别。
: :empty，获取所有不包含子元素或文本为空的元素。
: :has(selector)，获取含有选择器所匹配的元素。
: :parent，获取含有子元素或文本的元素。
** 可见性过滤选择器
: :hidden
: :visible，可见元素
** 属性过滤选择器
: [attribute]，获取包含给定属性的元素
: [attribute=value]，获取等于给定的属性是某个特定值的元素
: [attribute!=value]，获取不等于给定的属性是某个特定值的元素
: [attribute^=value]，获取给定的属性是以某些值开始的元素
: [attribute$=value]，获取给定的属性是以某些值结尾的元素
: [attribute*=value]，获取给定的属性是以包含某些值的元素
: [selector1][selector2][selectorN]，获取满足多个条件的复合属性的元素
** 子元素过滤选择器
: :nth-child(eq|even|odd|index)，获取每个父元素下的特定位置元素，索引号从1开始
: :first-child，获取每个父元素下的第一个子元素
: :last-child，获取每个父元素下的最后一个子元素
: :only-child，获取每个父元素下的仅有的一个子元素
** 表单对象属性过滤选择器
: :enabled，可用的元素
: :disabled，不可用的元素
: :checked，被选中的元素
: :selected，被选中option的元素
** 表单选择器
: :input，input/texteara/select
: :text
: :password
: :radio
: :checkbox
: :submit
: :image
: :reset
: :button
: :file
* jQuery操作DOM
** 访问元素
*** attr()，对元素属性执行获取和设置操作
: 获取元素属性格式：
:             attr(name)
: 元素设置格式：
:             attr(key,value)
:             attr(key,function(index))
: 
*** removeAttr()，删除某一指定的属性
: 删除元素属性格式：
:             removeAttr(name)
: 
*** 元素内容操作
: html(),html(val),text(),text(val)
*** 获取或设置元素值
: val(val)，如果不带参数，则是获取某元素的值；反之，则是将参数val的值赋给某元素，即设置元素的值。
: 可以获取多个选项值：
:     va().join(",")
*** 元素样式操作
: css(name,value)
: addClass(class) or addClass(class1 class1...)
: toggleClass(class)，类别切换
: removeClass(class)
** 节点元素操作
*** 创建节点元素
: $(html)
eg:
#+BEGIN_SRC emacs-lisp
var $div=$("<div title="xxx">Write Less Do More</div>");
$("body").append($div);
#+END_SRC
*** 插入节点
: 内部插入:
: append(content)
: append(function(index,html))
: appendTo(content)
: prepend(content)
: prepend(function(index,html))
: prependTo(content)
: 
: 外部插入：
: after(content)
: after(function)
: before(content)
: before(function)
: insertAfter(content)
: insertBefore(content)
: 
*** 复制节点
: clone(true)
: 
*** 替换节点
: replaceWith(content)
: replaceAll(selector)
: 
*** 包裹节点
: wrap(html)
: ...
** 遍历与删除
*** 遍历元素
: each(callback)
*** 删除元素
: remove([expr]
: empty()
* jQuery事件 
** 事件机制
: 冒泡现象:
: 实际需要中，我们并不希望事件的冒泡现象发生，即单击了按钮就执行单一的单击事件，而不触发其他外围事件。
: 
: jQuery中通过stopPropagation()方法来实现。
: event.stopPropagation()
: 也可以通过 return false; 实现停止事件的冒泡过程。
** 各种事件
*** 页面载入事件
: ready()，类似于js中的OnLoad()方法。OnLoad()方法的执行必须是页面元素的全部加载完成才触发。
: 
ready()写法：
#+BEGIN_SRC emacs-lisp
$(document).ready(function(){
//code
});
#+END_SRC

#+BEGIN_SRC emacs-lisp
$(function(){
//code
});
#+END_SRC

#+BEGIN_SRC emacs-lisp
jQuery(document).ready(function(){
//code
});
#+END_SRC

#+BEGIN_SRC emacs-lisp
jQuery(function(){
//code
});
#+END_SRC
*** 绑定事件
#+BEGIN_SRC emacs-lisp
$(function(){
 $("#btnShow").click(function(){
  //code
 });
});

or

bind(type,[data],fn)
eg:
$(function(){
 $("#btnBind").bind("click",function(){ //绑定多个事件，可使用空格而隔开
  $(this).attr("disabled","disabled");
 });
});

eg：映射方式绑定
$(function(){
 $(".txt").bind({focus:function(){
   $("#divTip").show();$("#divTip").html("xxx");},
   change:function(){$("#divTip").show();$("#divTip").html("xxx");}
 });
});
#+END_SRC
*** 切换事件
: hover()
: toggle(fun1,fun2,[fun3,fun4,...])

#+BEGIN_SRC emacs-lisp
$("a").hover(function(){
 //code1
 },function(){
 //code2
});

or

$("a").mouseenter(function(){
 //code1
});
$("a").mouseleave(function(){
 //code2
});
#+END_SRC
*** 移除事件
: unbind([type],[fun])
*** 其他事件
: one(type,[data],fun)，为所选元素绑定一次触发一次的处理函数
: trigger(type,[data])，在所选的元素上触发指定类型的事件。
** 表单应用
** 列表应用
** 网页选项卡应用
* jQuery动画与特效
** 显示与隐藏
JavaScript：
#+BEGIN_SRC emacs-lisp

#+END_SRC
JQuery：
#+BEGIN_SRC emacs-lisp

#+END_SRC
  
* Ajax与jQuery
#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC
* jQuery插件
** 常用插件
** UI插件
* jQuery实用工具函数
* jQuery性能优化与最佳实践
* 实例小贴士
#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC

#+BEGIN_SRC emacs-lisp

#+END_SRC
