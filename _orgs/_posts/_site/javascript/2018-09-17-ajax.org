#+TITLE:  Ajax 
#+AUTHOR:    zrg
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:t toc:nil :nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+EXPORT_SELECT_TAGS: export
#+HTML_HEAD_EXTRA: <style>body {font-size:14pt} code {font-weight:bold;font-size:12px; color:darkblue}</style>
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_EXPORT HTML
---
layout: post
title:  Ajax
author: zrg
description:  Ajax 即 Asynchronous JavaScript and XML，是指一种创建交互式网页应用的网页开发技术。
excerpt: 
comments: false
categories: 
- javascript
tags:
- Ajax
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
# (setq org-export-html-style nil)

* AJAX 简介
: 全称：Asynchronous Javascript and XML，由 Javascript+CSS+DOM+XMLHttpRequest+XSTL+XHTML+XML 七种技术组成，其中技术核心是 XMLHttpRequest。
** 同步和异步
: 同步：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式。
: 异步：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式。
* XMLHttpRequest
#+CAPTION: Ajax 原生代码示例
#+BEGIN_SRC javascript
var ajax = {
	get:function(url,func){
        // XMLHttpRequest 用于在后台与服务器交换数据   
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.onreadystatechange = function() {
        // readyState == 4 说明请求已完成
        if (xhr.readyState == 4 && xhr.status == 200 || xhr.status == 304) { 
        	// 从服务器获得数据
              fn.call(this, xhr.responseText);  
        }
    };
    xhr.send();
  },
  // data 应为 'a=a1&b=b1' 这种字符串格式，在 jquery 里如果 data 为对象会自动将对象转成这种字符串格式
  post: function (url, data, fn) {
    var xhr = new XMLHttpRequest();
    xhr.open("POST", url, true);
    // 添加 http 头，发送信息至服务器时内容编码类型
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");  
    xhr.onreadystatechange = function() {
      if (xhr.readyState == 4 && (xhr.status == 200 || xhr.status == 304)) {
        fn.call(this, xhr.responseText);
      }
    };
    xhr.send(data);
  }
};
#+END_SRC
* jQuery Ajax
** Ajax 参数详解
#+CAPTION: jQuery Ajax 代码格式示例
#+BEGIN_SRC javascript
$.ajax({
	url: URL, // 发送请求的地址（默认为当前页地址)
  type: "POST", // 请求方式：post/get/put/delete（默认为get)
  timeout: 600, // 请求超时时间，单位毫秒
  async:true, // true，异步请求；false，同步请求。
  cache:false, // true，从浏览器加载缓存；false，不从浏览器加载缓存
  data: JSON.stringify(stream), // 发送到服务器的数据，要求为Object或String类型的参数。
  dataType: "json",// 预期服务器返回的数据类型。可用的类型有:xml,html,script,json,jsonp,text
  contentType: "application/json; charset=utf-8", // 当发送信息至服务器时，内容编码类型。默认为"application/x-www-form-urlencoded"，multipart/form-data：有时候也会这个，上传下载可能会用到。
  beforeSend: function(XMLHttpRequest){
  	// 设置请求头,加载loading界面
  },
  dataFilter:function(){ //给Ajax返回的原始数据进行预处理的函数。提供data和type两个参数。data是Ajax返回的原始数据，type是调用jQuery.ajax时提供的dataType参数。
  	// 
  },
  global:false, //表示是否触发全局ajax事件。默认为true。
  ifModified:false, //仅在服务器数据改变时获取新数据。服务器数据改变判断的依据是Last-Modified头信息。默认值是false，即忽略头信息。
  jsonP:"",// 在一个jsonp请求中重写回调函数的名字。 
  username:"zrg", //用于响应HTTP访问认证请求的用户名。
  password:"123456", //用于响应HTTP访问认证请求的密码。
  processData:false, // 默认情况下，发送的数据将被转换为对象（从技术角度来讲并非字符串）以配合默认内容类型"application/x-www-form-urlencoded"。如果要发送DOM树信息或者其他不希望转换的信息，请设置为false。
  scriptCharset:"", //只有当请求时dataType为"jsonp"或者"script"，并且type是GET时才会用于强制修改字符集(charset)。通常在本地和远程的内容编码不同时使用。
  complete: function(XMLHttpRequest, textStatus){ // 请求完成后调用的回调函数（请求成功或失败时均调用）
  	// 
  },
  success: function (data,textStatus) { // 请求成功后调用的回调函数，有两个参数: (1)由服务器返回，并根据dataType参数进行处理后的数据;(2)描述状态的字符串。
  	if (data.success) {
    		//
      } else {
      	//
      }
  },
  error: function(XMLHttpRequest, textStatus, errorThrown){ // 请求失败时被调用的函数。有3个参数，即XMLHttpRequest对象、错误信息、捕获的错误对象(可选)。
  	//
  }
});
#+END_SRC
** 常见的 POST 提交数据方式
1. application/x-www-form-urlencoded
   : 浏览器的原生 <form> 表单，如果不设置 enctype 属性，那么最终就会以 application/x-www-form-urlencoded 方式提交数据。
2. multipart/form-data
   : 一般用来上传文件
3. application/json
   : 该方案可以方便的提交复杂的数据结构，特别适合 RESTful 的接口。
4. text/xml
   : XML 结构传输。
   : XML-RPC（XML Remote Procedure Call），它是一种使用 HTTP 作为传输协议，XML 作为编码方式的远程调用规范。它的使用也很
   : 广泛，如 WordPress 的 XML-RPC Api，搜索引擎的 ping 服务等等。
** 提交 Form 表单(包括文件上传)
*** 常规方法
#+CAPTION: 一般是这样的
#+BEGIN_SRC js
$.ajax({
	url:"${pageContext.request.contextPath}/public/testupload",
    type:"post",
    data:{username:username},
    success:function(data){
    	window.clearInterval(timer);
        //
    },
    error:function(e){
    	//
    }
});

// 或者单一获取
var username = $("#username").val();
var password = $("#password").val();
...
#+END_SRC
// 以上方式，如果数量少的话，那还没有什么，但是如果数据十分大的话，那就十分的麻烦。
*** 使用 FormData 对象
// 下面就介绍提高开发效率的方法
#+CAPTION: 使用 FormData 对象（XMLHttpRequest）
#+BEGIN_SRC js
// FormData对象是html5的一个对象，目前的一些主流的浏览器都已经兼容。
var form = new FormData();
form.append("username","zxj");
form.append("password",123456);
var req = new XMLHttpRequest();
req.open("post", "${pageContext.request.contextPath}/public/testupload", false);
req.send(form);
#+END_SRC
#+CAPTION: 使用 FormData 对象（jQuery Ajax）
#+BEGIN_SRC js
var form = new FormData();
form.append("username","zxj");
form.append("password",123456);
$.ajax({
	url:"${pageContext.request.contextPath}/public/testupload",
    type:"post",
    data:form,
    processData:false,
    contentType:false,
    success:function(data){
    	window.clearInterval(timer);
	    //
    }
});
#+END_SRC
*** 使用 jQuery.form.js
: 具体参考https://github.com/jquery-form/form
* References
+ [[https://baike.baidu.com/item/ajax][Ajax 百度百科]]
+ [[https://blog.csdn.net/qq_27093465/article/details/49799341][$.ajax({});的各个参数的理解]]
+ [[https://www.cnblogs.com/zhuxiaojie/p/4783939.html][使用ajax提交form表单，包括ajax文件上传]]
