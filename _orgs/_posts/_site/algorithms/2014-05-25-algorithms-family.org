#+TITLE:     算法之家
#+AUTHOR:    赵仁贵(Rengui Zhao)
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+HTML_HEAD_EXTRA: <style>body {font-size:14pt} code {font-weight:bold;font-size:100%; color:darkblue}</style>
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+BEGIN_EXPORT HTML
---
layout: post
title: 算法之家
author: zrg
comments: false
description: 算法...
categories:
- algorithms
tags:
- 算法之家
photos:
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
zrg1390556487@gmail.com
# (setq org-export-html-style nil)

* 初级LV.1
** Hello World
   #+NAME: Hello World
   #+BEGIN_SRC C
#include<stdio.h>
void main(){
	printf("Hello World!");
}
   #+END_SRC
** a+b
   #+NAME: a+b
   #+BEGIN_SRC C
#include<stdio.h>
void main(){
	int a,b;
	printf("Please enter two integers separated by commas!\n");
	printf("a=");
	scanf("%d",&a);
	printf("b=");
	scanf("%d",&b);
	printf("a+b=%d\n",a+b);
}
   #+END_SRC
** 大小写转换
   #+NAME: 大小写转换
   #+BEGIN_SRC C
#include<stdio.h>
#include<string.h>
/**
 * Conversion
 * a-z <--> A-Z
 */
//init
char convert(char ch);
//main
void main(){
	int i,j;
	int n,length;
	char arr[300];
	printf("Please enter n value.\n");
	scanf("%d",&n);
	for(i=0;i<n;i++){
		gets(arr);
		length=strlen(arr);
		for(j=0;j<=n;j++){
			arr[j]=convert(arr[j]);
		}
		for(j=0;j<length;j++){
			putchar(arr[j]);
		}
	}
}
//convert
char convert(char ch){
	if(ch>='a'&&ch<='z'){
		return ch-32;
	}else if(ch>='A'&&ch<='Z'){
		return ch+32;
	}else{
		return ch;
	}
}
   #+END_SRC
** 水仙花数
   #+NAME: 水仙花数
   #+BEGIN_SRC C
#include<stdio.h>
/**
 * 水仙花数(Narcissus number)
 * 描述：如果一个三位数的每个数位的三次方和就是本身。
 * */
int isYes(int n);
void main(){
	int l,m,n,flag;
	printf("Please enter 3-digit interger,Separated by commas!\n");
	while(scanf("%d,%d",&m,&n)!=EOF){
		flag=0;
		for(l=m;l<=n;l++){
			if(isYes(l)){
				flag=1;
				printf("%d ",l);
			}
		}
		if(flag==0){
			printf("No!");
		}
	}
}
int isYes(int n){
	int i,j,k;
	i=n/100;//百位
	j=n/10%10;//十位
	k=n%10;//个位
	if(n==i*i*i+j*j*j+k*k*k){
		return 1;
	}else{
		return 0;
	}
}
   #+END_SRC
** 青蛙王子
   #+NAME: 青蛙王子
   #+BEGIN_SRC C
#include<stdio.h>
/**
 * 一个王子被巫师诅咒，……
 * */
void main(){
	unsigned int a,b,c,temp,min;
	while(scanf("%u %u %u",&a,&b,&c),a!=0||b!=0||c!=0){
		if(a==0&&b==0){
			printf("No\n");
			continue;
		}
		if(b>a){
			temp=a;
			a=b;
			b=temp;
		}
		if(b==0){
			min=a;
		}
		if(a==b){
			min=a;	
		}
		while(a>b&&b!=0){
			temp=a-b;
			if(temp>b){
				a=temp;
			}else if(temp<b){
				a=b;
				b=temp;	
			}else{
				min=temp;
				break;
			}
		}
		if((c%min)==0){
			printf("Yes\n");
		}else{
			printf("No\n");
		}
	}
}
   #+END_SRC
** 海明距离
   #+NAME: 海明距离
   #+BEGIN_SRC C
#include<stdio.h>
/**
 * 海明距离(Haiming Distance)
 * 二进制情况下，一个整数变成另一个整数需要翻转的位数。
 * */
void main(){
	int x,y,m,n;
	int dist=0;
	printf("Please enter 2-digit integer,Separated by commas!\n");
	scanf("%d,%d",&x,&y);
	while(x!=0||y!=0){
		m=x%2;x=x/2;
		n=y%2;y=y/2;
		if(m!=n){
			dist++;
		}
	}
	printf("x and y [Haiming Distance]:%d",dist);
}
   #+END_SRC
** 哈密尔顿距离
   #+NAME: 哈密尔顿距离
   #+BEGIN_SRC C
#include<stdio.h>
/**
 * 哈密尔顿距离
 * Hamilton.c
 * 有两个点P[x1,y1],Q[x2,y2]，定义其哈密尔顿距离D=|x1-x2|+|y1-y2|
 * */
void main(){
	int x1,y1,x2,y2,temp_x,temp_y;
	printf("Please enter 4 numbers,each 2 numbers are Separated by commas.Format:'3,4 5,6'\n");
	scanf("%d,%d %d,%d",&x1,&y1,&x2,&y2);
	if(x1>x2){
		temp_x=x1-x2;
	}else{
		temp_x=x2-x1;
	}
	if(y1>y2){
		temp_y=y1-y2;
	}else{
		temp_y=y2-y1;
	}
	printf("result:%d\n",temp_x+temp_y);
}
   #+END_SRC
** 数码平方和
   #+NAME: 数码平方和
   #+BEGIN_SRC C
#include<stdio.h>
/**
 * 数码平方和
 * 一个整数各个数码的平方和的个位数成为分类值。给你一个区间[a,b]，一个数码n，求这个区间[a,b]内的分类值n。
 * */
void main(){
	int a,b,c,d,e;
	printf("Please enter 3 numbers.\n");
	scanf("%d,%d,%d",&a,&b,&e);
	int i,j,k,n,f,g;	
	for(i=0;i<=b;i++){
		g=i;c=i;
		f=0;d=c;
		for(;d!=0;){
			c=d%10;
			f=f+c*c;
			d=d/10;
		}
		f=f%10;
		if(f==e){
			k++;
		}
	}
	printf("result:%d\n",k);
}
   #+END_SRC
** 统计字符
   #+NAME: 统计字符
   #+BEGIN_SRC C
#include<stdio.h>
#include<string.h>
/**
 * Statistics Strings
 * 输入一字符串，请找出出现次数最多的大写字母。
 * 采用哈希映射思想，把A-Z映射到哈希表中保存其出现的次数，最后输出结果。
 * */
void main(){
	char str[100],z[1000];
	int i,j,k,sum[30],a;
	gets(z);//读取字符串
	memset(sum,0,sizeof(str));
	for(i=0;i<strlen(z);i++){
		sum[z[i]-'A']++;
	}
	k=0;
	for(i=0;i<30;i++){
		if(k<sum[i]){
			k=sum[i];
			a=i+'A';
		}
	}
	printf("%c %d\n",a,k);	
}
   #+END_SRC
** 数字塔
   #+NAME: 数字塔
   #+BEGIN_SRC C
/**
 * Digital Tower
 *    1
 *   222
 *  33333
 * */
#include<stdio.h>
void main(){
	int n;
	printf("Please enter any number!\n");
	scanf("%d",&n);
	int i,j;
	
}
   #+END_SRC
** 有多少个1
   #+NAME: 有多少个1
   #+BEGIN_SRC C
#include<stdio.h>
#include<stdlib.h>
void hanoi(int n,char x,char y,char z);
int main(void){
	hanoi(6,'A','B','C');
	return EXIT_SUCCESS;	
}
void hanoi(int n,char x,char y,char z){
	if(n==0){
		
	}else{
		hanoi(n-1,x,z,y);
		printf("%c->%c,",x,y);
		hanoi(n-1,z,y,x);
	}
}
   #+END_SRC
** 字符串逆序
   #+NAME:字符串逆序
   #+BEGIN_SRC C

   #+END_SRC
** 回文字串
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 凯撒的密码
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 最小公倍数
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 素数判定
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 素数个数
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 分数加减法
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 合法的整数
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 质因数分解
   #+NAME:
   #+BEGIN_SRC C

   #+END_SRC
** 歌德巴赫猜想
** 替换空格
** 队列的实现
** 栈的实现 
** 循环队列
** 合并两个有序链表
** 逆转一个链表
** 从尾到头打印链表
** 链表中倒数第k个结点
** O(1)时间内删除链表结点  
* 中级LV.2
** 递归之杨辉三角
** 递归之斐波那契数列
** 递归之汉诺塔
** 分治之二分搜索
** 旋转数组的最小数字
** 分治之棋盘覆盖
** 回溯之全排列
** 回溯之N皇后问题
** NFS深度优先搜索
** BFS广度优先搜索
** BFS+记录路径
** 回溯之旅行售货员
** 回族之0+1背包问题
** 二叉树遍历
* 高级LV.3
** 动态规划之拦截导弹
** 动态规划之完全背包
** 动态规划之01背包
** 动态规划之统计单词个数
** 最长公共字符子序列
** 最小生成树Prim算法
** 最小生成树Kruskal算法
** 网络流之最大流（EK）
** 二分图最大匹配算法
** 最小费用流之飞镖
** 网络流之方格取数
** 强联通分量-Kosaraju算法
** 博弈论之取石子游戏
** 图论之拓扑排序
