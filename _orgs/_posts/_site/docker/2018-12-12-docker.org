#+TITLE:  docker notes 
#+AUTHOR:    zrg
#+EMAIL:     zrg1390556487@gmail.com
#+LANGUAGE:  cn
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:plain toc:t ltoc:t mouse:underline buttons:0 path:http://cs3.swfc.edu.cn/~20121156044/.org-info.js />
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://cs3.swfu.edu.cn/~20121156044/.org-manual.css" />
#+EXPORT_SELECT_TAGS: export
#+HTML_HEAD_EXTRA: <style>body {font-size:14pt} code {font-weight:bold;font-size:12px; color:darkblue}</style>
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT: 

#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_EXPORT HTML
---
layout: post
title: Docker notes
author: zrg
description: Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。
excerpt: 
comments: false
categories: 
- 虚拟化
tags:
- docker
---
#+END_EXPORT

# (setq org-export-html-use-infojs nil)
感谢您阅读此文，如果您发现任何错误，请发邮件至 zrg1390556487@gmail.com，谢谢！
# (setq org-export-html-style nil)

* Docker 简介
** Docker 是什么
: Docker 是个划时代的开源项目，它彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！使用 Docker，可以让应用的部署、测试和分发都变得前所未有的高效和轻松！

: 无论是应用开发者、运维人员、还是其他信息技术从业人员，都有必要认识和掌握 Docker，节约有限的生命。
** 为什么要用 Docker
+ 更高效的利用系统资源
+ 更快速的启动时间
+ 一致的运行环境
+ 持续交付和部署
+ 更轻松的迁移
+ 更轻松的维护和扩展
+ 对比传统虚拟机总结
| 特性         | 	容器               | 	虚拟机     |
|--------------+----------------------------+--------------------|
| 启动         | 	秒级	       | 分钟级             |
| 硬盘使用     | 	一般为 MB	  | 一般为 GB          |
| 性能	 | 接近原生                   | 	弱于       |
| 系统支持量   | 	单机支持上千个容器 | 	一般几十个 |
* 基本概念
** 镜像
: 1. Docker 镜像
Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:18.04 就包含了完整的一套 Ubuntu 18.04 最小系统的 root 文件系统。
Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。

: 2. 分层存储
Docker 利用了 [[https://en.wikipedia.org/wiki/Union_mount][Union FS]] 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。
镜像构建时，会一层层构建，前一层是后一层的基础。在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。
** 容器
容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。
容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。
每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。
** 仓库
: 1. Docker Registry
[[https://yeasy.gitbooks.io/docker_practice/content/repository/registry.html][Docker Registry]] 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。

: 2. Docker Registry 公开服务
开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。
最常使用的 Registry 公开服务
+ 官方的 [[https://hub.docker.com/][Docker Hub]]
+ [[https://coreos.com/][CoreOS]]
+ [[https://quay.io/repository/][Quay.io]]
+ 时速云镜像仓库
+ 网易云镜像服务
+ DaoCloud 镜像市场
+ 阿里云镜像库
: 由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（Registry Mirror），这些镜像服务被称为加速器。常见的有：
+ [[https://cr.console.aliyun.com/#/accelerator][阿里云加速器]]
+ [[https://www.daocloud.io/mirror#accelerator-doc][DaoCloud 加速器]]
***  
* 安装 Docker
+ Ubuntu：https://yeasy.gitbooks.io/docker_practice/content/install/ubuntu.html
+ Debian：https://yeasy.gitbooks.io/docker_practice/content/install/debian.html
+ CentOS：https://yeasy.gitbooks.io/docker_practice/content/install/centos.html
+ Raspberry Pi：https://yeasy.gitbooks.io/docker_practice/content/install/raspberry-pi.html
* References
+ [[https://yeasy.gitbooks.io/docker_practice/content/][Docker — 从入门到实践]]
+ [[https://en.wikipedia.org/wiki/Union_mount][Union FS]]
